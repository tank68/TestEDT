#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС

// Функция возвращает Виды аналитики для лицевых счетов принадлежащих счету ЕПС. 
//
// Параметры:
//  СчетЕПС - ПланСчетовСсылка.ЕПС.
//  Портфель - СправочникСсылка.ДоговорыДУ.
//
// Возвращаемое значение:
//	<Массив> - Возвращается массив элементов ПВХ, которые поддерживаются лицевыми счетами переданного Счета ЕПС в переданном Портфеле.
//- Если настройки по переданному портфелю не найдено, то возвращается настройка с пустым портфелем.
//- Если и настройки с пустым портфелем не найдено, то возвращается пустой массив.
//- Порядок следования элементов массива соответствует порядку аналитики на лицевом счете
//
Функция АналитикаСчета(СчетЕПС, Портфель) Экспорт
	
	Возврат  УчетЕПСПовтИсп.АналитикаЛицевогоСчетаЕПС(СчетЕПС, Портфель);
	
КонецФункции

// Функция возвращает маску для лицевых счетов принадлежащих счету ЕПС. 
//
// Параметры:
//  СчетЕПС - ПланСчетовСсылка.ЕПС.
//  Портфель - СправочникСсылка.ДоговорыДУ.
//
// Возвращаемое значение:
//	<Массив> - Возвращается массив элементов ПВХ, которые поддерживаются лицевыми счетами переданного Счета ЕПС в переданном Портфеле.
//- Если настройки по переданному портфелю не найдено, то возвращается настройка с пустым портфелем.
//- Если и настройки с пустым портфелем не найдено, то возвращается пустой массив.
//- Порядок следования элементов массива соответствует порядку аналитики на лицевом счете
//
Функция МаскаЛицевогоСчетаЕПС(СчетЕПС, Портфель) Экспорт
	
	Возврат  УчетЕПСПовтИсп.МаскаЛицевогоСчетаЕПС(СчетЕПС, Портфель);
	
КонецФункции

// Функция проверяет соответствует ли запись набора Аналитике счета. 
//
// Параметры:
//  Запись - Запись из набора записей НастройкаАналитикиЛицевыхСчетовЕПС.
//  Счет - ПланСчетовСсылка.ЕПС .
//
// Возвращаемое значение:
//	Истина если соответствует, Ложь если нет
Функция ЗаписьСоответствуетАналитикиСчета(Запись, Счет) Экспорт 
	
	Соответствует = Истина;
	
	ДанныеСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчетаЕПС(Счет);
	
	Если ДанныеСчета.Парный Тогда
		Для Сч = 1 По ДанныеСчета.КоличествоСубконто Цикл
			ВернаяАналитикаНаЛицевомСчете = ДанныеСчета["ВидСубконто" + Сч];
			
			Если ВернаяАналитикаНаЛицевомСчете <> Запись["Аналитика" + Сч] Тогда 
				Соответствует = Ложь;				
			КонецЕсли;
			
		КонецЦикла;
		
		Для НомерАналитики = Сч по 5 Цикл
			ВернаяАналитикаНаЛицевомСчете = ПланыВидовХарактеристик.ВидыСубконтоЕПС.ПустаяСсылка();
			Если ВернаяАналитикаНаЛицевомСчете <> Запись["Аналитика" + НомерАналитики] Тогда 
				Соответствует = Ложь;				
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

#Область ПРОВЕРКИ_НАСТРОЕК_АНАЛИТИКИ

Функция ПроверитьНастройкиПоПортфелям(Счета)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Портфель
	|ПОМЕСТИТЬ ВТ_НастроенныеПортфели
	|ИЗ
	|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС
	|ГДЕ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет В(&Счета)
	|	И НастройкаАналитикиЛицевыхСчетовЕПС.Портфель <> ЗНАЧЕНИЕ(Справочник.уа_ЛицевыеСчетаЕПС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛицевыеСчетаЕПС.Портфель КАК Портфель
	|ИЗ
	|	ВТ_НастроенныеПортфели КАК ВТ_НастроенныеПортфели,
	|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
	|ГДЕ
	|	НЕ ЛицевыеСчетаЕПС.Портфель В
	|				(ВЫБРАТЬ
	|					ВТ_НастроенныеПортфели.Портфель
	|				ИЗ
	|					ВТ_НастроенныеПортфели)";
	
	Запрос.УстановитьПараметр("Счета", Счета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Портфель);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивПроверяемыхСчетовЕПС(Счет)
	
	Счета = Новый Массив;
	Счета.Добавить(Счет);
	Если Счет.Парный Тогда
		ПарныйСчет = РегистрыСведений.ПарныеСчетаЕПС.ПарныйСчет(Счет);
		Если ЗначениеЗаполнено(ПарныйСчет) Тогда
			Счета.Добавить(ПарныйСчет);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Счета;
		
КонецФункции

Функция ПолучитьМассивПроверяемыхПортфелей(Портфель, Счета)
	
	Портфели = Новый Массив;
	Если Не ЗначениеЗаполнено(Портфель) Тогда
		Портфели = ПроверитьНастройкиПоПортфелям(Счета);
	Иначе
		Портфели.Добавить(Портфель);
	КонецЕсли; 
	
	Возврат Портфели;
		
КонецФункции

Функция ПолучитьЛицевыеСчетаСАналитикой(Счет, Портфель) Экспорт
	
	Счета 		= ПолучитьМассивПроверяемыхСчетовЕПС(Счет);
	Портфели 	= ПолучитьМассивПроверяемыхПортфелей(Портфель, Счета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛицевыеСчетаЕПС.Ссылка КАК ЛицевойСчет,
	|	ЛицевыеСчетаЕПС.ЗначениеАналитики1,
	|	ЛицевыеСчетаЕПС.ЗначениеАналитики2,
	|	ЛицевыеСчетаЕПС.ЗначениеАналитики3,
	|	ЛицевыеСчетаЕПС.ЗначениеАналитики4,
	|	ЛицевыеСчетаЕПС.ЗначениеАналитики5
	|ИЗ
	|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
	|ГДЕ
	|	ЛицевыеСчетаЕПС.Владелец В(&Счета)
	|	И ЛицевыеСчетаЕПС.Портфель В(&Портфели)
	|	И НЕ ЛицевыеСчетаЕПС.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Счета", 		Счета);
	Запрос.УстановитьПараметр("Портфели", 	Портфели);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЛицевыеСчетаПозволяютИзменитьНастройкуАналитики(ТаблицаСчетов, ТаблицаСоответствий)
	
	Для каждого СтрокаСоответствия Из ТаблицаСоответствий Цикл
		Если СтрокаСоответствия.НовыйИндексАналитики = 0 Тогда
			УдаляемаяАналитика 	= "ЗначениеАналитики" + Строка(СтрокаСоответствия.СтарыйИндексАналитики);
			ТаблицаПроверки 	= ТаблицаСчетов.Скопировать(,УдаляемаяАналитика);
			ТаблицаПроверки.Свернуть(УдаляемаяАналитика);
			Для каждого СтрокаПроверки Из ТаблицаПроверки Цикл
				Если ЗначениеЗаполнено(СтрокаПроверки[УдаляемаяАналитика]) Тогда
					Возврат Ложь;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;   
	
	Возврат Истина;
		
КонецФункции
 
Функция ПереопределитьАналитикуЛицевыхСчетов(ТаблицаСчетов, ТаблицаСоответствий)
	
	Попытка
		НачатьТранзакцию();
		Для каждого СтрокаСчет Из ТаблицаСчетов Цикл
			СтруктураПереносаАналитики = Новый Структура;
			Для каждого СтрокаСоответствия Из ТаблицаСоответствий Цикл
				Если СтрокаСоответствия.НовыйИндексАналитики = 0 Тогда
					Продолжить;
				КонецЕсли; 
				НовыйИндексАналитики 	= СтрокаСоответствия.НовыйИндексАналитики;
				СтарыйИндексАналитики 	= СтрокаСоответствия.СтарыйИндексАналитики;
				СтруктураПереносаАналитики.Вставить("ЗначениеАналитики" + Строка(НовыйИндексАналитики), СтрокаСчет["ЗначениеАналитики" + Строка(СтарыйИндексАналитики)]);
			КонецЦикла;
			
			ЛицевойСчетОбъект = СтрокаСчет.ЛицевойСчет.ПолучитьОбъект();
			ЛицевойСчетОбъект.ЗначениеАналитики1 = Неопределено;
			ЛицевойСчетОбъект.ЗначениеАналитики2 = Неопределено;
			ЛицевойСчетОбъект.ЗначениеАналитики3 = Неопределено;
			ЛицевойСчетОбъект.ЗначениеАналитики4 = Неопределено;
			ЛицевойСчетОбъект.ЗначениеАналитики5 = Неопределено;
			ЗаполнитьЗначенияСвойств(ЛицевойСчетОбъект, СтруктураПереносаАналитики);
			ЛицевойСчетОбъект.Записать();
		КонецЦикла; 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьДублиАналитики(Запись) Экспорт
	
	ТаблицаАналитики = Новый ТаблицаЗначений;
	ТаблицаАналитики.Колонки.Добавить("Аналитика");
	ТаблицаАналитики.Колонки.Добавить("ПризнакЗаполнения", Новый ОписаниеТипов("Число"));
	
	Для счетчик = 1 По 5 Цикл
		Если ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик)]) Тогда
			СтрокаАналитики 					= ТаблицаАналитики.Добавить();
			СтрокаАналитики.Аналитика 			= Запись["Аналитика" + Строка(счетчик)];
			СтрокаАналитики.ПризнакЗаполнения 	= 1;
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаАналитики.Свернуть("Аналитика", "ПризнакЗаполнения");
	
	Возврат ТаблицаАналитики.Количество() <> ТаблицаАналитики.Итог("ПризнакЗаполнения");
	
КонецФункции

Функция ЕстьНарушенияПорядкаЗаполненияАналитики(Запись) Экспорт
	
	Для счетчик1 = 1 По 4 Цикл
		Если Не ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик1)]) Тогда
			Для счетчик2 = счетчик1 + 1 По 5 Цикл
				Если ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик2)]) Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;
		
КонецФункции

Функция ПроверкаПереопределениеАналитикиЛицевыхСчетов(СписокАналитикиДоИзменения, СписокАналитикиПослеИзменения, ТаблицаЛицевыхСчетов)
	
	ТаблицаСоответствияАналитики			= Новый ТаблицаЗначений;
	ТаблицаСоответствияАналитики.Колонки.Добавить("СтарыйИндексАналитики");
	ТаблицаСоответствияАналитики.Колонки.Добавить("НовыйИндексАналитики");
	ТаблицаСоответствияАналитики.Колонки.Добавить("ПризнакПереносаАналитики");
	
	Для счетчик = 1 По СписокАналитикиДоИзменения.Количество() Цикл
		СтрокаСоответствия = ТаблицаСоответствияАналитики.Добавить();
		СтрокаСоответствия.СтарыйИндексАналитики	= счетчик;
		СтрокаСоответствия.ПризнакПереносаАналитики	= 0;
		НайденнаяАналитика = СписокАналитикиПослеИзменения.НайтиПоЗначению(СписокАналитикиДоИзменения[счетчик - 1].Значение);
		Если НайденнаяАналитика = Неопределено Тогда
			СтрокаСоответствия.НовыйИндексАналитики = 0;
		Иначе
			СтрокаСоответствия.НовыйИндексАналитики = Число(НайденнаяАналитика.Представление);
			Если СтрокаСоответствия.НовыйИндексАналитики <> СтрокаСоответствия.СтарыйИндексАналитики Тогда
				СтрокаСоответствия.ПризнакПереносаАналитики	= 1;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЛицевыеСчетаПозволяютИзменитьНастройкуАналитики(ТаблицаЛицевыхСчетов, ТаблицаСоответствияАналитики) Тогда
		Если ТаблицаСоответствияАналитики.Итог("ПризнакПереносаАналитики") > 0 Тогда
			Возврат ПереопределитьАналитикуЛицевыхСчетов(ТаблицаЛицевыхСчетов, ТаблицаСоответствияАналитики);
		Иначе
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции
  
Функция ПроверитьСоответсвиеЛицевыхСчетовНастройкеПустогоПортфеляПриУдаленииНастройки(Запись) Экспорт
	
	Портфель 	= Запись.Портфель;
	Счет 		= Запись.Счет;
	
	ТаблицаЛицевыхСчетов = ПолучитьЛицевыеСчетаСАналитикой(Счет, Портфель);
	
	Если ТаблицаЛицевыхСчетов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		НаборЗаписейПустойПортфель = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
		НаборЗаписейПустойПортфель.Отбор.Портфель.Установить(Справочники.Портфели.ПустаяСсылка());
		НаборЗаписейПустойПортфель.Отбор.Счет.Установить(Счет);
		НаборЗаписейПустойПортфель.Прочитать();
		Если НаборЗаписейПустойПортфель.Количество() = 0 Тогда
			Возврат Истина;
		Иначе
			ЗаписьПустойПортфель 	= НаборЗаписейПустойПортфель[0];
			
			СписокАналитикиПослеИзменения 			= Новый СписокЗначений;
			Для счетчик = 1 По 5 Цикл
				Если ЗначениеЗаполнено(ЗаписьПустойПортфель["Аналитика" + Строка(счетчик)]) Тогда
					СписокАналитикиПослеИзменения.Добавить(ЗаписьПустойПортфель["Аналитика" + Строка(счетчик)], Строка(счетчик));
				КонецЕсли; 
			КонецЦикла; 
			
			СписокАналитикиДоИзменения		 		= Новый СписокЗначений;
			Для счетчик = 1 По 5 Цикл
				Если ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик)]) Тогда
					СписокАналитикиДоИзменения.Добавить(Запись["Аналитика" + Строка(счетчик)], Строка(счетчик));
				КонецЕсли; 
			КонецЦикла; 
			
			Возврат ПроверкаПереопределениеАналитикиЛицевыхСчетов(СписокАналитикиДоИзменения, СписокАналитикиПослеИзменения, ТаблицаЛицевыхСчетов);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции
  
Функция ПроверитьСоответсвиеЛицевыхСчетовНастройкеПустогоПортфеляПриДобавленииНастройки(Запись) Экспорт
	
	Портфель 	= Запись.Портфель;
	Счет 		= Запись.Счет;
	
	ТаблицаЛицевыхСчетов = ПолучитьЛицевыеСчетаСАналитикой(Счет, Портфель);
	
	Если ТаблицаЛицевыхСчетов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		НаборЗаписейПустойПортфель = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
		НаборЗаписейПустойПортфель.Отбор.Портфель.Установить(Справочники.Портфели.ПустаяСсылка());
		НаборЗаписейПустойПортфель.Отбор.Счет.Установить(Счет);
		НаборЗаписейПустойПортфель.Прочитать();
		Если НаборЗаписейПустойПортфель.Количество() = 0 Тогда
			Возврат Истина;
		Иначе
			ЗаписьПустойПортфель 	= НаборЗаписейПустойПортфель[0];
			
			СписокАналитикиДоИзменения 			= Новый СписокЗначений;
			Для счетчик = 1 По 5 Цикл
				Если ЗначениеЗаполнено(ЗаписьПустойПортфель["Аналитика" + Строка(счетчик)]) Тогда
					СписокАналитикиДоИзменения.Добавить(ЗаписьПустойПортфель["Аналитика" + Строка(счетчик)], Строка(счетчик));
				КонецЕсли; 
			КонецЦикла; 
			
			СписокАналитикиПослеИзменения 		= Новый СписокЗначений;
			Для счетчик = 1 По 5 Цикл
				Если ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик)]) Тогда
					СписокАналитикиПослеИзменения.Добавить(Запись["Аналитика" + Строка(счетчик)], Строка(счетчик));
				КонецЕсли; 
			КонецЦикла; 
			
			Возврат ПроверкаПереопределениеАналитикиЛицевыхСчетов(СписокАналитикиДоИзменения, СписокАналитикиПослеИзменения, ТаблицаЛицевыхСчетов);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

Функция ПроверитьСоответствиеАналитикиНовойНастройке(СтруктураНастроек, Запись, ТаблицаЛицевыхСчетов) Экспорт
	
	СписокАналитикиДоИзменения 			= Новый СписокЗначений;
	Для счетчик = 1 По 5 Цикл
		Если ЗначениеЗаполнено(СтруктураНастроек["Аналитика" + Строка(счетчик)]) Тогда
			СписокАналитикиДоИзменения.Добавить(СтруктураНастроек["Аналитика" + Строка(счетчик)], Строка(счетчик));
		КонецЕсли; 
	КонецЦикла; 
	
	СписокАналитикиПослеИзменения 		= Новый СписокЗначений;
	Для счетчик = 1 По 5 Цикл
		Если ЗначениеЗаполнено(Запись["Аналитика" + Строка(счетчик)]) Тогда
			СписокАналитикиПослеИзменения.Добавить(Запись["Аналитика" + Строка(счетчик)], Строка(счетчик));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ПроверкаПереопределениеАналитикиЛицевыхСчетов(СписокАналитикиДоИзменения, СписокАналитикиПослеИзменения, ТаблицаЛицевыхСчетов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОБРАБОТЧИКИ_ОБНОВЛЕНИЯ

// Процедура заполняет предопределенные настройки аналитики для счетов, 
// которых еще нет в базе
Процедура ДозаполнитьНастройкиАналитики() Экспорт
	
	ЭлементыНастройки = Новый Соответствие;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕПС.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СчетаБезПравил
		|ИЗ
		|	ПланСчетов.ЕПС КАК ЕПС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС
		|		ПО (НастройкаАналитикиЛицевыхСчетовЕПС.Счет = ЕПС.Ссылка)
		|ГДЕ
		|	НЕ ЕПС.ЗапретитьИспользоватьВПроводках
		|	И ЕПС.ПометкаУдаления = ЛОЖЬ
		|	И НастройкаАналитикиЛицевыхСчетовЕПС.Счет ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СчетаБезПравил.Ссылка КАК Счет,
		|	Субконто1.ВидСубконто КАК Аналитика1,
		|	Субконто2.ВидСубконто КАК Аналитика2,
		|	Субконто3.ВидСубконто КАК Аналитика3
		|ИЗ
		|	ВТ_СчетаБезПравил КАК ВТ_СчетаБезПравил
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕПСВидыСубконто.Ссылка КАК Счет,
		|			ЕПСВидыСубконто.ВидСубконто КАК ВидСубконто
		|		ИЗ
		|			ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
		|		ГДЕ
		|			ЕПСВидыСубконто.НомерСтроки = 1
		|			И ЕПСВидыСубконто.Ссылка В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_СчетаБезПравил.Ссылка КАК Ссылка
		|					ИЗ
		|						ВТ_СчетаБезПравил КАК ВТ_СчетаБезПравил)) КАК Субконто1
		|		ПО ВТ_СчетаБезПравил.Ссылка = Субконто1.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕПСВидыСубконто.Ссылка КАК Счет,
		|			ЕПСВидыСубконто.ВидСубконто КАК ВидСубконто
		|		ИЗ
		|			ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
		|		ГДЕ
		|			ЕПСВидыСубконто.НомерСтроки = 2
		|			И ЕПСВидыСубконто.Ссылка В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_СчетаБезПравил.Ссылка КАК Ссылка
		|					ИЗ
		|						ВТ_СчетаБезПравил КАК ВТ_СчетаБезПравил)) КАК Субконто2
		|		ПО ВТ_СчетаБезПравил.Ссылка = Субконто2.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕПСВидыСубконто.Ссылка КАК Счет,
		|			ЕПСВидыСубконто.ВидСубконто КАК ВидСубконто
		|		ИЗ
		|			ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
		|		ГДЕ
		|			ЕПСВидыСубконто.НомерСтроки = 3
		|			И ЕПСВидыСубконто.Ссылка В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_СчетаБезПравил.Ссылка КАК Ссылка
		|					ИЗ
		|						ВТ_СчетаБезПравил КАК ВТ_СчетаБезПравил)) КАК Субконто3
		|		ПО ВТ_СчетаБезПравил.Ссылка = Субконто3.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		НовЗапись = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НовЗапись,Выборка);
		НовЗапись.Записать(Ложь);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиАналитики() Экспорт
	НаборЗаписей = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Портфель.Установить(Справочники.Портфели.ПустаяСсылка());
	НаборЗаписей.Записать();
	
	ДозаполнитьНастройкиАналитики();
КонецПроцедуры

Процедура ЗаполнитьСделкиМНО_В_НастройкиАналитики() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Портфель,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика1,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика2,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика3,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика4,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика5,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.МаскаЛицевогоСчета
		|ИЗ
		|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС
		|ГДЕ
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет В (ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20603), ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20604), ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20609), ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20610), ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20611), ЗНАЧЕНИЕ(ПланСчетов.ЕПС.ДенежныеСредства_20612))
		|	И НастройкаАналитикиЛицевыхСчетовЕПС.Портфель = ЗНАЧЕНИЕ(Справочник.Портфели.ПустаяСсылка)";
	
			
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Портфель.Установить(Выборка.Портфель);
		НаборЗаписей.Отбор.Счет.Установить(Выборка.Счет);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], Выборка);
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].Аналитика2) Тогда 
				НаборЗаписей[0].Аналитика2 = ПланыВидовХарактеристик.ВидыСубконтоЕПС.СделкиМНО;	
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
				
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет счета на счета второго порядка
//
Процедура ПеренестиНастройкиАналитикиНаСчетаВторогоПорядка() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет КАК СчетЕПС,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Портфель,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет.Код КАК КодСчетаЕПС,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика1,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика2,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика3,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика4,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика5,
		|	НастройкаАналитикиЛицевыхСчетовЕПС.МаскаЛицевогоСчета
		|ИЗ
		|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС";
	
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодСчета = СокрЛП(Выборка.КодСчетаЕПС);
		Если СтрДлина(КодСчета) > 5 Тогда
			Если Прав(КодСчета, 2) = "УД" Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейСтарый   = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
			НаборЗаписейСтарый.Отбор.Портфель.Установить(Выборка.Портфель);
			НаборЗаписейСтарый.Отбор.Счет.Установить(Выборка.СчетЕПС);
			НаборЗаписейСтарый.ОбменДанными.Загрузка = Истина;   
			НаборЗаписейСтарый.Записать();
			
			СчетВторогоПорядка  = ПланыСчетов.ЕПС.СчетВторогоПорядка(Выборка.СчетЕПС);
			НаборЗаписейНовый   = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
			НаборЗаписейНовый.Отбор.Портфель.Установить(Выборка.Портфель);
			НаборЗаписейНовый.Отбор.Счет.Установить(СчетВторогоПорядка);
			
			НоваяЗапись   		= НаборЗаписейНовый.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка); 
			НоваяЗапись.Счет  	= СчетВторогоПорядка;
			
			НаборЗаписейНовый.ОбменДанными.Загрузка = Истина;
			НаборЗаписейНовый.Записать();
			
		КонецЕсли;  
	КонецЦикла;	
	
КонецПроцедуры

// Процедура удаляет из настроек аналитики оборотные субконто
//
Процедура УдалитьИзНастроекОборотныеСубконто() Экспорт
	
	НомераСубконто = Новый Массив;
	НомераСубконто.Добавить(1);
	НомераСубконто.Добавить(2);
	НомераСубконто.Добавить(3);
	
	НомераАналитики = Новый Массив;
	НомераАналитики.Добавить(1);
	НомераАналитики.Добавить(2);
	НомераАналитики.Добавить(3);
	НомераАналитики.Добавить(4);
	НомераАналитики.Добавить(5);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет
		|ИЗ
		|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Счет = ВыборкаДетальныеЗаписи.Счет;
		
		СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
		
		Для Каждого НомерСубконто Из НомераСубконто Цикл
			
			Если СвойстваСчета[СтрШаблон("ВидСубконто%1ТолькоОбороты", НомерСубконто)] Тогда
				
				НаборНастроек = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.СоздатьНаборЗаписей();
				НаборНастроек.Отбор.Счет.Установить(Счет);
				НаборНастроек.Прочитать();
				
				Для Каждого Запись Из НаборНастроек Цикл
					
					Для Каждого НомерАналитики Из НомераАналитики Цикл
						
						ИмяРесурса = СтрШаблон("Аналитика%1", НомерАналитики);
						
						Если Запись[ИмяРесурса] = СвойстваСчета[СтрШаблон("ВидСубконто%1", НомерСубконто)] Тогда
							Запись[ИмяРесурса] = Неопределено;
						КонецЕсли; 
						
					КонецЦикла; 
					
				КонецЦикла; 
				
				Если НаборНастроек.Модифицированность() Тогда
					НаборНастроек.Записать();
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#КонецЕсли	