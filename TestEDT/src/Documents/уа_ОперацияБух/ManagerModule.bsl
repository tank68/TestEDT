 #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

 /////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура Печать
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

    // Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.

    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БухгалтерскаяСправка") Тогда
        // Формируем табличный документ и добавляем его в коллекцию печатных форм.

        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БухгалтерскаяСправка",
			"Бухгалтерская справка", ПечатьБухгалтерскойСправки(МассивОбъектов, ОбъектыПечати));

    КонецЕсли;

КонецПроцедуры

Функция ПечатьБухгалтерскойСправки(МассивОбъектов, ОбъектыПечати)
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ДокСсылка = МассивОбъектов[0].Ссылка;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Портфель,
	|	ОперацияБух.Номер,
	|	ОперацияБух.Дата,
	|	ОперацияБух.Содержание,
	|	ОперацияБух.Ответственный
	|ИЗ
	|	Документ.уа_ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", ДокСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Портфель,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	// ASP-28488
	// выбираем движения по ЕПС. Если они есть, то печатаем их в справке
	ЗапросЕПС = Новый Запрос();
	ЗапросЕПС.УстановитьПараметр("Регистратор", ДокСсылка);
	ЗапросЕПС.Текст =
	"ВЫБРАТЬ
	|	ЕПСДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ЕПСДвиженияССубконто.СчетДт,
	|	ЕПСДвиженияССубконто.СубконтоДт1,
	|	ЕПСДвиженияССубконто.СубконтоДт2,
	|	ЕПСДвиженияССубконто.СубконтоДт3,
	|	ЕПСДвиженияССубконто.СчетКт,
	|	ЕПСДвиженияССубконто.СубконтоКт1,
	|	ЕПСДвиженияССубконто.СубконтоКт2,
	|	ЕПСДвиженияССубконто.СубконтоКт3,
	|	ЕПСДвиженияССубконто.Портфель,
	|	ЕПСДвиженияССубконто.ВалютаДт,
	|	ЕПСДвиженияССубконто.ВалютаКт,
	|	ЕПСДвиженияССубконто.Сумма,
	|	ЕПСДвиженияССубконто.ВалютнаяСуммаДт,
	|	ЕПСДвиженияССубконто.ВалютнаяСуммаКт,
	|	ЕПСДвиженияССубконто.КоличествоДт,
	|	ЕПСДвиженияССубконто.КоличествоКт,
	|	ЕПСДвиженияССубконто.Содержание,
	|	ЕПСДвиженияССубконто.ЛицевойСчетДт,
	|	ЕПСДвиженияССубконто.ЛицевойСчетКт
	|ИЗ
	|	РегистрБухгалтерии.ЕПС.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ЕПСДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвиженийЕПС = ЗапросЕПС.Выполнить().Выбрать();
	
	// ASP-28488  (окончание добавленного кода) <---------------
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	////ASP-28488 --------- >
	ЗаголовокЕПС  = Макет.ПолучитьОбласть("ЗаголовокЕПС");
	////ASP-28488 < --------- 
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";

	// Выведем шапку документа.
	ШапкаДокумента.Параметры.Портфель      = Строка(Док.Портфель);
	ШапкаДокумента.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.Номер);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	
	Если ВыборкаДвижений.Количество()> 0 Тогда
		Пока ВыборкаДвижений.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
			
			АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
			            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
	                    + Строка(ВыборкаДвижений.СубконтоДт3);
						
			АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
			            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
	                    + Строка(ВыборкаДвижений.СубконтоКт3);
						
			СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
			СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
										 
			// Проверим, помещается ли строка с подвалом.
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалДокумента);
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы.
				ТабДокумент.Вывести(ПодвалТаблицы);
					
				// Выведем разрыв страницы.
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

				// Выведем заголовок таблицы.
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
///// ASP-28488 (начало добавленного кода)  ------------------------>	
Если ВыборкаДвиженийЕПС.Количество()> 0 Тогда
	
	// Выведем заголовок таблицы.
	Если  ВыборкаДвижений.Количество()> 0 Тогда
		ТабДокумент.Вывести(ЗаголовокЕПС);
		ТабДокумент.Вывести(ЗаголовокТаблицы);
	КонецЕсли;
	
	// Выведем строки документа.
		Пока ВыборкаДвиженийЕПС.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвиженийЕПС);
			
			АналитикаДт = Строка(ВыборкаДвиженийЕПС.СубконтоДт1) + Символы.ПС
			            + Строка(ВыборкаДвиженийЕПС.СубконтоДт2) + Символы.ПС
	                    + Строка(ВыборкаДвиженийЕПС.СубконтоДт3);
						
			АналитикаКт = Строка(ВыборкаДвиженийЕПС.СубконтоКт1) + Символы.ПС
			            + Строка(ВыборкаДвиженийЕПС.СубконтоКт2) + Символы.ПС
	                    + Строка(ВыборкаДвиженийЕПС.СубконтоКт3);
						
			СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
			СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
			СтрокаТаблицы.Параметры.ПодразделениеДт = ВыборкаДвиженийЕПС.ЛицевойСчетДт;
			СтрокаТаблицы.Параметры.ПодразделениеКт = ВыборкаДвиженийЕПС.ЛицевойСчетКт;
										 
			// Проверим, помещается ли строка с подвалом.
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалДокумента);
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы.
				ТабДокумент.Вывести(ПодвалТаблицы);
					
				// Выведем разрыв страницы.
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

				// Выведем заголовок таблицы.
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
	КонецЕсли;
///// ASP-28488 (окончание добавленного кода) < ------------------------
	
	
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = Строка(Док.Ответственный);
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;	
	
	 КонецФункции	
	 
 #КонецЕсли
