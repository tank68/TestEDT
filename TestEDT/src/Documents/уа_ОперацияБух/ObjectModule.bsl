#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	
	Если НЕ ПометкаУдаления 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Возврат;
	КонецЕсли;
	
	Активность = НЕ ПометкаУдаления;
	
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРегистрНакопления(ИмяРегистра)
	
	Если ТаблицаРегистровНакопления.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровНакопления.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ДобавитьРегистрСведений(ИмяРегистра)
	
	Если ТаблицаРегистровСведений.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровСведений.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура устанавливает/снимает признак активности движений документа
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл   
		Движение.Прочитать();
		Для Каждого Строка Из Движение Цикл
			Строка.Активность = ФлагАктивности;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
Процедура ПересчитатьСуммуОперации() Экспорт
	
	//СуммаОперации = Движения.Хозрасчетный.Итог("Сумма");
	СуммаОперацииЕПС = Движения.ЕПС.Итог("Сумма");
	
	//Регистр = Движения.Найти("Хозрасчетный");	
	//Если Регистр <> Неопределено Тогда
	//	Регистр.Прочитать();		
	//	СуммаОперации = Регистр.Итог("Сумма");
	//КонецЕсли;	
	//
	//Регистр = Движения.Найти("ЕПС");	
	//Если Регистр <> Неопределено Тогда
	//	Регистр.Прочитать();		
	//	СуммаОперацииЕПС = Регистр.Итог("Сумма");
	//КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка <> Неопределено И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		//запись помеченного на удаление документа с активными записями
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
	//Автозаполнение реквизитов Период и Портфель
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьПортфель = ПустаяТаблица.Колонки.Найти("Портфель") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьПортфель ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьПортфель Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Портфель, "Портфель");
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		
		// Актуализируем списки регистров
		ИмяРегистра = НаборЗаписей.Метаданные().Имя;
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрНакопления(ИмяРегистра);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрСведений(ИмяРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
	КэшПоискаЛицевыхСчетов = Новый Соответствие;
	Для Каждого Проводка Из Движения.ЕПС Цикл
		УчетЕПС.ЗаполнитьВалютыВПроводке(Проводка);
		Если ЛицевойСчетПодбиратьАвтоматически Тогда 
			ЗаполнитьЛицевыеСчетаВПроводке(Проводка, КэшПоискаЛицевыхСчетов);	
		КонецЕсли;
	КонецЦикла;
	
	СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	
	ПересчитатьСуммуОперации();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриКопировании(ОбъектКопирования)
	
	//ДвиженияБУ = РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияБУ.Следующий() Цикл
	//	Проводка = Движения.Хозрасчетный.Добавить();
	//	
	//	Проводка.СчетДт          = ДвиженияБУ.СчетДт;
	//	Проводка.СчетКт          = ДвиженияБУ.СчетКт;
	//	
	//	Для каждого Субконто Из ДвиженияБУ.СубконтоДт Цикл
	//		Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
	//	КонецЦикла;
	//	
	//	Для каждого Субконто Из ДвиженияБУ.СубконтоКт Цикл
	//		Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
	//	КонецЦикла;
	//	Проводка.ВалютаДт       		 = ДвиженияБУ.ВалютаДт;
	//	Проводка.ВалютаКт        		= ДвиженияБУ.ВалютаКт;
	//	Проводка.ВалютнаяСуммаДт 		= ДвиженияБУ.ВалютнаяСуммаДт;
	//	Проводка.ВалютнаяСуммаКт 		= ДвиженияБУ.ВалютнаяСуммаКт;
	//	Проводка.КоличествоДт    		= ДвиженияБУ.КоличествоДт;
	//	Проводка.КоличествоКт    		= ДвиженияБУ.КоличествоКт;
	//	Проводка.Портфель     	 		= ДвиженияБУ.Портфель;
	//	Проводка.Содержание      		= ДвиженияБУ.Содержание;
	//	Проводка.Сумма           		= ДвиженияБУ.Сумма;
	//	Проводка.СуммаНУДт           	= ДвиженияБУ.СуммаНУДт;
	//	Проводка.СуммаНУКт           	= ДвиженияБУ.СуммаНУКт;
	//	// ...
	//КонецЦикла;
	
	//ДвиженияУУ_КД = РегистрыНакопления.НачисленныйКупонныйДоходУправленческий.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияУУ_КД.Следующий() Цикл
	//	
	//	Проводка = Движения.НачисленныйКупонныйДоходУправленческий.Добавить();
	//    
	//    ЗаполнитьЗначенияСвойств(Проводка, ДвиженияУУ_КД);
	//	
	//КонецЦикла;
	//
	//ДвиженияУУ_ПроцентыПоБС = РегистрыНакопления.НачисленныеПроцентыПоБанковскимСчетамУправленческий.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияУУ_ПроцентыПоБС.Следующий() Цикл
	//	
	//	Проводка = Движения.НачисленныеПроцентыПоБанковскимСчетамУправленческий.Добавить();
	//    
	//    ЗаполнитьЗначенияСвойств(Проводка, ДвиженияУУ_ПроцентыПоБС);
	//	
	//КонецЦикла;
	//
	//ДвиженияУУ_СтоимостьАктивов = РегистрыНакопления.СтоимостьАктивовУправленческий.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияУУ_СтоимостьАктивов.Следующий() Цикл
	//	
	//	Проводка = Движения.СтоимостьАктивовУправленческий.Добавить();
	//    
	//    ЗаполнитьЗначенияСвойств(Проводка, ДвиженияУУ_СтоимостьАктивов);
	//	
	//КонецЦикла;
	//
	//ДвиженияУУ_ДенежныеСредства = РегистрыНакопления.ДенежныеСредстваУправленческий.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияУУ_ДенежныеСредства.Следующий() Цикл
	//	
	//	Проводка = Движения.ДенежныеСредстваУправленческий.Добавить();
	//    
	//    ЗаполнитьЗначенияСвойств(Проводка, ДвиженияУУ_ДенежныеСредства);
	//	
	//КонецЦикла;
	//
	//ДвиженияУУ_НДФЛСведенияОДоходах = РегистрыНакопления.НДФЛСведенияОДоходах.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	//Пока ДвиженияУУ_НДФЛСведенияОДоходах.Следующий() Цикл
	//	
	//	Проводка = Движения.НДФЛСведенияОДоходах.Добавить();
	//    
	//    ЗаполнитьЗначенияСвойств(Проводка, ДвиженияУУ_НДФЛСведенияОДоходах);
	//	
	//КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ФУНКЦИИ

Процедура ЗаполнитьЛицевыеСчетаВПроводке(Проводка, КэшПоискаЛицевыхСчетов)

	МассивДтКт = Новый Массив;
	МассивДтКт.Добавить("Дт");
	МассивДтКт.Добавить("Кт");
	
	Для Каждого ДтКт из МассивДтКт Цикл
		УчетЕПС.УстановитьЛицевойСчетВПроводку(Проводка, Ссылка, ДтКт, КэшПоискаЛицевыхСчетов);
	КонецЦикла;

КонецПроцедуры

#КонецЕсли