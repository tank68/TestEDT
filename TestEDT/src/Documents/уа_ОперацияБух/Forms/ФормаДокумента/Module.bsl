

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	//// Обработчик подсистемы "Дополнительные отчеты и обработки"
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);	
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Портфель") = Истина Тогда
    	Объект.Портфель = Параметры.ЗначенияЗаполнения.Портфель; 
	КонецЕсли;
	
	//Объект.ВестиПуловойУчет = Константы.ВестиПуловойУчет.Получить();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента("НезаписанныйДокумент");
		ПодготовитьФормуНаСервере(Параметры.ЗначениеКопирования);
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.Автор = объект.Ответственный;
	КонецЕсли;
	
	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.ЕПС.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	ОбщегоНазначенияДУ.ДобавитьДекорациюАвтор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказыватьДанныеНУ = Истина;
	//Элементы.Хозрасчетный.КоманднаяПанель.ПодчиненныеЭлементы.ТабличноеПолеДвиженияБУКнопкаПереключитьВидимостьНУ.Пометка = ПоказыватьДанныеНУ;	
	//ВестиУчетПоЕдиномуПлануСчетов = ОбщегоНазначенияДУПовтИсп.ПолучитьЗначениеКонстанты("ВестиУчетЕПС") И ПолучитьФункциональнуюОпциюФормы("ВестиУчетЕПС_ПоПортфелю");
	ВестиУчетПоЕдиномуПлануСчетов = Истина; 
	УстановитьВидимость(ЭтаФорма);
	
	ПересчитатьСуммуОперации(ЭтотОбъект);
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя + "НаборЗаписей");
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТекущийОбъект.Движения[СтрокаРегистра.Имя].Загрузить(ТаблицаДвижений);
			
			Если ТаблицаДвижений.Количество() > 0 Тогда
				ТекущийОбъект.Движения[СтрокаРегистра.Имя].Записывать = Истина;
			КонецЕсли;
			
			СтрокаРегистра.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьДвиженияДокумента(ТекущийОбъект.Ссылка, "ЕПС");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПортфельПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
	//ВестиУчетПоЕдиномуПлануСчетов = ОбщегоНазначенияДУПовтИсп.ПолучитьЗначениеКонстанты("ВестиУчетЕПС") И ПолучитьФункциональнуюОпциюФормы("ВестиУчетЕПС_ПоПортфелю");
	ВестиУчетПоЕдиномуПлануСчетов = Истина;
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевойСчетПодбиратьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимость(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИсправительнаяПроводкаПриИзменении(Элемент)
	УстановитьВидимость(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#Область БУ

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Сначала выполняем общие действия для всех регистров
	Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

#Область ЕПС

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПССубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПССубконтоДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПССубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПССубконтоКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЕПСНаборЗаписейСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПСНаборЗаписейСубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЕПСНаборЗаписейСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПСНаборЗаписейСубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПСЛицевойСчетДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ЛицевойСчетПодбиратьАвтоматически Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьЛицевойСчет("ЛицевойСчетДт");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияЕПСЛицевойСчетКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ЛицевойСчетПодбиратьАвтоматически Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьЛицевойСчет("ЛицевойСчетКт");
	КонецЕсли;
	
КонецПроцедуры

//ASP-29384
//// NFO-240
&НаКлиенте
Процедура ЕПСНаборЗаписейСуммаПриИзменении(Элемент)
	
	//РасчетСуммыНУЕПС();
	РасчетСуммыЕПС();
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" элемента ТабличноеПолеДвиженияЕПС
Процедура ЕПСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕПСПослеУдаления(Элемент)
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
КонецПроцедуры

//ASP-29384
&НаКлиенте
Процедура ЕПСНаборЗаписейВалютаДтПриИзменении(Элемент)
	РасчетСуммыЕПС(Истина);
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
КонецПроцедуры
//ASP-29384
&НаКлиенте
Процедура ЕПСНаборЗаписейВалютнаяСуммаДтПриИзменении(Элемент)
	РасчетСуммыЕПС(Истина);
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
КонецПроцедуры
//ASP-29384
&НаКлиенте
Процедура ЕПСНаборЗаписейВалютнаяСуммаКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЕПС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;
	
	РасчетСуммыЕПС(Ложь);
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);

КонецПроцедуры
//ASP-29384
&НаКлиенте
Процедура ЕПСНаборЗаписейВалютаКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЕПС.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;

	РасчетСуммыЕПС(Ложь);
	ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);
КонецПроцедуры

//ASP-29384
&НаКлиенте
Процедура ЕПСНаборЗаписейСчетДтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЕПС.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКт) Тогда
		СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(ТекущиеДанные.СчетКт);
		Если СвойстваСчета.Валютный И ЗначениеЗаполнено(ТекущиеДанные.ВалютаКт) Тогда
			РасчетСуммыЕПС(Ложь);
			ПересчитатьСуммуОперацииЕПС(ЭтотОбъект);			
		КонецЕсли;
	КонецЕсли;

	

КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Портфель, СчетУчета, ОстаткиОбороты",
		Форма.Объект.Портфель, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.уа_ФинансовыеИнструменты") Тогда
			СписокПараметров.Вставить("ФинансовыеИнструменты", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияДУКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

//ЕПС
&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент)
	
	ТекущаяСтрока = Элементы.ЕПС.ТекущиеДанные;
	ДтКт = Лев(СтрЗаменить(Элемент.Имя, "ЕПСНаборЗаписейСубконто", ""), 2);
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Объект.Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Портфель",     ТекущаяСтрока.Портфель);
	Для Ном = 1 По 3 Цикл		
		Если ТипЗнч(ТекущаяСтрока["Субконто" + ДтКт + Ном]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущаяСтрока["Субконто" + ДтКт + Ном]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока["Субконто" + ДтКт + Ном]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока["Субконто" + ДтКт + Ном]);
		КонецЕсли;
	КонецЦикла;	
	СписокПараметров.Вставить("СторонаПроводки", ДтКт);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Объект.Ссылка = Неопределено);
	
	ИмяСубконто = СтрЗаменить(Элемент.Имя, "ЕПСНаборЗаписей", "");
	СписокПараметров.Вставить("ЗначениеСубконто", ТекущаяСтрока[ИмяСубконто]);
	
	УстановитьОтборыСубконтоЕПС(Элемент, СтандартнаяОбработка, Объект.Портфель, СписокПараметров);

КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отборы в формах выбора субконто, такие как
// Портфель, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура УстановитьОтборыСубконтоЕПС(Элемент, СтандартнаяОбработка, Портфель, СписокПараметров, ОграничениеТипаЭлемента = Неопределено)
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(СписокПараметров.ЗначениеСубконто);
		Если ТипЭлемента = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(СписокПараметров.ЗначениеСубконто);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда


	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", , Элемент);
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					СписокОтбор = ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор;
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтбор, "Владелец",
						СписокПараметров.Контрагент, ВидСравненияКомпоновкиДанных.Равно, "Владелец", Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

&НаКлиенте
Процедура ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущаяСтрока = Элементы.ЕПС.ТекущиеДанные;
		Договор       = Неопределено;
		
		Для Ном = 1 По 3 Цикл		
			Если ТипЗнч(ТекущаяСтрока["СубконтоДт" + Ном]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
				Договор = ТекущаяСтрока["СубконтоДт" + Ном];
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		
		Если ЗначениеЗаполнено(Договор) Тогда
			Владелец = ОбщегоНазначенияДУВызовСервера.ЗначениеРеквизитаОбъекта(Договор, "Владелец");
			Если НЕ (Владелец = ВыбранноеЗначение) Тогда
				ТекущаяСтрока["СубконтоДт" + Ном] = ПолучитьПустойДоговор();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустойДоговор() 
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереключитьВидимостьНУ(Команда)
	
	ПоказыватьДанныеНУ = НЕ ПоказыватьДанныеНУ;
	Элементы.Хозрасчетный.КоманднаяПанель.ПодчиненныеЭлементы.ТабличноеПолеДвиженияБУКнопкаПереключитьВидимостьНУ.Пометка = ПоказыватьДанныеНУ;
	УстановитьВидимость(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уа_ОперацияБух.Форма.ФормаНастройки", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьДвижений(Команда)

	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , 
			НСтр("ru = 'Операция помечена на удаление, поэтому переключить активность нельзя.
        	|Снимите пометку удаления.'"));
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьДвиженийНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Пересчитывает сумму операции РСБУ при изменении сумм в проводках.
//
Процедура ПересчитатьСуммуОперации(Форма)

	//Объект.СуммаОперации = ХозрасчетныйНаборЗаписей.Итог("Сумма");
	
КонецПроцедуры // ПересчитатьСуммуОперации()

&НаКлиенте
// Пересчитывает сумму операции ЕПС при изменении сумм в проводках.
//
Процедура ПересчитатьСуммуОперацииЕПС(Форма)

	Объект.СуммаОперацииЕПС = ЕПСНаборЗаписей.Итог("Сумма");
	
КонецПроцедуры // ПересчитатьСуммуОперации()

&НаКлиенте
Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,ВалютнаяСуммаДт,
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,ВалютнаяСуммаКт,
		|Сумма,Содержание,СуммаНУДт,СуммаНУКт");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Объект.Портфель, Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Объект.Портфель, Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
	Если ОбщегоНазначенияДУПовтИсп.ВидыУчетаПоПортфелю(Объект.Портфель).НУ Тогда
		
		ВедетсяНалоговыйУчетДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).НалоговыйУчет;
		ВедетсяНалоговыйУчетКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).НалоговыйУчет;
		
		Если ВедетсяНалоговыйУчетДт Тогда
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;
		
		Если ВедетсяНалоговыйУчетКт Тогда
			Проводка.СуммаНУКт = Проводка.Сумма;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//ASP-29384
&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервереЕПС(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Объект.Портфель, Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Объект.Портфель, Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
	//Если ОбщегоНазначенияДУПовтИсп.ВидыУчетаПоПортфелю(Объект.Портфель).НУ_ЕПС Тогда
	//	
	//	ВедетсяНалоговыйУчетДт = ЗначениеЗаполнено(Проводка.СчетДт) И УчетЕПСПовтИсп.СвойстваСчета(Проводка.СчетДт).НалоговыйУчет;
	//	ВедетсяНалоговыйУчетКт = ЗначениеЗаполнено(Проводка.СчетКт) И УчетЕПСПовтИсп.СвойстваСчета(Проводка.СчетКт).НалоговыйУчет;
	//	
	//	Если ВедетсяНалоговыйУчетДт Тогда
	//		Проводка.СуммаНУДт = Проводка.Сумма;
	//	КонецЕсли;
	//	
	//	Если ВедетсяНалоговыйУчетКт Тогда
	//		Проводка.СуммаНУКт = Проводка.Сумма;
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Портфель) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.Хозрасчетный.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Хозрасчетный.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры  

//ASP-29384
&НаКлиенте
Процедура РасчетСуммыЕПС(ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Портфель) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.ЕПС.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервереЕПС(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.ЕПС.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(Портфель, ВалютнаяСумма, Валюта, Дата)

	ВалютаРегл = ОбщегоНазначенияДУ.ВалютаРеглУчета(Портфель);
	Запись = МодульВалютногоУчета.ПолучитьКурсВалютыПоПортфелю(Портфель, Валюта, Дата);
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

&НаКлиенте
Процедура ОткрытьЛицевойСчет(ИмяРеквизита)
	
	ТекущаяСтрока = Элементы.ЕПС.ТекущиеДанные;
	
	ЛицевойСчет = ТекущаяСтрока[ИмяРеквизита];
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ЛицевойСчет);
	
	ОткрытьФорму("Справочник.уа_ЛицевыеСчетаЕПС.Форма.ФормаЭлемента", ПараметрыОткрытия,, ЛицевойСчет,,);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	//Элементы.ХозрасчетныйНаборЗаписейСуммаНУДт.Видимость = Форма.ПоказыватьДанныеНУ;
	//Элементы.ХозрасчетныйНаборЗаписейСуммаНУКт.Видимость = Форма.ПоказыватьДанныеНУ;
	
	//Элементы.ГруппаЕПС.Видимость = Форма.ВестиУчетПоЕдиномуПлануСчетов;
	Элементы.ЕПСНаборЗаписейЛицевойСчетДт.БыстрыйВыбор = Объект.ЛицевойСчетПодбиратьАвтоматически; 
	Элементы.ЕПСНаборЗаписейЛицевойСчетКт.БыстрыйВыбор = Объект.ЛицевойСчетПодбиратьАвтоматически; 
	Элементы.ЕПСНаборЗаписейЛицевойСчетДт.Доступность = Не Объект.ЛицевойСчетПодбиратьАвтоматически; 
	Элементы.ЕПСНаборЗаписейЛицевойСчетДт.Доступность = Не Объект.ЛицевойСчетПодбиратьАвтоматически;
	Элементы.ЕПСНаборЗаписейСуммаНУДт.Видимость = Ложь;
	Элементы.ЕПСНаборЗаписейСуммаНУКт.Видимость = Ложь;
	Элементы.ОснованиеИсправительнойПроводки.Видимость = Объект.ИсправительнаяПроводка;
	Элементы.СуммаОперацииЕПС.Видимость = Форма.ВестиУчетПоЕдиномуПлануСчетов;
	
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Объект.Портфель);
	ЭтотОбъект.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры // УстановитьФункциональныеОпцииФормы()

#Область настройкаСоставаРегистров

&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда 
			СтрокаРегистра.ЕстьДвижения = ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0;
		КонецЕсли;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПереключитьАктивностьДвиженийНаСервере()
	
	НоваяАктивность = НЕ АктивностьДвижений;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
		
		НаборЗаписей = РеквизитФормыВЗначение(ПутьКДаннымТаблицы);
		НаборЗаписей.УстановитьАктивность(НоваяАктивность);
		ЗначениеВРеквизитФормы(НаборЗаписей, ПутьКДаннымТаблицы);
		
		ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(НоваяАктивность, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	АктивностьДвижений = НоваяАктивность;
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		РезультатПоиска = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРегистра = РезультатПоиска[0];
		
		СтрокаРегистра.Отображение = ИзмененныйРегистр.Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере(ДокументДвижений)

	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийПортфель = Объект.Портфель;

	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
			ДокументДвижений, ДокументДвижений.Метаданные().Движения);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РегистрыСДвижениями = Новый Массив;
	КонецЕсли;
	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Или СтрокаРегистра.Имя = "ЕПС"  Тогда
			СтрокаРегистра.Отображение = Истина;
		Иначе
			Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
			ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
			СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
				ИЛИ ДобавленПользователем;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный" Или СтрокаРегистра.Имя = "ЕПС" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПрочитатьРегистрВДокумент(ДокументДвижений, СтрокаРегистра)
	
	ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
	НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
	НаборЗаписей.Прочитать();
	ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
	Если ДокументДвижений = Объект.Ссылка Тогда
		СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
		Если СтрокаРегистра.Записывать Тогда
			АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений, ИмяЧитаемогоРегистра = Неопределено)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если ИмяЧитаемогоРегистра <> Неопределено Тогда
			Если ИмяЧитаемогоРегистра <> СтрокаРегистра.Имя Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.Отображение Тогда
			ПрочитатьРегистрВДокумент(ДокументДвижений, СтрокаРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(АктивностьДвижений, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		//Если СтрокаРегистра.Имя = "Хозрасчетный" Или СтрокаРегистра.Имя = "ЕПС" Тогда
		//	Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
		//		БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
		//	Элементы.ГруппаЕПС.Картинка = ?(АктивностьДвижений, 
		//		БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
		//	Продолжить;
		//КонецЕсли;
		
		Если СтрокаРегистра.Имя = "ЕПС" Тогда
			Элементы.ГруппаЕПС.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;

			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Портфель") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Портфель");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли; 
				
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	//Если отображается не более одного регистра - прячем заголовок у панели регистров
	Если Регистры.НайтиСтроки(Новый Структура("Отображение", Истина)).Количество() <= 1 Тогда
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента(СтрокаУказаниеСтатуса = Неопределено)
	
	Если СтрокаУказаниеСтатуса = "НезаписанныйДокумент" Тогда
		СостояниеДокумента = 0;	
	ИначеЕсли Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 2;
	ИначеЕсли НЕ АктивностьДвижений Тогда
		СостояниеДокумента = 11;
	Иначе
		СостояниеДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Портфель", "Объект.Портфель"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

#КонецОбласти

#Область ЗаполнениеДвижения

&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Портфель")
			И ЗначениеЗаполнено(Объект.Портфель) Тогда
		Элемент.ТекущиеДанные.Портфель = Объект.Портфель;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти












