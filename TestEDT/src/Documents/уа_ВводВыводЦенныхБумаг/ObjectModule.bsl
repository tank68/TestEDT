#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
Процедура УстановитьПартииДляАктивов()
	
	Если ЭтоНовый() Тогда
		УстановитьСсылкуНового(Документы.уа_ВводВыводЦенныхБумаг.ПолучитьСсылку(Новый УникальныйИдентификатор));
	КонецЕсли;
	
	СсылкаНаДокумент = ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Документ.уа_Партия 
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И ДокументОснование = &ДокументОснование
		|	И Портфель = &Портфель
		|	И НомерВходящегоДокумента = &НомерВходящегоДокумента
		|	И ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		|	И ЦеннаяБумага = &ЦеннаяБумага";
		
	Запрос.УстановитьПараметр("Портфель", Портфель);
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаДокумент);
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
		
	Для Каждого СтрокаАктива Из Активы Цикл		
		Если Не ЗначениеЗаполнено(СтрокаАктива.Партия) И (ЗначениеЗаполнено(СтрокаАктива.ДатаПартии) Или ЗначениеЗаполнено(СтрокаАктива.НомерПартии)) Тогда
			Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтрокаАктива.ДатаПартии);
			Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтрокаАктива.НомерПартии);
			Запрос.УстановитьПараметр("ЦеннаяБумага", СтрокаАктива.ЦеннаяБумага);
			
			ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();   			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда  				
				СтрокаАктива.Партия = ВыборкаДетальныеЗаписи.Ссылка;				
			КонецЕсли;                     			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаАктива.Партия) Тогда
			ДатаПартии = СтрокаАктива.ДатаПартии + Активы.Индекс(СтрокаАктива);
						
			Документ						= Документы.уа_Партия.СоздатьДокумент();
			Документ.Дата 					= ДатаПартии;
			Документ.ДокументОснование 		= СсылкаНаДокумент;
			Документ.Портфель 				= Портфель;
			Документ.Комментарий 			= "Поступление ц/б  """ + СтрокаАктива.ЦеннаяБумага.Наименование+"""" ;
			Документ.ДатаВходящегоДокумента = СтрокаАктива.ДатаПартии;
			Документ.НомерВходящегоДокумента= СтрокаАктива.НомерПартии;
			Документ.ЦеннаяБумага			= СтрокаАктива.ЦеннаяБумага;
			Документ.ЦенаПриобретения		= СтрокаАктива.ЦенаПриобретения;	
			Документ.Автор					= Автор;
			Документ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			Документ.Записать();
			
			СтрокаАктива.Партия = Документ.Ссылка;
		КонецЕсли;   		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьДанныеАктивов() 
	
	Для Каждого СтрокаАктивов Из Активы Цикл     		
		Если Не ЗначениеЗаполнено(СтрокаАктивов.СчетУчетаЕПС) Тогда
			Если Не ЗначениеЗаполнено(СтрокаАктивов.ЦеннаяБумага) Или НЕ ЗначениеЗаполнено(ОценочнаяКатегория) Тогда 
				Продолжить;	
			КонецЕсли;			
			СчетаАктива = уа_БухгалтерскийУчетПовтИсп.СчетаАктива(НачалоДня(Дата), СтрокаАктивов.ЦеннаяБумага, ОценочнаяКатегория);
			СтрокаАктивов.СчетУчетаЕПС = СчетаАктива.СчетУчета;			
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда Возврат; КонецЕсли;
	
	Если ВидОперации = Перечисления.уа_ВидыОперацийВводВыводАктивовИзДУ.ВводАктивовВДУ И Не ПометкаУдаления Тогда
		УстановитьПартииДляАктивов();
		ДозаполнитьДанныеАктивов();
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	СформироватьЗаписиВРегистрах(Отказ);
	СформироватьДвиженияВОперативномУчете(Отказ);
	СформироватьДвиженияВБухгалтерскомУчете(Отказ);
КонецПроцедуры
#КонецОбласти 

Функция ПодготовитьТаблицуДанныхВводаЦБ(Ссылка, СальдироватьПоПартиям)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЦеннаяБумага, 
	|	Валюта, 
	|	ВЫБОР КОГДА &СальдироватьПоПартиям ТОГДА NULL ИНАЧЕ Партия КОНЕЦ КАК Партия,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(СуммаВал) КАК СуммаВал,
	|	СУММА(Сумма) КАК Сумма, 
	|	СУММА(ВЫБОР КОГДА СуммаАмортизацииВал >= 0 ТОГДА СуммаАмортизацииВал ИНАЧЕ 0 КОНЕЦ ) КАК СуммаПремииВал,
	|	СУММА(ВЫБОР КОГДА СуммаАмортизации >= 0 ТОГДА СуммаАмортизации ИНАЧЕ 0 КОНЕЦ) КАК СуммаПремии,
	|	СУММА(ВЫБОР КОГДА СуммаАмортизацииВал < 0 ТОГДА -СуммаАмортизацииВал ИНАЧЕ 0 КОНЕЦ ) КАК СуммаДисконтаВал,
	|	СУММА(ВЫБОР КОГДА СуммаАмортизации < 0 ТОГДА -СуммаАмортизации ИНАЧЕ 0 КОНЕЦ) КАК СуммаДисконта,
	|   СУММА(НКДВал) КАК НКДВал, 
	|	СУММА(НКД) КАК НКД,
	|	СУММА(УКДВал) КАК УКДВал, 
	|	СУММА(УКД) КАК УКД,
	|	СУММА(ВЫБОР КОГДА СуммаПереоценкиВал >= 0 ТОГДА СуммаПереоценкиВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойПереоценкиВал,
	|	СУММА(ВЫБОР КОГДА СуммаПереоценки >= 0 ТОГДА СуммаПереоценки ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойПереоценки,
	|	СУММА(ВЫБОР КОГДА СуммаПереоценкиВал < 0 ТОГДА -СуммаПереоценкиВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойПереоценкиВал,
	|	СУММА(ВЫБОР КОГДА СуммаПереоценки < 0 ТОГДА -СуммаПереоценки ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойПереоценки,
	|	СУММА(ВЫБОР КОГДА СуммаИндексацииНоминалаВал >= 0 ТОГДА СуммаИндексацииНоминалаВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойИндексацииНоминалаВал,
	|	СУММА(ВЫБОР КОГДА СуммаИндексацииНоминала >= 0 ТОГДА СуммаИндексацииНоминала ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойИндексацииНоминала,
	|	СУММА(ВЫБОР КОГДА СуммаИндексацииНоминалаВал < 0 ТОГДА -СуммаИндексацииНоминалаВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойИндексацииНоминалаВал,
	|	СУММА(ВЫБОР КОГДА СуммаИндексацииНоминала < 0 ТОГДА -СуммаИндексацииНоминала ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойИндексацииНоминала,
	|	СУММА(ВЫБОР КОГДА СуммаКорректировкиВал >= 0 ТОГДА СуммаКорректировкиВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойКорректировкиВал,
	|	СУММА(ВЫБОР КОГДА СуммаКорректировки >= 0 ТОГДА СуммаКорректировки ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоложительнойКорректировки,
	|	СУММА(ВЫБОР КОГДА СуммаКорректировкиВал < 0 ТОГДА -СуммаКорректировкиВал ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойКорректировкиВал,
	|	СУММА(ВЫБОР КОГДА СуммаКорректировки < 0 ТОГДА -СуммаКорректировки ИНАЧЕ 0 КОНЕЦ) КАК СуммаОтрицательнойКорректировки,
	|	СУММА(СуммаКупонаКПолучениюВал) КАК СуммаКупонаКПолучениюВал, 
	|	СУММА(СуммаКупонаКПолучению) КАК СуммаКупонаКПолучению,
	|   СУММА(СуммаНоминалаКПолучениюВал) КАК СуммаНоминалаКПолучениюВал, 
	|	СУММА(СуммаНоминалаКПолучению) КАК СуммаНоминалаКПолучению,
	|	СУММА(СуммаРезерваВал) КАК СуммаРезерваВал, 
	|	СУММА(СуммаРезерва) КАК СуммаРезерва,
	|	СУММА(СуммаНУ) КАК СуммаНУ
	|ИЗ Документ.уа_ВводВыводЦенныхБумаг.Активы
	|ГДЕ Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО 
	|	ЦеннаяБумага, 
	|	Валюта, 
	|	ВЫБОР КОГДА &СальдироватьПоПартиям ТОГДА NULL ИНАЧЕ Партия КОНЕЦ
	|УПОРЯДОЧИТЬ ПО ЦеннаяБумага, Партия АВТОУПОРЯДОЧИВАНИЕ;";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СальдироватьПоПартиям", СальдироватьПоПартиям);

	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Процедура СформироватьДвиженияВОперативномУчете(Отказ)
	
	Если Отказ тогда Возврат; КонецЕсли;
	
	тзАктивы = ПодготовитьТаблицуДанныхВводаЦБ(Ссылка, Ложь);
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Строка Из тзАктивы Цикл
		
		Движение = Движения.уа_РасчетыПоЦеннымБумагам.ДобавитьПриход();
		
		Движение.Период 				= Дата;
		Движение.Портфель 				= Портфель;
		Движение.ЦеннаяБумага			= Строка.ЦеннаяБумага;
		Движение.Валюта					= Строка.Валюта;
		Движение.Партия					= Строка.Партия;
		Движение.ОценочнаяКатегория		= ОценочнаяКатегория;
		
		Движение.Количество 							= Строка.Количество;
		Движение.Сумма									= Строка.СуммаВал;
		Движение.СуммаАмортизации						= Строка.СуммаПремииВал - Строка.СуммаДисконтаВал;
		Движение.СуммаПоложительнойПереоценки			= Строка.СуммаПоложительнойПереоценкиВал;
		Движение.СуммаОтрицательнойПереоценки			= Строка.СуммаОтрицательнойПереоценкиВал;
		Движение.СуммаПоложительнойИндексацииНоминала 	= Строка.СуммаПоложительнойИндексацииНоминалаВал;
		Движение.СуммаОтрицательнойИндексацииНоминала	= Строка.СуммаОтрицательнойИндексацииНоминалаВал;    
		Движение.СуммаПоложительнойКорректировки		= Строка.СуммаПоложительнойКорректировкиВал;
		Движение.СуммаОтрицательнойКорректировки		= Строка.СуммаОтрицательнойКорректировкиВал;		
		Движение.НКД									= Строка.НКДВал;
		Движение.УКД									= Строка.УКДВал;
		Движение.СуммаКупонаКПолучению					= Строка.СуммаКупонаКПолучениюВал;
		Движение.СуммаНоминалаКПолучению				= Строка.СуммаНоминалаКПолучениюВал;

		Движение.СуммаРезерва 							= Строка.СуммаРезерваВал;
		Движение.СуммаНУ								= Строка.СуммаНУ;
		
		Если Строка.Валюта <>  ВалютаРегУчета Тогда
			Движение = Движения.уа_РасчетыПоЦеннымБумагам.ДобавитьПриход();
		
			Движение.Период 						= Дата;
			Движение.Портфель 						= Портфель;
			Движение.ЦеннаяБумага					= Строка.ЦеннаяБумага;
			Движение.Валюта							= ВалютаРегУчета;
			Движение.Партия							= Строка.Партия;
			Движение.ОценочнаяКатегория				= ОценочнаяКатегория;
			
			Движение.Количество 							= Строка.Количество;
			Движение.Сумма									= Строка.Сумма;
			Движение.СуммаАмортизации						= Строка.СуммаПремии - Строка.СуммаДисконта;
			Движение.СуммаПоложительнойПереоценки			= Строка.СуммаПоложительнойПереоценки;
			Движение.СуммаОтрицательнойПереоценки			= Строка.СуммаОтрицательнойПереоценки;
			Движение.СуммаПоложительнойИндексацииНоминала 	= Строка.СуммаПоложительнойИндексацииНоминала;
			Движение.СуммаОтрицательнойИндексацииНоминала	= Строка.СуммаОтрицательнойИндексацииНоминала;    
			Движение.СуммаПоложительнойКорректировки		= Строка.СуммаПоложительнойКорректировки;
			Движение.СуммаОтрицательнойКорректировки		= Строка.СуммаОтрицательнойКорректировки;		
			Движение.НКД									= Строка.НКД;
			Движение.УКД									= Строка.УКД;
			Движение.СуммаКупонаКПолучению					= Строка.СуммаКупонаКПолучению;
			Движение.СуммаНоминалаКПолучению				= Строка.СуммаНоминалаКПолучению;
			Движение.СуммаРезерва 							= Строка.СуммаРезерва;
			Движение.СуммаНУ								= Строка.СуммаНУ;
		КонецЕсли; 
		
	КонецЦикла;
	
	Движения.уа_РасчетыПоЦеннымБумагам.Записывать = Истина;  
	
КонецПроцедуры

Процедура СформироватьДвиженияВБухгалтерскомУчете(Отказ, Сальдировать = Истина)
	
	Если Отказ тогда Возврат; КонецЕсли;
	
	тзАктивы = ПодготовитьТаблицуДанныхВводаЦБ(Ссылка, Сальдировать);
	
	СчетОстатков = ПланыСчетов.ЕПС.НайтиПоКоду("000.00");
		
	Для Каждого Строка Из тзАктивы Цикл
		СчетаАктива = уа_БухгалтерскийУчетПовтИсп.СчетаАктива(Дата, Строка.ЦеннаяБумага, ОценочнаяКатегория);
				
		Если Строка.СуммаВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.Сумма;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по стоимости '");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);  
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьКоличестваПроводки(Проводка, Строка.Количество);
			уа_БухгалтерскийУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка, Строка.СуммаНУ);
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаВал);	
		КонецЕсли; 
		
		
		Если Строка.УКДВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.УКД;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по уплаченному купонному доходу '");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.УНКД); 
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка, Строка.УКД);
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.УКДВал);			
		КонецЕсли; 
		
		
		Если Строка.НКДВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.НКД;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по начисленному купонному доходу '");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.НКД); 
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка, Строка.НКД);
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.НКДВал);	
		КонецЕсли;   
		
		
		Если Строка.СуммаКупонаКПолучению <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаКупонаКПолучению;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по купонному доходу к получению'");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.КупонКВыплате); 
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка, Строка.НКД);
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаКупонаКПолучениюВал);	
		КонецЕсли;   
		
		
		Если Строка.СуммаНоминалаКПолучению <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаНоминалаКПолучению;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по номиналу к получению'");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.НоминалКВыплате); 
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка, Строка.НКД);
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаНоминалаКПолучениюВал);	
		КонецЕсли;   
		
		
		Если Строка.СуммаПремииВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаПремии;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по премии'");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Премия); 
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаПремииВал);
		КонецЕсли; 
		
		
		Если Строка.СуммаДисконтаВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаДисконта;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по дисконту'");;
			
			Проводка.СчетДт 		= СчетаАктива.СчетУчета;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Дисконт);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;    			
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаДисконтаВал);
		КонецЕсли;
		
		
		Если Строка.СуммаПоложительнойИндексацииНоминалаВал > 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаПоложительнойИндексацииНоминала;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по положительной индексации номинала'");;
			
			Проводка.СчетДт 		= ?(ОценочнаяКатегория = Перечисления.уа_ОценочнаяКатегория.АктивыПоСправедливойСтоимостиПрибыль, 
				СчетаАктива.ПереоценкаПоложительная, СчетаАктива.КорректировкаУвеличение);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Индексация);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			Проводка.СчетКт 		= СчетОстатков;

			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаПоложительнойИндексацииНоминалаВал);
		КонецЕсли;  
		
		
		Если Строка.СуммаОтрицательнойИндексацииНоминалаВал > 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаОтрицательнойИндексацииНоминала;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по отрицательной индексации номинала'");;
			
			Проводка.СчетДт 		= СчетОстатков;
			Проводка.СчетКт 		= ?(ОценочнаяКатегория = Перечисления.уа_ОценочнаяКатегория.АктивыПоСправедливойСтоимостиПрибыль, 
				СчетаАктива.ПереоценкаОтрицательная, СчетаАктива.КорректировкаУменьшение);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Индексация);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);          			

			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаОтрицательнойИндексацииНоминала);
		КонецЕсли;  
		
		
		Если Строка.СуммаПоложительнойПереоценкиВал > 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаПоложительнойПереоценки;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по положительной переоценке'");;
			
			Проводка.СчетДт 		= СчетаАктива.ПереоценкаПоложительная;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
				
			Проводка.СчетКт 		= СчетОстатков;			
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаПоложительнойПереоценкиВал);	
		КонецЕсли;


		Если Строка.СуммаОтрицательнойПереоценкиВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаОтрицательнойПереоценки;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по отрицательной переоценке'");;
			
			Проводка.СчетДт 		= СчетОстатков;	
			
			Проводка.СчетКт 		= СчетаАктива.ПереоценкаОтрицательная;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаОтрицательнойПереоценкиВал);	
		КонецЕсли;

		Если Строка.СуммаПоложительнойКорректировкиВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаПоложительнойКорректировки;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по положительной корректировке'");;
			
			Проводка.СчетДт 		= СчетаАктива.КорректировкаУвеличение;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
				
			Проводка.СчетКт 		= СчетОстатков;			
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаПоложительнойКорректировкиВал);	
		КонецЕсли;


		Если Строка.СуммаОтрицательнойКорректировкиВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= Строка.СуммаОтрицательнойКорректировки;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по отрицательной корректировке'");;
			
			Проводка.СчетДт 		= СчетОстатков;				
			Проводка.СчетКт 		= СчетаАктива.КорректировкаУменьшение;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, Строка.СуммаОтрицательнойКорректировкиВал);	
		КонецЕсли;
		
		
		Если Строка.СуммаРезерваВал <> 0 Тогда
			Проводка = Движения.ЕПС.Добавить();
						
			Проводка.Период			= Дата;
			Проводка.Регистратор 	= Ссылка;
			Проводка.Портфель	 	= Портфель;		
			Проводка.Сумма 			= -Строка.СуммаРезерва;
			Проводка.Содержание 	= НСтр("ru = 'Ввод начальных остатков по резерву под обесценение'");;
			
			Проводка.СчетДт 		= СчетОстатков;
			Проводка.СчетКт 		= СчетаАктива.РезервыПодОбесценение;
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ФинансовыеИнструменты, Строка.ЦеннаяБумага);
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.ВидыСтоимости, Перечисления.уа_ВидыСтоимости.Стоимость);	
			уа_БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				ПланыВидовХарактеристик.ВидыСубконтоЕПС.Партия, Строка.Партия);  
			
			уа_БухгалтерскийУчет.ЗаполнитьВалютыИСуммыВалПроводки(Проводка, Строка.Валюта, -Строка.СуммаРезерваВал);
		КонецЕсли;    
		
	КонецЦикла;	
	
	Движения.ЕПС.Записывать = Истина;
КонецПроцедуры

Процедура СформироватьЗаписиВРегистрах(Отказ)
	Если Отказ тогда Возврат; КонецЕсли;

	Для Каждого Строка Из Активы Цикл
		Если Строка.ЦенаАмортизации <> 0 Или Строка.ЦенаНакопленногоДисконта <> 0 Или Строка.ЭСП <> 0	Тогда
			Движение = Движения.уа_ПараметрыРасчетаАмортизации.Добавить();	
			Движение.Период 		= Дата;
			Движение.Портфель 		= Портфель;
			ЗаполнитьЗначенияСвойств(Движение, Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	Движения.уа_ПараметрыРасчетаАмортизации.Записывать = Истина;
КонецПроцедуры
 
#КонецЕсли