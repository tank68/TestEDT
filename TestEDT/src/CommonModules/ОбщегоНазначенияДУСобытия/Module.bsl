
#Область ПрограммныйИнтерфейс

// Функция определяет, входит ли документ в регламентные операции  
//
// Параметры:
//   ЗначениеРеквизита  - проверяется тип значения реквизита
//
// Возвращаемое значение:
//   Булево - Истина, только если тип ДокументСсылка.ПланРегламентныхОперацийДУ
//
Функция ДокументВходитВРегламентныеОперации(ЗначениеРеквизита) Экспорт
	
	Если ТипЗнч(ЗначениеРеквизита)<>Тип("ДокументСсылка.ПланРегламентныхОперацийДУ") Тогда Возврат Ложь ; КонецЕсли;
	Если ЗначениеРеквизита.Пустая() тогда Возврат Ложь; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

// Процедура производит начальное заполнение документов и бизнес-процессов
Процедура НачальноеЗаполнениеОбъекта(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	МетаданныеОбъект = Источник.Метаданные();
	
	ЕстьПортфель = ОбщегоНазначения.ЕстьРеквизитОбъекта("Портфель", МетаданныеОбъект);
	
	// XG-726 {
	Если ЕстьПортфель И Не ЗначениеЗаполнено(Источник.Портфель) И ЗначениеЗаполнено(ПараметрыСеанса.ОсновнойПортфель) Тогда
		Источник.Портфель = ПараметрыСеанса.ОсновнойПортфель;
	КонецЕсли;
	// XG-726 }
	
	Если Не Источник.ДополнительныеСвойства.Свойство("НеЗаполнятьФлаги") Тогда
		
		Если ЕстьПортфель И ЗначениеЗаполнено(Источник.Портфель) Тогда 
			ЗаполнитьЗначенияСвойств(Источник, ОбщегоНазначенияДУПовтИсп.ВидыУчетаПоПортфелю(Источник.Портфель));
		Иначе 
			ЕстьРеквизитБУ 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("БУ", МетаданныеОбъект);
			ЕстьРеквизитНУ 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("НУ", МетаданныеОбъект);
			ЕстьРеквизитУУ 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("УУ", МетаданныеОбъект);
			ЕстьРеквизитВУ 	= ОбщегоНазначения.ЕстьРеквизитОбъекта("ВУ", МетаданныеОбъект);
			ЕстьРеквизитЕПС = ОбщегоНазначения.ЕстьРеквизитОбъекта("ЕПС", МетаданныеОбъект);
			
			Если ЕстьРеквизитБУ Тогда
				Источник.БУ = Истина;
			КонецЕсли; 
			
			Если ЕстьРеквизитНУ Тогда
				Источник.НУ = Истина;
			КонецЕсли; 
			
			//Если ЕстьРеквизитУУ ИЛИ ЕстьРеквизитВУ Тогда
			//	
			//	РежимТолькоБухгалтерскийУчет = ПолныеПрава.ПараметрСеанса("РежимТолькоБухгалтерскийУчет");
			//	
			//	Если ЕстьРеквизитУУ Тогда	
			//		Источник.УУ = НЕ РежимТолькоБухгалтерскийУчет;
			//	КонецЕсли; 
			//	
			//	Если ЕстьРеквизитВУ Тогда	
			//		Источник.ВУ = НЕ РежимТолькоБухгалтерскийУчет;
			//	КонецЕсли; 
			//	
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет проверку заполнения документов и бизнес-процессов
// Проверки:
// - проверка наличия действующей учетной политики на дату документа
//
// Параметры:
//  Источник - документ источник
//  Отказ - флаг отказа отвыполнения операции
//  ПроверяемыеРеквизиты - //
Процедура ПроверкаЗаполненияОбъектов(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МетаданныеОбъект = Источник.Метаданные();

	
	// 1. Проверка наличия действующей учетной политики
	Портфель = Неопределено;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Портфель", МетаданныеОбъект) Тогда
		Портфель = Источник.Портфель;	
	КонецЕсли;	 

	Дата = Источник.Дата;	
	
	Если МетаданныеОбъект.Имя <> "УчетнаяПолитика"  
		И МетаданныеОбъект.Имя <> "НастройкиОтчетности" 
		И ЗначениеЗаполнено(Портфель) Тогда
	
		ЕстьДействующиеУП = ОбщегоНазначенияДУПовтИсп.ЕстьДействующиеУП(Дата, Портфель);
		Если ЕстьДействующиеУП = Ложь И Не ДокументВходитВСоставИсключений(Источник) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Проверка заполнения не выполнена. По портфелю: %1 не найдено действующей учетной политики на %2 '"), Портфель, Формат(Дата,"ДЛФ=D"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Портфель",,Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
	// 2. ...
	//
	
КонецПроцедуры

Функция ДокументВходитВСоставИсключений(Источник)
	
	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить("ДокументОбъект.ДокументРасчетовСКонтрагентом");
	
	Для каждого ДокументИсключение Из  СписокИсключений Цикл
		Если ТипЗнч(Источник) = Тип(ДокументИсключение) Тогда
			 Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь; 
	
КонецФункции

// Процедура проверяет перед перепроведением, сдвинута ли дата документа вперёд или нет, 
// и записывает полученнный результат в дополнительное свойство документа-источника
//
// Параметры:
//  Источник - документ источник
//  Отказ - флаг отказа отвыполнения операции
//  РежимЗаписи - режим записи документа
//  РежимПроведения - режим проведения
//
Процедура ПередЗаписьюДокументаДляУдаленияДвиженийПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ Источник.ДополнительныеСвойства.ЭтоНовый 
		И Источник.Проведен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Дата КАК Дата
		|ИЗ
		|	Документ." + Источник.Метаданные().Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Источник.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Источник.Дата > Выборка.Дата);
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие УстановитьПометкуУдаленияУБизнесПроцессов.
//
Процедура УстановитьПометкуУдаленияБизнесПроцессов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;  
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() ИЛИ Источник.Завершен Тогда 
		Возврат;  
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаляем все здачи по бизнес-процессу"
	Если Источник.ПометкаУдаления Тогда
		 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнебиржеваяСделка.Ссылка
		|ИЗ
		|	Задача.ВнебиржеваяСделка КАК ВнебиржеваяСделка
		|ГДЕ
		|	ВнебиржеваяСделка.БизнесПроцесс = &БизнесПроцесс";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				ТекЗадача= Выборка.Ссылка.ПолучитьОбъект();
				ТекЗадача.Удалить();
			Исключение
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не удалось удалить задачу: " + Выборка.Ссылка + " по причине: " + ОписаниеОшибки() + "'");
				Сообщить(ТекстСообщения);
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;	
	
	Если Не Отказ Тогда
		
		// Помечаем/снимаем пометку на удаление у всех связанных с бизне-процессом документов 
		МассивСсылок = КритерииОтбора.ДокументыПоБизнеспроцессам.Найти(Источник.Ссылка);
		Для каждого ТекДок Из МассивСсылок Цикл
			Если ТекДок.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
				Попытка
					ДокОбъект  = ТекДок.ПолучитьОбъект();
					ДокОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
				Исключение
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Не удалось пометить/снять пометку на удаление у документа: " + ТекДок.Ссылка + " по причине: " + ОписаниеОшибки() + "'");
					Сообщить(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчки подписки КорректировкаВидовУчетаПередЗаписьюДокумента TM-3177
//
Процедура КорректировкаВидовУчетаПередЗаписьюДокумента(Источник, Отказ) Экспорт
	
	МетаданныеОбъект = Источник.Метаданные();
	ЕстьРеквизитУУ = ОбщегоНазначения.ЕстьРеквизитОбъекта("УУ", МетаданныеОбъект);
	ЕстьРеквизитВУ = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВУ", МетаданныеОбъект);
	
	//РежимТолькоБухгалтерскийУчет = ПолныеПрава.ПараметрСеанса("РежимТолькоБухгалтерскийУчет");
	//
	//Если РежимТолькоБухгалтерскийУчет Тогда
	//	
	//	Если ЕстьРеквизитУУ Тогда	
	//		Источник.УУ = Ложь;
	//	КонецЕсли;
	//	
	//	Если ЕстьРеквизитВУ Тогда	
	//		Источник.ВУ = Ложь;
	//	КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	УстановитьАвтора(Источник, Отказ);	
КонецПроцедуры

// Процедура проверяет перед записью соотвествие типа портфеля стандарту учета
//
// Параметры:
//  Источник - документ источник
//  Отказ - флаг отказа отвыполнения операции
//  РежимЗаписи - режим записи документа
//  РежимПроведения - режим проведения
//
Процедура ПередЗаписьюДокументаПроверкаТипаПортфеляПоСтандартуПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	МетаданныеОбъект = Источник.Метаданные();
	ЕстьРеквизитПортфель	 = ОбщегоНазначения.ЕстьРеквизитОбъекта("Портфель", МетаданныеОбъект);
	ЕстьРеквизитТипПортфеля	 = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипПортфеля", МетаданныеОбъект);
	ЕстьРеквизитЕПС			 = ОбщегоНазначения.ЕстьРеквизитОбъекта("ЕПС", МетаданныеОбъект);
	
	Если ЕстьРеквизитПортфель И ЕстьРеквизитТипПортфеля Тогда	
		Если ЗначениеЗаполнено(Источник.ТипПортфеля) Тогда
			Если (ЕстьРеквизитЕПС И Источник.ЕПС) ИЛИ Не ЕстьРеквизитЕПС Тогда
				
				СтандартУчета = УправлениеПараметрамиПортфеляПовтИсп.ПолучитьПараметрПортфеля(Источник.Портфель, ПланыВидовХарактеристик.ПараметрыПортфеля.СтандартУчета, Источник.Дата);
								
				ТипыПортфелейПоСтандартуУчета = УчетЕПСПовтИсп.ТипыПортфелейПоСтандартуУчета(Источник.Портфель, Источник.Дата);
				Если ТипыПортфелейПоСтандартуУчета.Найти(Источник.ТипПортфеля) = Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Тип портфеля: %1 не соответствует стандарту: %2'"), Источник.ТипПортфеля, СтандартУчета);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ТипПортфеля",,Отказ);
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДетализироватьЖурналРегистрацииПриИзмененииДатыЗапретаИзмененияДанных(Источник, Отказ, Замещение) Экспорт
	
	ИзменяетсяЕдинственнаяЗапись = 
		Источник.Отбор.Найти("Объект") <> Неопределено И Источник.Отбор.Объект.Использование И Источник.Отбор.Объект.ВидСравнения = ВидСравнения.Равно
		И Источник.Отбор.Найти("Пользователь") <> Неопределено И Источник.Отбор.Пользователь.Использование И Источник.Отбор.Пользователь.ВидСравнения = ВидСравнения.Равно
		И Источник.Отбор.Найти("Раздел") <> Неопределено И Источник.Отбор.Раздел.Использование И Источник.Отбор.Раздел.ВидСравнения = ВидСравнения.Равно;
		
	Если ИзменяетсяЕдинственнаяЗапись И Источник.Количество() = 0 Тогда
		Объект = Источник.Отбор.Объект.Значение;
		ТекстСообщения = "Удалена дата запрета изменения";
		ОписаниеСообщения = СтрШаблон(
			"Раздел: %1, Объект: %2, Пользователь: %3", 
			Источник.Отбор.Раздел.Значение, Источник.Отбор.Объект.Значение, Источник.Отбор.Пользователь.Значение);
	ИначеЕсли ИзменяетсяЕдинственнаяЗапись И Источник.Количество() = 1 Тогда
		Объект = Источник.Отбор.Объект.Значение;
		ТекстСообщения = "Добавлена / изменена дата запрета изменения";
		ОписаниеСообщения = СтрШаблон(
			"Раздел: %1, Объект: %2, Пользователь: %3
			|Дата запрета: %4, Комментарий: %5", 
			Источник.Отбор.Раздел.Значение, Источник.Отбор.Объект.Значение, Источник.Отбор.Пользователь.Значение,
			Источник[0].ДатаЗапрета, Источник[0].Комментарий);
	Иначе
		Объект = Справочники.Портфели.ПустаяСсылка();
		ПредставлениеЗаписей = "";
		Для Каждого Запись Из Источник Цикл
			ПредставлениеЗаписей = ПредставлениеЗаписей + Символы.ПС
				+ СтрШаблон("Раздел: %1, Объект: %2, Пользователь: %3, Дата запрета: %4, Комментарий: %5",
					Запись.Раздел, Запись.Объект, Запись.Пользователь, Запись.ДатаЗапрета, Запись.Комментарий);
		КонецЦикла;
		ТекстСообщения = "Изменены даты запрета изменения";
		ОписаниеСообщения = СтрШаблон(
			"Очищены записи по отбору: %1
			|Добавлены следующие записи: %2", Строка(Источник.Отбор), ПредставлениеЗаписей);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.ДатыЗапретаИзменения, Объект, ОписаниеСообщения);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьАвтора(Источник, Отказ)

	Если Источник.ЭтоНовый() Тогда
		Реквизиты = Источник.Метаданные().Реквизиты;
		Если Реквизиты.Найти("Автор") <> Неопределено Тогда
			Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти 

