 
 // Функция возвращает значение указанного параметра указанного договора ДУ на указанную дату
// Если значение параметра не задано, возвращается Неопределено
//
// Параметры:
// 		Портфель (обязат)	- ссылка (только ссылка!) на Справочники.Портфель
// 		Параметр (обязат)	- ссылка (только ссылка!) на ПВХ.ПараметрыФонда
// 		Дата (необязат)		- дата, на которую вернуть значение. По умолчанию - ТекущаяДата()
//
// Возвращаемое значение:
//  Значение
//
Функция ПолучитьПараметрПортфеля(Знач Портфель, Знач Параметр, Знач Дата = Неопределено) Экспорт
	
	Если ТипЗнч(Портфель) <> Тип("СправочникСсылка.Портфели") Тогда
		ТекстИсключения = НСтр("ru = 'Неверный тип параметра ""ДоговоДУ"": ожидается ""'") + Тип("СправочникСсылка.Портфели") + 
		              НСтр("ru = '"", а передано ""'") + ТипЗнч(Портфель) + """";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) <> Тип("ПланВидовХарактеристикСсылка.ПараметрыПортфеля") Тогда
		ТекстИсключения = НСтр("ru = 'Неверный тип параметра ""Параметр"": ожидается ""'") + Тип("ПланВидовХарактеристикСсылка.ПараметрыПортфеля") + 
		              НСтр("ru = '"", а передано ""'") + ТипЗнч(Параметр) + """";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	Иначе
		
		Если ТипЗнч(Дата) = Тип("Граница") Тогда
			Дата = Дата.Значение;
		КонецЕсли;
		
		Тип = ТипЗнч(Дата);
		ПравТип = Тип("Дата");
		
		Если Тип <> ПравТип Тогда
			ТекстИсключения = НСтр("ru = 'Неверный тип параметра ""Дата"": ожидается ""'") + ПравТип + 
			              НСтр("ru = '"", а передано ""'") + тип + """";
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗначенияПараметровПортфеляСрезПоследних.Регистратор,
	                      |	ЗначенияПараметровПортфеляСрезПоследних.Параметр,
	                      |	ЗначенияПараметровПортфеляСрезПоследних.Значение
	                      |ИЗ
	                      |	РегистрСведений.ЗначенияПараметровПортфеля.СрезПоследних(
	                      |			&Период,
	                      |			Параметр = &Параметр
	                      |				И Портфель = &Портфель) КАК ЗначенияПараметровПортфеляСрезПоследних");
						  
	Запрос.УстановитьПараметр("Портфель", Портфель);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Возврат Параметр.ТипЗначения.ПривестиЗначение();
		
	КонецЕсли;
	
	Выборка.Следующий();
	Значение = ПолучитьЗначениеПараметра(Выборка.Регистратор, Выборка.Параметр, Выборка.Значение);
	
	Возврат Значение;
	
КонецФункции // ПолучитьПараметрПортфеля()

//// Функция получает все значения параметра портфеля весь период  //NFO-1206
//
// Параметры:
//  Портфель - Портфель
//	Параметр - Параметр (ПВХ)
//
// Возвращаемое значение:
//  Таблица значений (Период, Значение)
Функция ИсторическиеЗначенияПараметра(Знач Портфель, Знач Параметр) Экспорт
	
	Если ТипЗнч(Портфель) <> Тип("СправочникСсылка.Портфели") Тогда
		ТекстИсключения = НСтр("ru = 'Неверный тип параметра ""ДоговоДУ"": ожидается ""'") + Тип("СправочникСсылка.Портфели") + 
		НСтр("ru = '"", а передано ""'") + ТипЗнч(Портфель) + """";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) <> Тип("ПланВидовХарактеристикСсылка.ПараметрыПортфеля") Тогда
		ТекстИсключения = НСтр("ru = 'Неверный тип параметра ""Параметр"": ожидается ""'") + Тип("ПланВидовХарактеристикСсылка.ПараметрыПортфеля") + 
		НСтр("ru = '"", а передано ""'") + ТипЗнч(Параметр) + """";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Портфель", Портфель);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияПараметровПортфеля.Период КАК Период,
	               |	ЗначенияПараметровПортфеля.Значение,
	               |	ЗначенияПараметровПортфеля.Регистратор,
	               |	ЗначенияПараметровПортфеля.Параметр
	               |ИЗ
	               |	РегистрСведений.ЗначенияПараметровПортфеля КАК ЗначенияПараметровПортфеля
	               |ГДЕ
	               |	ЗначенияПараметровПортфеля.Портфель = &Портфель
	               |	И ЗначенияПараметровПортфеля.Параметр = &Параметр
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
КонецФункции

Функция ЗначениеПараметраПортфеля(Знач Портфель, Знач Параметр, Знач Дата = '00010101') Экспорт      //NFO-1206
	
	СписокПараметров = УправлениеПараметрамиПортфеляПовтИсп.ИсторическиеЗначенияПараметра(Портфель,Параметр);
	
	Если Дата = '00010101' тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Значение = 	Параметр.ТипЗначения.ПривестиЗначение();
	
	Для каждого ТекСтрока из СписокПараметров Цикл
		
		Если ТекСтрока.Период<=Дата тогда
			Значение = ПолучитьЗначениеПараметра(ТекСтрока.Регистратор, ТекСтрока.Параметр, ТекСтрока.Значение);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Функция получает значение параметра
//
// Параметры:
//  Регистратор - регистратор
//  Параметр 	- параметр
//  Значение 	- значение
//
// Возвращаемое значение:
//  Значение
//
Функция ПолучитьЗначениеПараметра(Знач Регистратор, Знач Параметр, Знач Значение)
	
	ПВХ = ПланыВидовХарактеристик.ПараметрыПортфеля;
	
	МногозначныеПараметры = МногозначныеПараметры();
	ХранилищеМногозначногоПараметра = МногозначныеПараметры.Получить(Параметр);
	
	Если ХранилищеМногозначногоПараметра = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат Значение[Параметр.Код].ВыгрузитьКолонку(ХранилищеМногозначногоПараметра);
		
КонецФункции // ПолучитьЗначениеПараметра()

// Возвращает многозначные параметры 
//
// Параметры:
//
// Возвращаемое значение:
//	Соответствие - Соответствие
//
Функция МногозначныеПараметры() 
	
	ПВХ = ПланыВидовХарактеристик.ПараметрыПортфеля;
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ПВХ.Биржи, "Биржа");
	Соответствие.Вставить(ПВХ.ИсточникиПубликаций, "ИсточникПубликации");
	Соответствие.Вставить(ПВХ.ПравилаОкругленияКотировок, "ВидАктива"); //TM-755
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает лицензию контрагента
//
// Параметры:
//  Контрагент - Справочник - Контрагенты
//  ВидЛицензии - вид лицензии
//
// Возвращаемое значение:
//	ВозвращаемаяСтруктура - Структура
//
Функция ЛицензияКонтрагента(Контрагент, ВидЛицензии) Экспорт
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ДатаВыдачи");
	ВозвращаемаяСтруктура.Вставить("НомерЛицензии");
	ВозвращаемаяСтруктура.Вставить("КемВыдана");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВидЛицензии", ВидЛицензии);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыЛицензии.ВидЛицензии КАК ВидЛицензии,
	|	КонтрагентыЛицензии.ДатаВыдачи КАК ДатаВыдачи,
	|	КонтрагентыЛицензии.НомерЛицензии,
	|	КонтрагентыЛицензии.КемВыдана
	|ИЗ
	|	Справочник.Контрагенты.Лицензии КАК КонтрагентыЛицензии
	|ГДЕ
	|	КонтрагентыЛицензии.Ссылка = &Контрагент
	|	И КонтрагентыЛицензии.ВидЛицензии = &ВидЛицензии
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВозвращаемаяСтруктура.ДатаВыдачи    = Результат.ДатаВыдачи;
		ВозвращаемаяСтруктура.НомерЛицензии = Результат.НомерЛицензии;
		ВозвращаемаяСтруктура.КемВыдана     = Результат.КемВыдана;
	Иначе
		ВозвращаемаяСтруктура.ДатаВыдачи    = "";
		ВозвращаемаяСтруктура.НомерЛицензии = "лицензия отсутствует";
		ВозвращаемаяСтруктура.КемВыдана     = "";

	КонецЕсли;
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция предназначена для разбора значения вознаграждения в массив строк
//
// Параметры:
//  Значение - строка  со спец символами
//  %-конец текущей колонки,
//  #-конец строки,
//  *-символ, заменяемый на нужное представление при выводе в документе
//
// Возвращаемое значение:
//  МассивСтрок - полученный массив строк
//
Функция РазобратьЗначениеВознаграждения(Знач Значение) Экспорт
	МассивСтрок = Новый Массив;
	
	Конец = Ложь;
	
	Пока не Конец Цикл
		
		КонецСтроки = Найти(Значение,"#");
		Если КонецСтроки = 0 тогда
			Прервать;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		
		СтрокаДанных = Лев(Значение, КонецСтроки - 1);
		
		// ******Флажок Суммой
		ПозицияСуммой = Найти(СтрокаДанных,"!");
		Если ПозицияСуммой = 0 Тогда
			СтруктураСтроки.Вставить("Суммой", Ложь);
		Иначе
			СтруктураСтроки.Вставить("Суммой", Истина);
			СтрокаДанных = СтрЗаменить(СтрокаДанных,"!","");
		КонецЕсли;
		
		// ******Тип сравнения
		ПозицияТипаСравнения = Найти(СтрокаДанных,"%");
		ТипСравнения = Лев(СтрокаДанных,ПозицияТипаСравнения-1);
		
		Если ЗначениеЗаполнено(ТипСравнения) Тогда
			СтруктураСтроки.Вставить("ТипСравнения", ТипСравнения);
		Иначе
			СтруктураСтроки.Вставить("ТипСравнения",">");
		КонецЕсли;
		
		СтрокаДанных = Сред(СтрокаДанных,ПозицияТипаСравнения+1,СтрДлина(СтрокаДанных));
		
		// ****** Значение ограничения
		ПозицияОграничения = Найти(СтрокаДанных,"%");
		Ограничение = Лев(СтрокаДанных,ПозицияОграничения-1);
		
		Если ЗначениеЗаполнено(Ограничение) Тогда
			СтруктураСтроки.Вставить("Значение", Число(Ограничение));
		Иначе
			СтруктураСтроки.Вставить("Значение",0);
		КонецЕсли;
		//TM-775 
		Если СтруктураСтроки.Значение=0 и СтруктураСтроки.ТипСравнения=">" Тогда
			СтруктураСтроки.ТипСравнения=">=";
		КонецЕсли;
		
		СтрокаДанных = Сред(СтрокаДанных,ПозицияОграничения+1,СтрДлина(СтрокаДанных));
		
		// *****Значение вознаграждения
		Вознаграждение_ = Сред(СтрокаДанных,2,СтрДлина(СтрокаДанных));
		
		ПозицияВалюты = Найти(Вознаграждение_, "%@");
		
		Если ПозицияВалюты <> 0 Тогда
			Вознаграждение 	= Лев(Вознаграждение_,ПозицияВалюты-1);
			КодВалюты 		= Сред(Вознаграждение_, ПозицияВалюты + 2, СтрДлина(Вознаграждение_) - (ПозицияВалюты + 1));
			НайденнаяВалюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
			
			Если не НайденнаяВалюта.Пустая() Тогда
				СтруктураСтроки.Вставить("Валюта", НайденнаяВалюта);			
			КонецЕсли;
		Иначе
			Вознаграждение = Вознаграждение_;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Вознаграждение) Тогда
			СтруктураСтроки.Вставить("РазмерВознаграждения", Число(Вознаграждение));
		Иначе
			СтруктураСтроки.Вставить("РазмерВознаграждения",0);
		КонецЕсли;
		//TM-1302
		Если СтруктураСтроки.Значение=0 И СтруктураСтроки.РазмерВознаграждения=0 Тогда //Проверка на ошибочные пустые строки
		Иначе
		    МассивСтрок.Добавить(СтруктураСтроки);
		КонецЕсли;
		//TM-1302 ****
		
		
		// ****
		Значение = Сред(Значение,КонецСтроки+1, СтрДлина(Значение));
		
	КонецЦикла;
	
	Возврат МассивСтрок;
КонецФункции // РазобратьЗначениеВознаграждения()

// Функция собирает значение вознаграждения из массива строк
//
// Параметры:
//  МассивСтрок - массив строк
//
//  Возвращаемое значение:
//  СтрокаВозврата - полученное значение вознаграждения
//
Функция СобратьЗначениеВознаграждения(Знач МассивСтрок) Экспорт
	СтрокаВозврата = "";
	Для каждого СтрокаМассива из МассивСтрок Цикл
		СтрокаВозврата = СтрокаВозврата + Строка(СтрокаМассива.ТипСравнения) + "%"
		+ Строка(СтрокаМассива.Значение) + "%*" + Строка(СтрокаМассива.РазмерВознаграждения)
		+ ?(ТипЗнч(СтрокаМассива) = Тип("Структура"),?(СтрокаМассива.Свойство("Сумма"),?(СтрокаМассива.Сумма,"!",""),""),?(СтрокаМассива.Сумма,"!","")) 
		+ ?(ТипЗнч(СтрокаМассива) = Тип("Структура") и не СтрокаМассива.Свойство("Сумма"), "", ?(СтрокаМассива.Сумма и не СтрокаМассива.Валюта.Пустая(), "%@" + СтрокаМассива.Валюта.Код,"")) + "#";
	КонецЦикла;
	
	Возврат СтрокаВозврата;
КонецФункции // СобратьЗначениеВознаграждения()
