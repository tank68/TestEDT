
//Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт

//	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
//	ПараметрыВыбора = Новый Структура();

//	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
//		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами")
//			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

//			СтандартнаяОбработка = Ложь;

//			СтруктураПараметров  = Новый Структура;
//			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
//				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
//				Если СписокПараметров.Свойство("Контрагент") Тогда
//					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
//					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("Дата") Тогда
//					СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("СчетУчета") Тогда
//					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
//					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("РежимОтбораДокументов") Тогда
//					СтруктураПараметров.Вставить("РежимОтбораДокументов", СписокПараметров.РежимОтбораДокументов);
//				КонецЕсли;
//				Если СписокПараметров.Свойство("ТипыДокументов") Тогда
//					СтруктураПараметров.Вставить("ТипыДокументов", СписокПараметров.ТипыДокументов);
//				Иначе
//					СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
//				КонецЕсли;
//			КонецЕсли;
//			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
//			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
//		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
//			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

//			СтандартнаяОбработка = Ложь;

//			СтруктураПараметров  = Новый Структура;
//			СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
//			Если СписокПараметров.Свойство("Номенклатура") Тогда
//				СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
//			КонецЕсли;
//			Если СписокПараметров.Свойство("Склад") Тогда
//				СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
//			КонецЕсли;
//			Если СписокПараметров.Свойство("Дата") Тогда
//				СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
//			КонецЕсли;
//			Если СписокПараметров.Свойство("СчетУчета") Тогда
//				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
//			КонецЕсли;
//			СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);

//			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
//			ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
//		КонецЕсли;
//	КонецЦикла;

//КонецПроцедуры

//Процедура ПересчитатьСумму(Строка, СуммаВключаетНДС = Ложь, ЗначениеПустогоКоличества = 0, ПрименяютсяСтавки4и2 = Ложь) Экспорт

//	Строка.Сумма = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
//	
//	Если Строка.Свойство("СуммаСкидки") И Строка.Свойство("ПроцентСкидки") Тогда
//		Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
//	КонецЕсли;
//	
//	Если Строка.Свойство("СтавкаНДС") И Строка.Свойство("Всего") Тогда
//		ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС, ПрименяютсяСтавки4и2);
//	КонецЕсли;

//КонецПроцедуры

//Процедура ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт
//	Перем СуммаСкидки;
//	
//	Сумма = ?(Строка.Свойство("СуммаСкидки", СуммаСкидки), Строка.Сумма - СуммаСкидки, Строка.Сумма);

//	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
//	Строка.Всего 	= Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС);

//КонецПроцедуры

//// Процедура вызывается из модуля формы документов при обработке оповещения
////
//// Параметры:
////   Форма - Управляемая форма, для которой производится обработка оповещения
////   ДокументСсылка - ссылка на документ формы
////   ИмяСобытия - имя обрабатываемого события
////   Параметр - параметр, переданный в обработку оповещения
////   Источник - источник, переданный в обработку оповещения
//Процедура ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт
//	Если ИмяСобытия = "ВыполненаЗаписьДокумента" Тогда
//		Если ДокументСсылка = Параметр.ДокументСсылка Тогда 
//			Форма.Прочитать();
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры	

//// Процедура показывает переданное сообщение в отдельной форме
//// также в форме может быть отражена гиперссылка
////
//// Параметры:
////  ПараметрыСообщения - Структура
////     - поля структуры:
////        - Заголовок            - Строка - текст заголовка формы
////        - Сообщение            - Строка - текст сообщения
////        - ГиперссылкаТекст     - Строка - (необязательный) представление объекта
////        - ГиперссылкаНавигация - Строка - (необязательный) навигационная ссылка объекта
////        - ГиперссылкаИмяФормы  - Строка - (необязательный) имя формы по гиперссылке
////        - ГиперссылкаПараметры - Строка - (необязательный) параметры формы по гиперссылке
////
//Процедура ПоказатьСообщениеВФорме(ПараметрыСообщения) Экспорт
//	
//	ОткрытьФорму("ОбщаяФорма.ФормаСообщение", ПараметрыСообщения);
//	
//КонецПроцедуры

//// Функция возвращает Истина, если при изменении даты документа требуется перечитать 
//// настройки из базы данных на сервере.
////
//Функция ТребуетсяВызовСервераПриИзмененииДатыДокумента(НоваяДата, ПредыдущаяДата,
//			ВалютаДокумента = Неопределено, ВалютаРегламентированногоУчета = Неопределено) Экспорт

//	Результат = Ложь;
//	
//	Если НачалоДня(НоваяДата) = НачалоДня(ПредыдущаяДата) Тогда
//		// Ничего не изменилось либо изменилось только время, от которого ничего не зависит
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если НачалоМесяца(НоваяДата) <> НачалоМесяца(ПредыдущаяДата) Тогда
//		// Учетная политика задается с периодичностью до месяца,
//		// поэтому в пределах месяца изменения даты не учитываем.
//		Результат = Истина;
//	КонецЕсли;
//	
//	Если НЕ Результат
//		И ЗначениеЗаполнено(ВалютаДокумента) 
//		И ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
//		
//		Если ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда
//			// Для валютных документов необходимо получение курсов валют на новую дату
//			Результат = Истина;
//		КонецЕсли;

//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Проверяет, надо ли записать данные формы до выполнения над ними каких-либо команд.
//Функция НадоЗаписать(Форма) Экспорт
//	
//	Возврат НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность;
//	
//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УСТАНОВКИ ОСНОВНОЙ ОРГАНИЗАЦИИ
////

//// Процедура устанавливает переданное значение в качестве основной организации
//// текущего пользователя.
////
//// Параметры
////  ОсновнаяОрганизация  - СправочникСсылка.Организации - организация,
////                         которая будет установлена в качестве основной организации.
////
//Процедура УстановитьОсновнуюОрганизацию(ОсновнаяОрганизация, ПоказыватьОповещение = Истина) Экспорт

//	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ОсновнаяОрганизация);
//	
//	Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ПоказыватьОповещение Тогда
//	
//		ПоказатьОповещениеПользователя(НСтр("ru = 'Установлена основная организация:'"),
//			ПолучитьНавигационнуюСсылку(ОсновнаяОрганизация), ОсновнаяОрганизация);
//	
//	КонецЕсли;
//	
//	Оповестить("ИзменениеОсновнойОрганизации", ОсновнаяОрганизация);

//КонецПроцедуры

//// Изменяет значение отбора в динамическом списке.
//// Поиск производится по представлению в элементах отборов верхнего уровня.
////
//// Надо анализировать возвращаемое значение - и если вернется
////  Неопределено (т.е. отбор не установлен по причине того, что в списке
////  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
////  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
////
//// Параметры
////  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
////  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
////  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
////
//// Возвращаемое значение:
////   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
////
//Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", Знач ЗначениеОтбора = Неопределено) Экспорт

//	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита);
//	
//	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
//		Если ТипЗнч(ЗначениеОтбора) <> Тип("СправочникСсылка.Организации")
//			И ТипЗнч(ЗначениеОтбора) <> Тип("Массив")
//			И ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
//			ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив")
//		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
//		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
//	Иначе
//		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
//	КонецЕсли;
//	
//	ИспользованиеОтбора = ЗначениеЗаполнено(ЗначениеОтбора);
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
//		Список, ИмяРеквизита, ЗначениеОтбора, ВидСравненияОтбора, , ИспользованиеОтбора, 
//		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
//		
//	Возврат ЗначениеОтбора;
//	
//КонецФункции

//// Функция проверяет возможность печати чека на фискальном регистраторе.
////
//// Параметры:
////	Форма - УправляемаяФорма - Форма документа
////
//// Возвращаемое значение:
////	Булево - Признак возможности печати
////
//Функция ПроверитьВозможностьПечатиЧека(Форма) Экспорт
//	
//	ПечататьЧек = Истина;
//	
//	// Если объект не проведен или модифицирован - сообщим пользователю, что печать не возможна.
//	Если НЕ Форма.Объект.Проведен
//		ИЛИ Форма.Модифицированность Тогда
//		
//		ПоказатьПредупреждение( , НСтр("ru = 'Операция возможна только после проведения документа'"));
//		ПечататьЧек = Ложь;
//		
//	КонецЕсли;
//	
//	Возврат ПечататьЧек;

//КонецФункции // ПроверитьВозможностьПечатиЧека()

//////////////////////////////////////////////////////////////////////////////////
//// ОБОЗРЕВАТЕЛЬ
////

//Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, Знач Заголовок = "") Экспорт
//	
//	ОткрытьФорму("ОбщаяФорма.Обозреватель", 
//		Новый Структура("АдресСтраницы,Заголовок", АдресСтраницы, Заголовок));

//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ГРУППОВОЕ ПЕРЕПРОВЕДЕНИЕ
////

//// Открывает форму со списком ошибок, возникших при групповом перепроведении документов.
////
//Процедура ОткрытьФормуОшибокПерепроведения(ВладелецФормы, АдресХранилищаСОшибками) Экспорт

//	Если НЕ ЗначениеЗаполнено(АдресХранилищаСОшибками) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилищаСОшибками);
//	ОткрытьФорму("Обработка.ГрупповоеПерепроведениеДокументов.Форма.ФормаОшибок", ПараметрыФормы, ВладелецФормы, Истина);

//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
////

Процедура ПолеОрганизацияПриИзменении(Элемент, ПолеПортфель, Портфель, ВключатьОбособленныеПодразделения) Экспорт
	
	Если Не ЗначениеЗаполнено(ПолеПортфель) Тогда 
		Портфель                       = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СоответствиеПортфелей,
	Портфель, ВключатьОбособленныеПодразделения) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Значение = СоответствиеПортфелей[ВыбранноеЗначение];
		Если ТипЗнч(Значение) = Тип("Структура") Тогда 
			Портфель = Значение.Портфель;
		Иначе
			Портфель = Неопределено;
		КонецЕсли;
	Иначе
		Портфель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка, ПолеПортфель, СоответствиеПортфелей) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПолеПортфель) Тогда
		Если СоответствиеПортфелей.Свойство(ПолеПортфель) Тогда
			Значение = СоответствиеПортфелей[ПолеПортфель];
			Если ТипЗнч(Значение) = Тип("Структура") Тогда				
				ПоказатьЗначение( , Значение.Портфель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Проверка основного интерфейса
////

//Процедура ПредложитьИспользоватьОсновнойИнтерфейс(ВариантПредложения) Экспорт
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("ВариантПредложения", ВариантПредложения);
//	ОткрытьФорму("ОбщаяФорма.ПредложениеИспользоватьСтандартныйИнтерфейс", СтруктураПараметров);
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Процедуры для команд печати

//Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт 
//	
//	Если Тип(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 1 Тогда 
//		Возврат Новый Структура("ЗаголовокФормы", ПараметрКоманды[0]);
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;

//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// Проверка актуальной версии конфигурации

//Процедура ПредупредитьОНеобходимостиОбновленияПрограммы(ПараметрыРаботыКлиента) Экспорт
//	
//	ТекстСообщения =  НСтр("ru='Используемая сейчас версия конфигурации была выпущена более двух месяцев назад.
//	|
//	|За это время выпущена новая версия, в которой отражены изменения законодательства и форм отчетности. Новые версии всех конфигураций размещаются на диске ИТС и на пользовательском сайте.
//	|
//	|'");
//	
//	Параметры = Новый Структура;
//	Параметры.Вставить("ОткрытьОбновлениеПрограммы", Ложь);
//	
//	Если ПараметрыРаботыКлиента.ЭтоАдминистраторСистемы И ПараметрыРаботыКлиента.ЭтоГлавныйУзел Тогда
//		
//		#Если ВебКлиент Тогда
//			Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Обновление конфигурации недоступно в веб-клиенте, рекомендуется открыть программу в тонком клиенте.'"));
//			ОткрытьФорму("ОбщаяФорма.НерекомендуемаяВерсияКонфигурации", Параметры);
//			Возврат;
//		#КонецЕсли
//		
//		Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Вы можете обновить конфигурацию прямо сейчас.'"));
//		Параметры.Вставить("ОткрытьОбновлениеПрограммы", Истина);
//	Иначе
//		Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Для обновления конфигурации обратитесь к ответственному за обновление.'"));
//	КонецЕсли;
//	
//	ОткрытьФорму("ОбщаяФорма.НерекомендуемаяВерсияКонфигурации", Параметры);
//	
//КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//// Открытие путеводителя по демо-базе

//Процедура ОткрытьПутеводительПоДемоБазе(ИмяОбработки) Экспорт
//	
//	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
//	Если ЗначениеЗаполнено(ИмяОбработки) Тогда
//		ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма");
//	КонецЕсли;
//	#КонецЕсли
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Открытие путеводителя по началу работу в 3.0

//Процедура ОткрытьНачинаемРаботатьВ30(ИмяОбработки) Экспорт
//	
//	ОткрытьФорму("Обработка." + ИмяОбработки + ".Форма");
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Открытие свертки базы

//Процедура ОткрытьСверткуБазы() Экспорт
//	
//	ОткрытьФорму("Обработка.СверткаИнформационнойБазы.Форма.Форма");
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Проверка наличия организаций

//Функция ПроверитьНаличиеОрганизаций() Экспорт
//	
//	РеквизитыОрганизацииЗаполнены = Истина;
//	ИмяПараметра = "БухгалтерияПредприятия.РеквизитыОрганизацииЗаполнены";
//	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Или Не ПараметрыПриложения[ИмяПараметра] Тогда
//		
//		Результат = ОбщегоНазначенияБПВызовСервера.НаличиеОрганизацийВУчетнойСистеме();
//		РеквизитыОрганизацииЗаполнены = Результат.РеквизитыОрганизацииЗаполнены;
//		ПараметрыПриложения.Вставить(ИмяПараметра, РеквизитыОрганизацииЗаполнены);
//		Если Не РеквизитыОрганизацииЗаполнены Тогда
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеОрганизацийЗавершение", ЭтотОбъект);
//			СписокКнопок = Новый СписокЗначений;
//			Если Результат.ДоступноРедактированиеРеквизитовОрганизации Тогда
//				
//				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить сейчас'"));
//				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Позже'"));
//				ТекстВопроса = НСтр("ru = 'Для продолжения работы заполните свои реквизиты'");
//				
//			Иначе
//				
//				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
//				ТекстВопроса = НСтр("ru = 'Не заполнены реквизиты организации. Обратитесь к администратору.'");
//				
//			КонецЕсли;
//			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат РеквизитыОрганизацииЗаполнены;
//	
//КонецФункции

//Процедура ПроверитьНаличиеОрганизацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

//	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
//		
//		ОткрытьФорму("Справочник.Организации.ФормаОбъекта");
//		
//	КонецЕсли;

//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Команда "Открыть" для реквизитов формы типа "Договор контрагента"
//// наследует установленные параметры выбора и связи параметров выбора

//Процедура ОткрытьДоговорКонтрагента(Форма, Элемент, Значение) Экспорт
//	
//	Объект = Форма.Объект;
//	
//	Если НЕ ЗначениеЗаполнено(Значение) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗначенияЗаполнения = Новый Структура;
//	
//	Если ТипЗнч(Элемент.СвязиПараметровВыбора) = Тип("ФиксированныйМассив") Тогда
//		Для Каждого ЭлементСвязи Из Элемент.СвязиПараметровВыбора Цикл
//			Если Найти(ЭлементСвязи.Имя, "Отбор.") > 0 Тогда
//				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементСвязи.Имя, "Отбор.", ""), РазобратьПутьКДаннымФормы(Форма, ЭлементСвязи.ПутьКДанным));
//			КонецЕсли;
//		КонецЦикла
//	КонецЕсли;
//	
//	Если ТипЗнч(Элемент.ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда
//		Для Каждого ЭлементОтборов Из Элемент.ПараметрыВыбора Цикл
//			Если Найти(ЭлементОтборов.Имя, "Отбор.") > 0 Тогда
//				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементОтборов.Имя, "Отбор.", ""), ЭлементОтборов.Значение);
//			КонецЕсли;
//		КонецЦикла
//	КонецЕсли;
//			
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("Ключ", Значение);
//	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
//	
//	ОткрытьФорму("Справочник.ДУ_ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
//	
//КонецПроцедуры

//Функция РазобратьПутьКДаннымФормы(Источник, Путь)
//	
//	Если ПустаяСтрока(Путь) Тогда
//		Возврат Источник;
//	КонецЕсли;
//	
//	МассивЭлементов = СтрРазделить(Путь, ".");
//	Если МассивЭлементов.Количество() = 0 Тогда
//		Возврат Источник;
//	КонецЕсли;
//	
//	ТекущийШаг = МассивЭлементов[0];
//	МассивЭлементов.Удалить(0);
//	НовыйПуть = СтрСоединить(МассивЭлементов, ".");
//	
//	Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
//		Если ТекущийШаг = "Объект" Тогда
//			Возврат РазобратьПутьКДаннымФормы(Источник.Объект, НовыйПуть);
//		ИначеЕсли ТекущийШаг = "Элементы" Тогда
//			Возврат РазобратьПутьКДаннымФормы(Источник.Элементы, НовыйПуть);
//		КонецЕсли;
//	ИначеЕсли ТекущийШаг = "ТекущиеДанные" Тогда
//		Возврат РазобратьПутьКДаннымФормы(Источник.ТекущиеДанные, НовыйПуть);
//	Иначе
//		Возврат РазобратьПутьКДаннымФормы(Источник[ТекущийШаг], НовыйПуть);
//	КонецЕсли;
//	
//	Возврат Источник;
//	
//КонецФункции
