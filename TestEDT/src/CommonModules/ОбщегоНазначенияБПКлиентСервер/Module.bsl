
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОШИБКАМИ

//// Функция убирает из текста сообщения служебную информацию
////
//// Параметры
////  ТекстСообщения, Строка, исходный текст сообщения//
//// Возвращаемое значение:
////   Строка
////
//Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

//	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
//	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");

//	Если ОкончаниеСлужебногоСообщения > 0
//		И НачалоСлужебногоСообщения > 0
//		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда

//		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
//		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));

//	КонецЕсли;

//	Возврат СокрЛП(ТекстСообщения);

//КонецФункции

//// Возвращает строковое представление незаполненного значения, принятое в конфигурации.
//// Возвращаемое значение:
////  Строка
//Функция ПредставлениеНезаполненногоЗначения() Экспорт
//	
//	Возврат "<...>";
//	
//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// МАТЕМАТИКА

//// Функция выполняет пропорциональное распределение суммы в соответствии
//// с заданными коэффициентами распределения
////
//// Параметры:
////		ИсхСумма - распределяемая сумма
////		МассивКоэф - массив коэффициентов распределения
////		Точность - точность округления при распределении. Необязателен.
////
////	Возврат:
////		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
////			суммы в соответствии с весом коэффициента (из массива коэффициентов)
////          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
////          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
////
//Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт

//	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
//		Возврат Неопределено;
//	КонецЕсли;

//	ИндексМакс = 0;
//	МаксЗнач   = 0;
//	РаспрСумма = 0;
//	СуммаКоэф  = 0;

//	Для К = 0 По МассивКоэф.Количество() - 1 Цикл

//		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);

//		Если МаксЗнач < МодульЧисла Тогда
//			МаксЗнач = МодульЧисла;
//			ИндексМакс = К;
//		КонецЕсли;

//		СуммаКоэф = СуммаКоэф + МассивКоэф[К];

//	КонецЦикла;

//	Если СуммаКоэф = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;

//	МассивСумм = Новый Массив(МассивКоэф.Количество());

//	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
//		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
//		РаспрСумма = РаспрСумма + МассивСумм[К];
//	КонецЦикла;

//	// Погрешности округления отнесем на коэффициент с максимальным весом
//	Если Не РаспрСумма = ИсхСумма Тогда
//		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
//	КонецЕсли;

//	Возврат МассивСумм;

//КонецФункции // РаспределитьПропорционально()

//// Предназначена для получения пустого значения заданного типа:
////	примитивного, или ссылочного. Используется
////
//// Параметры:
////	ЗаданныйТип   - тип, пустое значение которого нужно получить
////
//Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

//	Если ЗаданныйТип = Тип("Число") Тогда
//		Возврат 0;

//	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
//		Возврат "";

//	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
//		Возврат '00010101000000';

//	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
//		Возврат Ложь;

//	Иначе
//		Возврат Новый (ЗаданныйТип);

//	КонецЕсли;

//КонецФункции // ПустоеЗначениеТипа();

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МАССИВАМИ

//// Удаление из массива пустых элементов
////
//// Параметры:
////   МассивЭлементов - Массив
////
//Процедура УдалитьНеЗаполненныеЭлементыМассива(МассивЭлементов) Экспорт

//	Колво = МассивЭлементов.Количество();
//	Для н=1 По Колво Цикл
//		Если НЕ ЗначениеЗаполнено(МассивЭлементов[Колво-н]) Тогда
//			МассивЭлементов.Удалить(Колво-н);
//		КонецЕсли;
//	КонецЦикла;

//КонецПроцедуры

//// Функция проверяет, что две переданные даты находятся между разными элементами 
//// упорядоченного массива.
////
//// Параметры:
////	Дата1, Дата2 - две даты, которые необходимо проверить
////	ИнтервалДат - упорядоченный массив дат, каждый элемент которого определяет 
////					новую границу интервала
////
//Функция ДатыПринадлежатРазнымИнтервалам(Знач Дата1, Знач Дата2, ИнтервалДат) Экспорт

//	Результат = Ложь;

//	Индекс1 = -1;
//	
//	Индекс2 = -1;
//	
//	Дата1 = НачалоДня(Дата1);
//	Дата2 = НачалоДня(Дата2);
//	
//	ВГраницаИнтервалаДат = ИнтервалДат.ВГраница();
//	Для ТекИндекс = 0 По ВГраницаИнтервалаДат Цикл
//		ДатаИнтервала = НачалоДня(ИнтервалДат[ТекИндекс]);
//	
//		Если ДатаИнтервала <= Дата1 Тогда
//			Индекс1 = ТекИндекс;
//		КонецЕсли;
//		
//		Если ДатаИнтервала <= Дата2 Тогда
//			Индекс2 = ТекИндекс;
//		КонецЕсли;
//		
//	КонецЦикла;

//	Если Индекс1 <> Индекс2 Тогда
//		Результат = Истина;
//	Иначе
//		Результат = Ложь;
//	КонецЕсли;

//	Возврат Результат;

//КонецФункции

//// Функция возвращает строку, которая является конкатенацией строковых представлений всех элементов массива.
////
//Функция СтрокаИзМассива(ИсходныйМассив, Разделитель = "") Экспорт

//	Результат = "";
//	Для Каждого ЭлементМассива Из ИсходныйМассив Цикл
//		Результат = Результат + Разделитель + Строка(ЭлементМассива);
//	КонецЦикла;
//	
//	Возврат Результат;

//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

//Процедура УстановитьПараметрОрганизацияФункциональныхОпцийФормы(Форма, Организация, Период = Неопределено) Экспорт

//	ПараметрыФО = Новый Структура();
//	ПараметрыФО.Вставить("Организация", Организация);
//	Если Период <> Неопределено Тогда
//		ПараметрыФО.Вставить("Период", НачалоМесяца(Период));
//		// Приводим к началу месяца для того, чтобы сократить пространство кэшируемых значений.
//		// Параметр "Организация" используется в функциональных опциях, привязанных к регистрам сведений с периодичностью Месяц или реже.
//	КонецЕсли;
//	
//	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
//	
//КонецПроцедуры

//Процедура УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма) Экспорт
//	
//	УстановитьПараметрОрганизацияФункциональныхОпцийФормы(Форма, Форма.Объект.Организация, Форма.Объект.Дата);
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

//Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

//	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
//		Возврат "";

//	Иначе
//		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
//		      + СокрЛП(Валюта)
//		      + " = "
//		      + Курс + " "
//		      + СокрЛП(ВалютаРегламентированногоУчета)
//		      + ?(СформироватьСкобки, " )", "");
//	КонецЕсли;

//КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

//// Функция возвращает текст надписи "Цены и валюта".
////
//Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи) Экспорт
//	Перем ВалютаРегламентированногоУчета;
//	
//	ТекстНадписи = "";
//	
//	Если НЕ СтруктураНадписи.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета) Тогда
//		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
//	КонецЕсли;
//	
//	// Тип цен
//	Если СтруктураНадписи.Свойство("ТипЦен")
//		И ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
//		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип цен: %1 '"), СтруктураНадписи.ТипЦен);
//	КонецЕсли;
//		
//	// НДС в сумме
//	Если СтруктураНадписи.Свойство("НДСНеВыделять") 
//		И СтруктураНадписи.НДСНеВыделять Тогда 
//		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС не выделять'"), НСтр("ru = '(НДС не выделять)'"));
//	ИначеЕсли СтруктураНадписи.Свойство("ДокументБезНДС") 
//		И СтруктураНадписи.ДокументБезНДС Тогда 
//		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'Документ без НДС'"), НСтр("ru = '(Документ без НДС)'"));
//	ИначеЕсли СтруктураНадписи.Свойство("СуммаВключаетНДС") Тогда
//		Если СтруктураНадписи.СуммаВключаетНДС Тогда
//			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС в сумме'"), НСтр("ru = '(НДС в сумме)'")); 
//		Иначе
//			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС сверху'"), НСтр("ru = '(НДС сверху)'")); 
//		КонецЕсли;
//	КонецЕсли;

//	// Валюта
//	Если СтруктураНадписи.Свойство("ВалютаДокумента")
//		И ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента)
//		И (СтруктураНадписи.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
//		
//		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + НСтр("ru = '%1%2 = %3 %4'");
//		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			ТекстНадписи,
//			?(СтруктураНадписи.Кратность = 1, "", СтруктураНадписи.Кратность),
//			СтруктураНадписи.ВалютаДокумента,
//			СтруктураНадписи.Курс,
//			ВалютаРегламентированногоУчета);
//			
//	КонецЕсли;
//		
//	БезНДС = (СтруктураНадписи.Свойство("ДокументБезНДС") И СтруктураНадписи.ДокументБезНДС)
//			ИЛИ  СтруктураНадписи.Свойство("НДСНеВыделять") И СтруктураНадписи.НДСНеВыделять;

//	// Включение НДС в стоимость
//	Если СтруктураНадписи.Свойство("НДСВключенВСтоимость") И НЕ БезНДС Тогда
//		Если СтруктураНадписи.НДСВключенВСтоимость Тогда
//			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + НСтр("ru = 'НДС включен в стоимость'"); 
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(ТекстНадписи) Тогда 
//		Если СтруктураНадписи.Свойство("ТипЦен") Тогда
//			ТекстНадписи = НСтр("ru = 'Тип цен: <нет> '");
//		ИначеЕсли СтруктураНадписи.Свойство("ВалютаДокумента") Тогда
//			Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
//				ТекстНадписи = НСтр("ru = 'Валюта: %1'");
//				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, ВалютаРегламентированногоУчета);
//			Иначе
//				ТекстНадписи = НСтр("ru = 'Валюта: <нет> '");
//			КонецЕсли;
//		ИначеЕсли СтруктураНадписи.Свойство("НДСВключенВСтоимость")
//			И НЕ БезНДС Тогда
//			ТекстНадписи = НСтр("ru = 'НДС не включен в стоимость'");
//		КонецЕсли;
//	КонецЕсли;
//		
//	Возврат ТекстНадписи;

//КонецФункции

//// Функция возвращает текст надписи счетов доходов и расходов для вывода на форме.
////
//// Параметры:
////	СчетДоходов - ПланСчетовСсылка.Хозрасчетный
////	СчетРасходов - ПланСчетовСсылка.Хозрасчетный
////	Субконто - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
////
//// Возвращаемое значение:
////	Строка
////
//Функция СформироватьНадписьСчетаУчетаДоходовИРасходов(СчетДоходов, СчетРасходов, Субконто) Экспорт

//	Если ЗначениеЗаполнено(СчетДоходов) Тогда
//		ТекстСчетДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов).Код;
//	Иначе
//		ТекстСчетДоходов = ПредставлениеНезаполненногоЗначения();
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(СчетРасходов) Тогда
//		ТекстСчетРасходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасходов).Код;
//	Иначе
//		ТекстСчетРасходов = ПредставлениеНезаполненногоЗначения();
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Субконто) Тогда
//		ТекстСубконто = Строка(Субконто);
//	Иначе
//		ТекстСубконто = ПредставлениеНезаполненногоЗначения();
//	КонецЕсли;
//	
//	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		"%1, %2 %3", ТекстСчетДоходов, ТекстСчетРасходов, ТекстСубконто);
//	
//	Возврат ТекстНадписи;

//КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

//Функция СтруктураПараметровУчета() Экспорт

//	ПараметрыУчета = Новый Структура(
//		"ВестиПартионныйУчет,
//		|СкладскойУчет,
//		|ИспользоватьОборотнуюНоменклатуру,
//		|РазделятьПоСтавкамНДС,
//		|ВестиУчетПоСтатьямДДС,
//		|ВестиУчетПоРаботникам,
//		|УчетЗарплатыИКадровВоВнешнейПрограмме,
//		|КадровыйУчет,
//		|ВестиУчетНДСПоСпособам");
//		
//	Для Каждого ИмяПараметра Из ЭлементыЗатратНастройкаПараметровУчетаКлиентСервер.ПараметрыУчета() Цикл
//		ПараметрыУчета.Вставить(ИмяПараметра);
//	КонецЦикла;

//	Возврат ПараметрыУчета;
//	
//КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПИСКАМИ

//Функция ПолучитьСтруктуруОтбораСписка(КоллекцияЭлементовОтбора) Экспорт
//	
//	СтруктураОтбора = Новый Структура;
//	
//	Для каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
//		
//		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
//			
//			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
//				
//				СтруктураОтбора.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат СтруктураОтбора;
//	
//КонецФункции

//// Функция формирует список доступных способов расчета комиссионного вознаграждения, 
//// в зависимости от типа комиссиионного договора
////
//Функция СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения(ЭтоКомиссияПоЗакупке) Экспорт

//	СписокСпособов = Новый СписокЗначений;
//	
//	СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается"), НСтр("ru = 'Не рассчитывается'"));
//	
//	Если ЭтоКомиссияПоЗакупке Тогда
//		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи"), НСтр("ru = 'Процент от суммы закупки'"));
//	Иначе
//		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления"), НСтр("ru = 'Процент от разности сумм продажи и поступления'"));
//		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи"), НСтр("ru = 'Процент от суммы продажи'"));
//	КонецЕсли;

//	Возврат СписокСпособов;

//КонецФункции // СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения()


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

Процедура УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Организация, ВключатьОбособленныеПодразделения) Экспорт
	
	Ключ = СтрЗаменить(Строка(ВключатьОбособленныеПодразделения) + Организация.УникальныйИдентификатор(), "-", "");
	ПолеОрганизация = Ключ;
	
КонецПроцедуры

Процедура УстановитьЗначениеПолеПортфель(ПолеПортфель, Портфель) Экспорт
	
	// XG-726 {
	Если Не ЗначениеЗаполнено(Портфель) Тогда
		Портфель = ОбщегоНазначенияДУ.УстановитьОтборПоОсновномуПортфелюВОтчетах();
	КонецЕсли;
	// XG-726 }
	
	Ключ = СтрЗаменить("П" + Портфель.УникальныйИдентификатор(), "-", "");
	ПолеПортфель = Ключ;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// СТРОКОВЫЕ ФУНКЦИИ

//Функция ОставитьВСтрокеТолькоЦифры(ИсходнаяСтрока) Экспорт
//	
//	СтрокаРезультат = "";
//	
//	Для а = 1 По СтрДлина(ИсходнаяСтрока) Цикл
//		ТекущийСимвол = Сред(ИсходнаяСтрока, а, 1);
//		КодСимвола = КодСимвола(ТекущийСимвол);
//		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
//			СтрокаРезультат = СтрокаРезультат + ТекущийСимвол;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат СтрокаРезультат;
//	
//КонецФункции

//// Функция преобразует строку к множественному числу
////
//// Параметры: 
////  Слово1 - форма слова в ед числе      ("шкаф")
////  Слово2 - форма слова для числит 2-4  ("шкафа")
////  Слово3 - форма слова для числит 5-10 ("шкафов")
////  ЦелоеЧисло - целое число
////
//// Возвращаемое значение:
////  строку - одну из строк в зависимости от параметра ЦелоеЧисло
////
//// Описание:
////  Предназначена для формирования "правильной" подписи к числительным
////
//Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
//	
//	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
//	Если ЦелоеЧисло < 0 Тогда
//		ЦелоеЧисло = -1 * ЦелоеЧисло;
//	КонецЕсли;
//	
//	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
//		// для нецелых чисел - всегда вторая форма
//		Возврат Слово2;
//	КонецЕсли;
//	
//	// остаток
//	Остаток = ЦелоеЧисло%10;
//	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
//		// для второго десятка - всегда третья форма
//		Возврат Слово3;
//	ИначеЕсли Остаток=1 Тогда
//		Возврат Слово1;
//	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
//		Возврат Слово2;
//	Иначе
//		Возврат Слово3;
//	КонецЕсли;

//КонецФункции

//Функция ТолькоНулиВСтроке(Строка) Экспорт
//	
//	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
//	Возврат ПустаяСтрока(ЗначащиеСимволы);
//	
//КонецФункции

//Функция ПривестиСтроку(Строка, ОписаниеТипов) Экспорт
//	
//	Если ОписаниеТипов.Типы().Количество() <> 1 Тогда
//		Значение = Строка;
//	ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
//		Значение = Строка;
//	Иначе
//		
//		Если ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
//			// Приведение строки в формате "dd.MM.yyyy" к дате платформой не обеспечивается
//			Значение = ПривестиСтрокуКДате(Строка);
//		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Число")) Тогда
//			// Используем более гибкое приведение строки к числу, чем обеспечивается платформой.
//			// Символ "=" считаем допустимым десятичным разделителем.
//			Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Строка, "=", "."));
//		КонецЕсли;
//	
//		Если Значение = Неопределено Тогда
//			Значение = Строка;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	Возврат ОписаниеТипов.ПривестиЗначение(Значение);
//	
//КонецФункции

//// Приводит к дате строку в формате к дате дату в формате "dd.MM.yyyy" 
//Функция ПривестиСтрокуКДате(Строка) Экспорт
//	
//	Если ПустаяСтрока(Строка) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	ЭлементыДаты = СтрРазделить(Строка, ".");
//	Если ЭлементыДаты.Количество() <> 3 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	День  = ЭлементыДаты[0];
//	Месяц = ЭлементыДаты[1];
//	Год   = ЭлементыДаты[2];
//	
//	Если СтрДлина(Год) = 2 Тогда
//		// Преобразование выполняем самое простое. Это поведение может не соответствовать поведению платформы.
//		Год = "20" + Год;
//	КонецЕсли;
//	
//	Попытка
//		Возврат Дата(Год, Месяц, День);
//	Исключение
//		Возврат Неопределено;
//	КонецПопытки;
//	
//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОПИСАНИЕ МЕТАДАННЫХ

//Функция ПолноеИмяРеквизита(ИмяРеквизита, ИмяТабличнойЧасти = "") Экспорт
//	
//	ПолноеИмяРеквизита = ИмяРеквизита;
//	Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
//		ПолноеИмяРеквизита = ИмяТабличнойЧасти + "." + ПолноеИмяРеквизита;
//	КонецЕсли;
//	
//	Возврат ПолноеИмяРеквизита;
//	
//КонецФункции

//Функция РазложитьПолноеИмяРеквизита(ПолноеИмяРеквизита) Экспорт
//	
//	Результат = Новый Структура;
//	Результат.Вставить("Реквизит",       ПолноеИмяРеквизита);
//	Результат.Вставить("ТабличнаяЧасть", "");
//	
//	ЭлементыИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяРеквизита, ".", Истина);
//	Если ЭлементыИмени.Количество() = 2 Тогда
//		Результат.ТабличнаяЧасть = ЭлементыИмени[0];
//		Результат.Реквизит       = ЭлементыИмени[1];
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ КОНТРОЛЬ КОРРЕКТНОСТИ ВВОДА ИНН и КПП

//Процедура ОтобразитьРезультатПроверкиКонтрагентовВФорме(Форма, РезультатПроверкиСуществования = "") Экспорт
//	
//	МассивПодстрокИНН = Новый Массив;
//	
//	Если НЕ ПустаяСтрока(Форма.РезультатПроверкиИНН) Тогда
//		МассивПодстрокИНН.Добавить(Форма.РезультатПроверкиИНН);
//	ИначеЕсли НЕ Форма.Объект.ОбособленноеПодразделение Тогда
//		// Для физ лица или юр лица предупреждение пишем рядом с ИНН 
//		Если НЕ ПустаяСтрока(Форма.РезультатПроверкиНаДубли) Тогда
//			МассивПодстрокИНН.Добавить(Форма.РезультатПроверкиНаДубли);
//			МассивПодстрокИНН.Добавить("   ");
//		КонецЕсли;
//		МассивПодстрокИНН.Добавить(РезультатПроверкиСуществования);
//	КонецЕсли;
//	
//	Форма.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(МассивПодстрокИНН);
//	
//	МассивПодстрокКПП = Новый Массив;
//	
//	Если НЕ ПустаяСтрока(Форма.РезультатПроверкиКПП) Тогда
//		МассивПодстрокКПП.Добавить(Форма.РезультатПроверкиКПП);
//	КонецЕсли;
//	
//	Если Форма.Объект.ОбособленноеПодразделение Тогда
//		// Для обособленного подразделения предупреждение пишем рядом с КПП 
//		Если НЕ ПустаяСтрока(Форма.РезультатПроверкиНаДубли) Тогда
//			Если МассивПодстрокКПП.Количество() > 0 Тогда
//				МассивПодстрокКПП.Добавить("   ");
//				МассивПодстрокКПП.Добавить(Форма.РезультатПроверкиНаДубли);
//			КонецЕсли;
//		КонецЕсли;
//		Если МассивПодстрокКПП.Количество() > 0 Тогда
//			МассивПодстрокКПП.Добавить("   ");
//		КонецЕсли;
//		МассивПодстрокКПП.Добавить(РезультатПроверкиСуществования);
//	КонецЕсли;
//	
//	Форма.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(МассивПодстрокКПП);
//	
//КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПИСКОМ ДОСТУПНЫХ ОРГАНИЗАЦИЙ

//// Функция проверяет, что у текущего пользователя разрешено требуемое право доступа по RLS на указанную организацию.
////
//// Параметры:
////	Организация - СправочникСсылка.Организации - организация, доступ к которой нужно проверить
////  ПравоНаИзменение - Булево
////			- Истина - если нужно проверить, что у пользователя есть право на изменение;
////		 	- Ложь - если нужно проверить, что у него есть право на чтение
////Возвращаемое значение:
////  Булево:
//// 		Истина 	- Есть требуемое право, 
////		Ложь 	- в противном случае
////
//Функция ОрганизацияДоступна(Организация, ПравоНаИзменение = Ложь) Экспорт
//	
//	МассивДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);

//	Возврат МассивДоступныхОрганизаций.Найти(Организация) <> Неопределено;	
//	
//КонецФункции	

//// Удаляет из переданного списка организаций недоступные текущему пользователю
//// 
//// Параметры:
////	СписокОрганизаций - СписокЗначений - Список организаций, доступ к которым нужно проверить 
////		* СправочникСсылка.Организации 
////  ПравоНаИзменение - Булево 
////		Истина - если нужно проверить, что у пользователя есть право на изменение;
////		Ложь - если нужно проверить, что у него есть право на чтение
////
//Процедура УбратьНедоступныеОрганизацииИзСписка(СписокОрганизаций, ПравоНаИзменение = Ложь) Экспорт
//	
//	Если ТипЗнч(СписокОрганизаций) = Тип("СписокЗначений") Тогда
//		
//		НедоступныеОрганизации = Новый Массив;
//		
//		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);	
//		
//		Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
//			
//			Если ДоступныеОрганизации.Найти(ЭлементСписка.Значение) = Неопределено Тогда
//				
//				  НедоступныеОрганизации.Добавить(ЭлементСписка);
//				
//			КонецЕсли;	
//				
//		КонецЦикла;	
//		
//		Для Каждого ЭлементСписка Из НедоступныеОрганизации Цикл
//			
//			 СписокОрганизаций.Удалить(ЭлементСписка);
//			
//		КонецЦикла;	
//		
//	КонецЕсли;
//	
//КонецПроцедуры	

//#Область УстаревшийПрограммныйИнтерфейс

//// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаСтрока
//// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
////
//// Параметры:
////  ДлинаСтроки - число, длина строки.
////
//// Возвращаемое значение:
////  Объект "ОписаниеТипов" для строки указанной длины.
////
//Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Строка"));

//	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

//	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

//КонецФункции // ПолучитьОписаниеТиповСтроки()

//// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаЧисло
//// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
////
//// Параметры:
////  Разрядность 			- число, разряд числа.
////  РазрядностьДробнойЧасти - число, разряд дробной части.
////  ЗнакЧисла				- ДопустимыйЗнак, знак числа
////
//// Возвращаемое значение:
////  Объект "ОписаниеТипов" для числа указанной разрядности.
////
//Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

//	Если ЗнакЧисла = Неопределено Тогда
//		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
//	Иначе
//		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
//	КонецЕсли;

//	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

//КонецФункции // ПолучитьОписаниеТиповЧисла()

//// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаДата
//// Служебная функция, предназначенная для получения описания типов даты
////
//// Параметры:
////  ЧастиДаты - системное перечисление ЧастиДаты.
////
//Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Дата"));

//	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

//	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

//КонецФункции // ПолучитьОписаниеТиповДаты()

//// Устарела. Следует использовать ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения
//// Формирует текст сообщения, подставляя значения
//// параметров в шаблоны сообщений.
////
//// Параметры
////  ВидПоля       - Строка - может принимать значения:
////                  Поле, Колонка, Список
////  ВидСообщения  - Строка - может принимать значения:
////                  Заполнение, Корректность
////  Параметр1     - Строка - имя поля
////  Параметр2     - Строка - номер строки
////  Параметр3     - Строка - имя списка
////  Параметр4     - Строка - текст сообщения о некорректности заполнения
////
//// Возвращаемое значение:
////   Строка - текст сообщения
////
//Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
//	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

//	ТекстСообщения = "";

//	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
//		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
//			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
//		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
//			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
//                           |
//                           |%4'");
//		КонецЕсли;
//	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
//		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
//			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
//		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
//			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
//                           |
//                           |%4'");
//		КонецЕсли;
//	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
//		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
//			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
//		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
//			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
//                           |
//                           |%4'");
//		КонецЕсли;
//	КонецЕсли;

//	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

//КонецФункции // ПолучитьТекстСообщения()

//#КонецОбласти
