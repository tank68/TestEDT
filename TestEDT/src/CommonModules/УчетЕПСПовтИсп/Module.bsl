
// Функция получает настройки аналитики для переданного счета 
//
// Параметры:
//  СчетЕПС - ПланСчетовСыылка.ЕПС -переданный счет учета
//  Портфель - СправочникСсылка.Портфель - переданный портфель
//
// Возвращаемое  значение:
//  <Массив> Массив аналитик по счету и портфелю
//  Если по переданному портфелю настроек аналитики не нашлось, то производится поиск по пустому значению портфеля
//
Функция АналитикаЛицевогоСчетаЕПС(СчетЕПС, Портфель) Экспорт 

	МассивАналитик = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика1,
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика2,
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика3,
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика4,
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Аналитика5
	|ИЗ
	|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС
	|ГДЕ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет = &Счет
	|	И НастройкаАналитикиЛицевыхСчетовЕПС.Портфель = &Портфель";
	
	Запрос.УстановитьПараметр("Счет", СчетЕПС);
	Запрос.УстановитьПараметр("Портфель", Портфель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Для НомерАналитики = 1 по 5 Цикл 
			ТекущаяАналитика = Выборка["Аналитика"+НомерАналитики];
			Если ТекущаяАналитика <> ПланыВидовХарактеристик.ВидыСубконтоЕПС.ПустаяСсылка() Тогда 
				МассивАналитик.Добавить(ТекущаяАналитика);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(Портфель) Тогда 
			Возврат УчетЕПСПовтИсп.АналитикаЛицевогоСчетаЕПС(СчетЕПС, Справочники.Портфели.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивАналитик;
	
КонецФункции 

// Функция получает настройки аналитики для переданного счета 
//
// Параметры:
//  СчетЕПС - ПланСчетовСыылка.ЕПС -переданный счет учета
//  Портфель - СправочникСсылка.Портфель - переданный портфель
//
// Возвращаемое  значение:
//  <Массив> Массив аналитик по счету и портфелю
//  Если по переданному портфелю настроек аналитики не нашлось, то производится поиск по пустому значению портфеля
//
Функция МаскаЛицевогоСчетаЕПС(СчетЕПС, Портфель) Экспорт 

	МаскаЛицевогоСчета = Справочники.МаскаЛицевогоСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.МаскаЛицевогоСчета
	|ИЗ
	|	РегистрСведений.НастройкаАналитикиЛицевыхСчетовЕПС КАК НастройкаАналитикиЛицевыхСчетовЕПС
	|ГДЕ
	|	НастройкаАналитикиЛицевыхСчетовЕПС.Счет = &Счет
	|	И НастройкаАналитикиЛицевыхСчетовЕПС.Портфель = &Портфель";
	
	Запрос.УстановитьПараметр("Счет", СчетЕПС);
	Запрос.УстановитьПараметр("Портфель", Портфель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		МаскаЛицевогоСчета = Выборка.МаскаЛицевогоСчета;	
	Иначе
		Если ЗначениеЗаполнено(Портфель) Тогда 
			Возврат УчетЕПСПовтИсп.МаскаЛицевогоСчетаЕПС(СчетЕПС, Справочники.Портфели.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Возврат МаскаЛицевогоСчета;
	
КонецФункции

// Функция получает свойства счета 
//
// Параметры:
//  Счет - переданный счет учета
//
// Возвращаемое  значение:
//  свойства счета из плана счетов ЕПС
//
Функция СвойстваСчета(Счет) Экспорт
	
	ДанныеСчета = Новый Структура;
	
	ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Код"                            , Счет.Код);
	ДанныеСчета.Вставить("Родитель"                       , Счет.Родитель);
	ДанныеСчета.Вставить("Описание"                   	  , Счет.Описание);
	ДанныеСчета.Вставить("Вид"                            , Счет.Вид);
	ДанныеСчета.Вставить("Забалансовый"                   , Счет.Забалансовый);
	ДанныеСчета.Вставить("Парный"                         , Счет.Парный);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Счет.ЗапретитьИспользоватьВПроводках);
	ДанныеСчета.Вставить("Валютный"                       , Счет.Валютный);
	ДанныеСчета.Вставить("Количественный"                 , Счет.Количественный);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Счет.НалоговыйУчет);  //NFO-241
	ДанныеСчета.Вставить("КоличествоСубконто"             , Счет.ВидыСубконто.Количество());
	
	МаксКоличествоСубконто = БухгалтерскийУчетПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС();
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Счет.ВидыСубконто[Индекс - 1].Суммовой);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
		Иначе
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеСчета;
	
КонецФункции

//СТАРАЯ. Нужно будет удалить после реализации ASP-31669
// Функция возвращает эталонный счет для классификации и типа портфеля. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетАктиваПоТипуПортфеля(ТипАктиваЦБРФ, ВидАктива, ТипПортфеля) Экспорт 

	Возврат ПланыСчетов.ЕПС.СчетАктиваПоТипуПортфеля(ТипАктиваЦБРФ, ВидАктива, ТипПортфеля);
		
КонецФункции

// Функция возвращает эталонный счет для классификации и типа портфеля. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  Актив - СправочникСсылка.Активы.
//  Портфель - СправочникСсылка.ДУ_Портфели.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетАктиваПоПортфелю(Актив, Портфель, ТипПортфеля) Экспорт 

	Возврат ПланыСчетов.ЕПС.СчетАктиваПоПортфелю(Актив, Портфель, ТипПортфеля);
		
КонецФункции

// Функция возвращает счет для учета акрива без прекращения признания 
// по виду актива и типу портфеля. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетАктиваБезПрекращенияПризнания(ВидАктива, ТипПортфеля) Экспорт 

	Возврат ПланыСчетов.ЕПС.СчетАктиваБезПрекращенияПризнания(ВидАктива, ТипПортфеля);
		
КонецФункции

// Функция возвращает Структуру счетов финансового результата для продажи ЦБ. 
//
// Возвращаемое значение:
//	<Структура> .
//
Функция СчетPnLАктива(ВидАктива, ТипПортфеля) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетPnLАктива(ВидАктива, ТипПортфеля);
	
КонецФункции

// Функция возвращает Структуру счетов финансового результата для продажи ЦБ. 
//
// Возвращаемое значение:
//	<Структура> .
//
Функция СчетPnLАктиваПослеРеклассификации(ТипПортфеля) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетPnLАктиваПослеРеклассификации(ТипПортфеля);
	
КонецФункции

// Функция возвращает счетов финансового результата. 
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> .
//
Функция СубсчетPnLАктива(СчетPnL, ВидСубсчетаPnLАктива, Дата) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СубсчетPnLАктива(СчетPnL, ВидСубсчетаPnLАктива, Дата);
	
КонецФункции

// Функция возвращает счет переоценки для соответствующий передаваемому счету. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС);
КонецФункции

// Счет резерва обесценения по счету учета актива
//
//Параметры:
// СчетУчета - ПланыСчетовСсылка.ЕПС
//
//Возвращаемое значение: 
// ПланыСчетовСсылка.ЕПС, пустая ссылка в случае отсутствия соответствия
//
Функция СчетРезерваПодОбесценениеПоСчетуУчетаАктива(СчетУчетаАктиваЕПС) Экспорт
	Возврат ПланыСчетов.ЕПС.СчетРезерваПодОбесценениеПоСчетуУчетаАктива(СчетУчетаАктиваЕПС);		
КонецФункции

// Счета резерва обесценения по счету учета актива
//
//Возвращаемое значение: 
// Массив(ПланыСчетовСсылка.ЕПС)
//
Функция СчетаРезервовПодОбесценение() Экспорт
	Возврат ПланыСчетов.ЕПС.СчетаРезервовПодОбесценение();		
КонецФункции

// Счет резерва обесценения со счетами учета активов
//
//Параметры:
//
//Возвращаемое значение: 
//   Результат - ТаблицаЗначений - таблица с колонками:
//      * СчетУчетаЦБ - ПланыСчетовСсылка.ЕПС - счет учета актива
//      * СчетРезерва - ПланыСчетовСсылка.ЕПС - счет учета резерва под обесценение
//
Функция СчетаУчетаЦБСоСчетамиРезервовПодОбесценение() Экспорт
		
	Возврат ПланыСчетов.ЕПС.СчетаУчетаЦБСоСчетамиРезервовПодОбесценение();
	
КонецФункции

// Функция возвращает счет переоценки соответствующий передаваемому счету при переходе на ЕПС. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетПереоценкиПоСчетуУчетаАктиваПриПереходеНаЕПС(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетПереоценкиПоСчетуУчетаАктиваПриПереходеНаЕПС(СчетУчетаАктиваЕПС);
КонецФункции

// Функция возвращает счет прочей переоценки соответствующий передаваемому счету. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетПрочейПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетПрочейПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС);
КонецФункции

// Функция возвращает структуру счетов корректировки при первоначальном признании для соответствующий передаваемому счету. 
// Если реквизит не заполнен, то возвращается 0
//
// Параметры:
//  ВидАктива - ПланыВидовХарактеристикСсылка.ВидыАктивов.
//  ТипПортфеля - Перечисления.ТипыПортфелей.
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> -Счет соответствующий переданным параметрам, или Пустой счет если не найден.
//
Функция СчетКорректировкиПервоначальногоПризнанияПоСчетуУчетаАктива(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетКорректировкиПервоначальногоПризнанияПоСчетуУчетаАктива(СчетУчетаАктиваЕПС);
КонецФункции

// Функция возвращает Массив счетов переоценки для передаваемого счета. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетаПереоценкиПоСчетуУчетаАктива(СчетУчетаАктиваЕПС);
КонецФункции

// Функция возвращает Массив счетов переоценки при переходе на ЕПС для передаваемого счета. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаПереоценкиПоСчетуУчетаАктиваПриПереходеНаЕПС(СчетУчетаАктиваЕПС) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетаПереоценкиПоСчетуУчетаАктиваПриПереходеНаЕПС(СчетУчетаАктиваЕПС);
КонецФункции

// Функция возвращает Структуру счетов корректировки для передаваемого счета. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Структура> .
//
Функция СчетКорректировкиПоСчетуУчетаАктива(СчетУчета) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетКорректировкиПоСчетуУчетаАктива(СчетУчета);
		
КонецФункции

// Функция возвращает Структуру счетов корректировки при первоначальном признании для передаваемого счета. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Структура> .
//
Функция СчетКорректировкиПриПервоначальномПризнанииПоСчетуУчетаАктива(СчетУчета) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетКорректировкиПриПервоначальномПризнанииПоСчетуУчетаАктива(СчетУчета);
		
КонецФункции

// NFO-1048, массив счетов корректировки для переданного счета. 
//
// Параметры:
//  СчетУчета - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	Массив
//
Функция СчетаКорректировкиПоСчетуУчетаАктива(СчетУчета) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаКорректировкиПоСчетуУчетаАктива(СчетУчета);
	
КонецФункции
 
// Функция возвращает Структуру счетов главы Г по переданным параметрам. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Структура> .
//
Функция СчетаУчетаАктивовПоГлавеГ(КонтрагентНеРезидент, ЭтоСделкаПФИ, Актив) Экспорт
	Возврат ПланыСчетов.ЕПС.СчетаУчетаАктивовПоГлавеГ(КонтрагентНеРезидент, ЭтоСделкаПФИ, Актив);
КонецФункции

// Функция возвращает Тип портфеля по счету актива. 
//
// Параметры:
//  СчетАктива - <ПланСчетовСсылка.ЕПС> 
//
// Возвращаемое значение:
//	<ПеречислениеСсылка.ТипыПортфелей> - ТипПортфеля, или неопределено
//
Функция ТипПортфеляПоСчетуАктива(СчетАктива) Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ТипПортфеляПоСчетуАктива(СчетАктива);
		
КонецФункции

// Функция возвращает массив счетов учета актива. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция ВсеСчетаУчетаЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ВсеСчетаУчетаЦенныхБумаг();
		
КонецФункции

// Функция возвращает массив счетов учета актива. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаОблигаций() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаУчетаОблигаций();
		
КонецФункции

// Функция возвращает массив счетов учета долевых ЦБ. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаДолевыхЦБ() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаУчетаАкций();
		
КонецФункции

// Функция возвращает массив счетов учета долговых ЦБ. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаДолговыхЦБ() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаУчетаОблигаций();
		
КонецФункции

// Функция возвращает массив счетов учета долговых ЦБ по типу портфеля. 
//
// Параметры:
// 	ТипПортфеля - ПеречислениеСсылка ТипыПортфеля
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаДолговыхЦБ_ПоТипуПортфеля(ТипПортфеля) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетаУчетаОблигаций_ПоТипуПортфеля(ТипПортфеля);
КонецФункции

// Функция возвращает массив счетов учета актива. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаАкций() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаУчетаАкций();
		
КонецФункции

// Функция возвращает массив счетов учета долевых ЦБ по типу портфеля. 
//
// Параметры:
// 	ТипПортфеля - ПеречислениеСсылка ТипыПортфеля
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция СчетаУчетаДолевыхЦБ_ПоТипуПортфеля(ТипПортфеля) Экспорт 
	Возврат ПланыСчетов.ЕПС.СчетаУчетаДолевыхЦБ_ПоТипуПортфеля(ТипПортфеля);
КонецФункции

// Функция возвращает массив счетов отрицательной переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета отрицательной переоценки по всем видам актива
//
Функция СчетаОтрицательнойПереоценкиЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаОтрицательнойПереоценкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов положительной переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета положительной переоценки по всем видам актива
//
Функция СчетаПоложительнойПереоценкиЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаПоложительнойПереоценкиЦенныхБумаг();

КонецФункции

// Функция возвращает массив счетов переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета переоценки по всем видам актива
//
Функция СчетаПереоценкиЦенныхБумаг() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаПереоценкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов отрицательной переоценки активов при переходе на ЕПС. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета отрицательной переоценки по всем видам актива
//
Функция СчетаОтрицательнойПереоценкиЦенныхБумагПриПереходеНаЕПС() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаОтрицательнойПереоценкиЦенныхБумагПриПереходеНаЕПС();
	
КонецФункции

// Функция возвращает массив счетов положительной переоценки активов при переходе на ЕПС. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета положительной переоценки по всем видам актива
//
Функция СчетаПоложительнойПереоценкиЦенныхБумагПриПереходеНаЕПС() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаПоложительнойПереоценкиЦенныхБумагПриПереходеНаЕПС();

КонецФункции

// Функция возвращает массив счетов переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета переоценки по всем видам актива
//
Функция СчетаПереоценкиЦенныхБумагПриПереходеНаЕПС() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаПереоценкиЦенныхБумагПриПереходеНаЕПС();
	
КонецФункции

// Функция возвращает массив счетов отрицательной прочей переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета отрицательной переоценки по всем видам актива
//
Функция СчетаОтрицательнойПрочейПереоценкиЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаОтрицательнойПрочейПереоценкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов положительной прочей переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета положительной переоценки по всем видам актива
//
Функция СчетаПоложительнойПрочейПереоценкиЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаПоложительнойПрочейПереоценкиЦенныхБумаг();

КонецФункции

// Функция возвращает массив счетов прочей переоценки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета переоценки по всем видам актива
//
Функция СчетаПрочейПереоценкиЦенныхБумаг() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаПрочейПереоценкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов положительной корректировки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов положительной корректировки активов
//
Функция СчетаПоложительнойКорректировкиЦенныхБумаг() Экспорт  
	
	Возврат ПланыСчетов.ЕПС.СчетаПоложительнойКорректировкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов отрицательной корректировки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов положительной корректировки активов
//
Функция СчетаОтрицательнойКорректировкиЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаОтрицательнойКорректировкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов положительной корректировки при первоначальном признании активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов положительной корректировки активов
//
Функция СчетаПоложительнойКорректировкиПриПервоначальномПризнанииЦенныхБумаг() Экспорт  
	
	Возврат ПланыСчетов.ЕПС.СчетаПоложительнойКорректировкиПриПервоначальномПризнанииЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов отрицательной корректировки при первоначальном признании активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов положительной корректировки активов
//
Функция СчетаОтрицательнойКорректировкиПриПервоначальномПризнанииЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаОтрицательнойКорректировкиПриПервоначальномПризнанииЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов корректировки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов корректировки активов
//
Функция СчетаКорректировкиЦенныхБумаг() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаКорректировкиЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив счетов для валютной переоценки. 
//
// Параметры:
//  Портфель - СправочникСсылка.ДУ_Портфели
//
//	Валютные счета по группам 1-7 плана счетов за исключением:
//	- групп 506 и 507
//	- счета 50905 и 61301-61403
//
// Возвращаемое значение:
//	Массив - массив счетов для валютной переоценки
//
Функция ПереоцениваемыеСчетаГлавыА(Портфель) Экспорт
	
	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчета(Портфель).ПереоцениваемыеСчетаГлавыА;
	
КонецФункции
 
// Функция возвращает массив счетов для валютной переоценки. 
// 
// Параметры:
//  Портфель - СправочникСсылка.ДУ_Портфели
//
//	Группы 912-915, 917, 918
//
// Возвращаемое значение:
//	Массив - массив счетов для валютной переоценки
//
Функция ПереоцениваемыеСчетаГлавыВ(Портфель) Экспорт
	
	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчета(Портфель).ПереоцениваемыеСчетаГлавыВ;
	
КонецФункции

// Функция возвращает массив счетов для валютной переоценки. 
//
// Параметры:
//  Портфель - СправочникСсылка.ДУ_Портфели
//
//	Группы 933-937, 939-941, 963-967, 969-971
//
// Возвращаемое значение:
//	Массив - массив счетов для валютной переоценки
//
Функция ПереоцениваемыеСчетаГлавыГ(Портфель) Экспорт
	
	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчета(Портфель).ПереоцениваемыеСчетаГлавыГ;
	
КонецФункции

// Функция возвращает массив переоцениваемых счетов учета активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив переоцениваемых счетов учета активов по акциям и облигациям
//
Функция ПереоцениваемыеСчетаУчетаЦенныхБумаг() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчетаУчетаЦенныхБумаг();
	
КонецФункции

// Функция возвращает массив переоцениваемых счетов учета облигаций. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив переоцениваемых счетов учета актива облигаций
//
Функция ПереоцениваемыеСчетаУчетаОблигаций() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчетаУчетаОблигаций();
	
КонецФункции

// Функция возвращает массив переоцениваемых счетов учета акций. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов учета актива по всем видам актива
//
Функция ПереоцениваемыеСчетаУчетаАкций() Экспорт 

	Возврат ПланыСчетов.ЕПС.ПереоцениваемыеСчетаУчетаАкций();
	
КонецФункции

// Функция возвращает Массив счетов главы Г. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаТребованийПоПоставкеЦБ_Т1_2() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаТребованийПоПоставкеЦБ_Т1_2();

КонецФункции

// Функция возвращает Массив счетов главы Г. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаОбязательствПриПродажеЦБ_Т1_2() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаОбязательствПриПродажеЦБ_Т1_2();
	
КонецФункции

// Функция возвращает Массив счетов главы Г. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаТребованийПоПоставкеЦБ_Т3() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаТребованийПоПоставкеЦБ_Т3();
	
КонецФункции

// Функция возвращает Массив счетов главы Г. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетаОбязательствПриПродажеЦБ_Т3() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаОбязательствПриПродажеЦБ_Т3();
	
КонецФункции

// Функция возвращает Массив счетов главы Г. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> .
//
Функция СчетУчетаГлавыГПоСрочнымКонтрактам(КонтрагентНеРезидент, Контракт) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетУчетаГлавыГПоСрочнымКонтрактам(КонтрагентНеРезидент, Контракт);

КонецФункции

// Функция возвращает Массив счетов главы Г. 
// Если реквизит не заполнен, то возвращается пустая структура
//
// Параметры:
//  СчетУчетаАктиваЕПС - ПланыСчетовСсылка.ЕПС.
//
// Возвращаемое значение:
//	<Массив> .
//
Функция ВсеСчетаУчетаЦБ_НезавершенныхСделок() Экспорт
	
	Возврат ПланыСчетов.ЕПС.ВсеСчетаУчетаЦБ_НезавершенныхСделок();
	
КонецФункции

// Функция возвращает массив счетов PnL прошлого года. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов PnL прошлого года
//
Функция СчетаPnL_ПрошлогоГода() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаPnL_ПрошлогоГода();
		
КонецФункции

// Функция возвращает массив счетов PnL текущего года. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов PnL текущего года
//
Функция СчетаPnL_ТекущегоГода() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаPnL_ТекущегоГода();
		
КонецФункции

// Функция возвращает счет PnL другого года. 
//
// Параметры:
//
// Возвращаемое значение:
//	<СчетЕПС> - счет ЕПС
//
Функция СчетPnL_ДругогоГода(СчетPnL) Экспорт
	Возврат ПланыСчетов.ЕПС.СчетPnL_ДругогоГода(СчетPnL);	
КонецФункции

// Функция возвращает массив счетов подтвержденной прибыли\убытка прошлого года. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив подтвержденных счетов PnL прошлого года
//
Функция СчетаPnL_ПодтвержденныеПрибыльУбыток() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаPnL_ПодтвержденныеПрибыльУбыток();
		
КонецФункции

// Функция возвращает массив счетов нераспределенной прибыли/непокрытого убытка . 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов нераспределенной прибыли/непокрытого убытка 
//
Функция СчетаНераспределеннойПрибылиУбытка() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаНераспределеннойПрибылиУбытка();
		
КонецФункции

// Функция возвращает структуру счетов РЕПО. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Структура> - структура счетов РЕПО
//
Функция СчетаРЕПО(ВидРепо, ТипКонтрагентаЦБРФ) Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаРЕПО(ВидРепо, ТипКонтрагентаЦБРФ);
		
КонецФункции

// Функция возвращает СчетНачисленныхРасходов соответствующий счету расчетов по сделке РЕПО. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Счет> - счет ЕПС
//
Функция СчетаРЕПО_СчетНачисленныхРасходов_ПоСчетуРасчетов(СчетРасчетов) Экспорт 
	
	Возврат ПланыСчетов.ЕПС.СчетаРЕПО_СчетНачисленныхРасходов_ПоСчетуРасчетов(СчетРасчетов);
		
КонецФункции

// Функция возвращает массив счетов корректировки активов. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - массив счетов корректировки активов
//
Функция СчетаУчетаЦББезПрекращенияПризнания() Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаУчетаЦББезПрекращенияПризнания();
	
КонецФункции

// Функция возвращает ТипКонтрагентаЦБРФ соответствующий счету РЕПО. 
//
// Параметры:
//
// Возвращаемое значение:
//	<ТипКонтрагентаЦБРФ> - Перечисление.ТипКонтрагентаЦБРФ.Ссылка
//
Функция ТипКонтрагентаЦБРФ_ПоСчетуРЕПО(СчетРЕПО) Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ТипКонтрагентаЦБРФ_ПоСчетуРЕПО(СчетРЕПО);
		
КонецФункции 

// Функция возвращает все счета группы разрешенные в проводках
//
// Параметры:
//  НомерГруппы	 - Строка,Число	 - номер группы
// 
// Возвращаемое значение:
//  Массив - счета группы
//
Функция СчетаГруппы(НомерГруппы) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаГруппы(НомерГруппы);
	
КонецФункции

// Функция возвращает Соответствие счетов финансового результата текущего и прошлого года. 
//
// Параметры:
//
// Возвращаемое значение:
//	<Массив> - Соответствие, где Ключ счет текущего года, а значение счет прошлого года
//
Функция СвязьСчетовТекущегоИ_ПрошлогоГода() Экспорт 
	
	СоответствиеСчетов = Новый Соответствие;
	СчетаPnL_ТекущегоГода = ПланыСчетов.ЕПС.СчетаPnL_ТекущегоГода();	
	
	Для Каждого СтрокаСчетаТекущегоГода Из СчетаPnL_ТекущегоГода Цикл		
		СчетПрошлогоГода = ПланыСчетов.ЕПС.НайтиПоКоду("72" + Прав(СтрокаСчетаТекущегоГода.Код, СтрДлина(СтрокаСчетаТекущегоГода.Код) - 2));
		Если ЗначениеЗаполнено(СчетПрошлогоГода) Тогда 
			СоответствиеСчетов.Вставить(СтрокаСчетаТекущегоГода, СчетПрошлогоГода);	
		Иначе
			ВызватьИсключение("Нет соответствия счету "+ СтрокаСчетаТекущегоГода.Код);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеСчетов;
	
КонецФункции

Функция КорСчетВалютнойПереоценки(Счет, Портфель) Экспорт
	
	КорСчета = Новый Структура("КорСчетПоложительнойПереоценки, КорСчетОтрицательнойПереоценки");
	
	ПереоцениваемыеСчетаГлавыА = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыА(Портфель);
	ПереоцениваемыеСчетаГлавыВ = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыВ(Портфель);
	ПереоцениваемыеСчетаГлавыГ = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыГ(Портфель);
	
	Если ПереоцениваемыеСчетаГлавыА.Найти(Счет) <> Неопределено Тогда
		
		КорСчета.Вставить("КорСчетПоложительнойПереоценки", ПланыСчетов.ЕПС.ФинансовыеРезультаты_71511); 	
		КорСчета.Вставить("КорСчетОтрицательнойПереоценки", ПланыСчетов.ЕПС.ФинансовыеРезультаты_71512);
	
	ИначеЕсли ПереоцениваемыеСчетаГлавыВ.Найти(Счет) <> Неопределено Тогда
		
		КорСчета.Вставить("КорСчетПоложительнойПереоценки", ПланыСчетов.ЕПС.Внебаланс_99999); 	
		КорСчета.Вставить("КорСчетОтрицательнойПереоценки", ПланыСчетов.ЕПС.Внебаланс_99998);		
		
	ИначеЕсли ПереоцениваемыеСчетаГлавыГ.Найти(Счет) <> Неопределено Тогда
		
		КорСчета.Вставить("КорСчетПоложительнойПереоценки", ПланыСчетов.ЕПС.Внебаланс_99997); 	
		КорСчета.Вставить("КорСчетОтрицательнойПереоценки", ПланыСчетов.ЕПС.Внебаланс_99996);
		
	КонецЕсли;

	Возврат КорСчета;
	
КонецФункции	

// Функция возвращает суффикс счета финансового результата. 
//
// Возвращаемое значение:
//	<Строка> .
//
Функция СуффиксВалютнойПереоценкиПоКоррСчету(КоррСчет, Дата) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СуффиксВалютнойПереоценкиПоКоррСчету(КоррСчет, Дата);
	
КонецФункции

// Функция возвращает субсчет счета по суффиксу. 
//
// Возвращаемое значение:
//	<ПланСчетовСсылка.ЕПС> .
//
Функция СубсчетПоСуффиксу(Счет, Знач Суффикс, Дата = Неопределено) Экспорт 
	
	Если Дата <> Неопределено И Не РегистрыСведений.ГраницыРазделенияСчетовЕПСНаСубсчета.НужноРазделятьНаСубсчета(Счет, Дата) Тогда
		Суффикс = ".00";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Суффикс) Или Не ЗначениеЗаполнено(Счет) Тогда 
		Возврат Счет;
	КонецЕсли;
	
	Если Счет.Предопределенный Тогда 
	    Имя = Счет.ИмяПредопределенныхДанных;
		Попытка
	    	СубсчетВалютнойПереоценки = ПланыСчетов.ЕПС[Имя + СтрЗаменить(Суффикс, ".", "_")];	
		Исключение
			СубсчетВалютнойПереоценки = Неопределено;
		КонецПопытки;
	Иначе 
		КодСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Код");
		СубсчетВалютнойПереоценки = ПланыСчетов.ЕПС.НайтиПоКоду(КодСчета + Суффикс, Счет);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СубсчетВалютнойПереоценки) Тогда 
		СубсчетВалютнойПереоценки = Счет;
	КонецЕсли;
	
	Возврат СубсчетВалютнойПереоценки;

КонецФункции


Функция ГлаваСчетаВалютнойПереоценки(Счет, Портфель) Экспорт
		
	ПереоцениваемыеСчетаГлавыА = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыА(Портфель);
	ПереоцениваемыеСчетаГлавыВ = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыВ(Портфель);
	ПереоцениваемыеСчетаГлавыГ = УчетЕПСПовтИсп.ПереоцениваемыеСчетаГлавыГ(Портфель);
	
	Если ПереоцениваемыеСчетаГлавыА.Найти(Счет) <> Неопределено Тогда
		
		Возврат "А";
		
	ИначеЕсли ПереоцениваемыеСчетаГлавыВ.Найти(Счет) <> Неопределено Тогда
		
		Возврат "В";		
		
	ИначеЕсли ПереоцениваемыеСчетаГлавыГ.Найти(Счет) <> Неопределено Тогда
		
		Возврат "Г";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

	
КонецФункции

Функция СчетЕПСПоНомеру(НомерСчета)	Экспорт
	
	Возврат ПланыСчетов.ЕПС.НайтиПоКоду(НомерСчета);
	
КонецФункции

// Функция возвращает значение реквизита ТипКлиентаДУ для портфеля
//
// Параметры:
//  Портфель - СправочникСсылка.Портфель - Портфель.
Функция ТипКлиентаДУ(Портфель) Экспорт 
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Портфель, "ТипКлиентаДУ");
КонецФункции

// Функция возвращает символы ОФР по ЦБ
//
// Параметры:
//  Портфель  - СправочникСсылка.ДУ_Портфели  
//  ТипАктиваЦБРФ - ПланВидовХарактеристикСсылка.КлассификаторЦБ	
//  ТипПортфеля	  - ПеречислениеСсылка.ТипыПортфелей	  
// 
// Возвращаемое значение:
//  Структура - Поля структуры: ДоходОтПереоценки, РасходОтПереоценки, ПереоценкаТ3, ДоходОтПродажи, РасходОтПродажи, ДоходОтАмортизацииДисконта,
//                              РасходОтАмортизацииПремии, РасходПоКомиссиям, ДоходПоКупону, ДоходПоДивидендам, КорректировкиПоЭСП 
//
//- Если символов по переданному типу клиента ДУ не найдено, то возвращается настройка с пустым типом клиента ДУ.
//- Если и символов с пустым типом клиента ДУ не найдено, то возвращается структура с пустыми ссылками.
//
Функция СимволыОФРПоЦБ(Портфель, Актив, ТипПортфеля) Экспорт
	
	Возврат РегистрыСведений.СимволыОФРПоЦБ.СимволыОФР(Портфель, Актив, ТипПортфеля);
	
КонецФункции

// Функция возвращает символы ОФР по сделкам РЕПО
//
// Параметры:
//  Портфель  - СправочникСсылка.ДУ_Портфели  	
//  ВидОперации	  - ПеречислениеСсылка.ВидыОперацийСделкаРЕПО
//  ТипКонтрагентаЦБРФ - ПеречислениеСсылка.ТипыКонтрагентовЦБРФ
// 
// Возвращаемое значение:
//  Структура - Поля структуры: РасходПоКомиссиям, ПроцентныйДоход, ПроцентныйРасход
//
//- Если символов по переданному типу клиента ДУ не найдено, то возвращается настройка с пустым типом клиента ДУ.
//- Если и символов с пустым типом клиента ДУ не найдено, то возвращается структура с пустыми ссылками.
//
Функция СимволыОФРПоСделкамРЕПО(Портфель, ВидОперации, ТипКонтрагентаЦБРФ) Экспорт
	
	Возврат РегистрыСведений.СимволыОФРПоСделкамРЕПО.СимволыОФР(Портфель, ВидОперации, ТипКонтрагентаЦБРФ);
	
КонецФункции

// Функция возвращает символы ОФР по депозитам
//
// Параметры:
//  Портфель - СправочникСсылка.ДУ_Портфели 
//  Резидент - Булево		  
//  МНО - Булево		  
// 
// Возвращаемое значение:
//  Структура - Поля структуры: ДоходПоНачислениюПроцентов, КорректировкиПоЭСП
//
//- Если символов по переданному типу клиента ДУ не найдено, то возвращается настройка с пустым типом клиента ДУ.
//- Если и символов с пустым типом клиента ДУ не найдено, то возвращается структура с пустыми ссылками.
//
Функция СимволыОФРПоДепозитам(Портфель, Резидент, МНО) Экспорт
	
	Возврат РегистрыСведений.СимволыОФРПоДепозитам.СимволыОФР(Портфель, Резидент, МНО);
	
КонецФункции

// Функция возвращает символы ОФР по валютным операциям
//
// Параметры:
//  Портфель  - СправочникСсылка.ДУ_Портфели  
//  ТипАктиваЦБРФ - ПланВидовХарактеристикСсылка.КлассификаторЦБ	
//  ТипПортфеля	  - ПеречислениеСсылка.ТипыПортфелей	  
// 
// Возвращаемое значение:
//  Структура - Поля структуры: ДоходОтПереоценки, РасходОтПереоценки, ПереоценкаТ3, ДоходОтПродажи, РасходОтПродажи, ДоходОтАмортизацииДисконта,
//                              РасходОтАмортизацииПремии, РасходПоКомиссиям, ДоходПоКупону, ДоходПоДивидендам, КорректировкиПоЭСП 
//
//- Если символов по переданному типу клиента ДУ не найдено, то возвращается настройка с пустым типом клиента ДУ.
//- Если и символов с пустым типом клиента ДУ не найдено, то возвращается структура с пустыми ссылками.
//
Функция СимволыОФРПоВалютнымОперациям(Портфель, Валюта) Экспорт
	
	Возврат РегистрыСведений.СимволыОФРПоВалютнымОперациям.СимволыОФР(Портфель, Валюта);
	
КонецФункции

// Функция возвращает символы ОФР по срочным контрактам
//
// Параметры:
//  Портфель  - СправочникСсылка.ДУ_Портфели
//  Актив  - СправочникСсылка.Активы
// 
// Возвращаемое значение:
//  Структура - Поля структуры: ОтражениеВариационнойМаржи
//
Функция СимволыОФРПоСрочнымКонтрактам(Портфель, Актив) Экспорт
	
	Возврат РегистрыСведений.СимволыОФРПоСрочнымКонтрактам.СимволыОФР(Портфель, Актив);
	
КонецФункции

// Функция возвращает часть облигации на которой учитывается купленный купонный доход 
//
// Параметры:
//  ВидУчетаКупленногоКупонногоДохода  - ПеречислениеСсылка.ВидыУчетаКупленногоКупонногоДохода  
//
// Возвращаемое значение:
//  ЧастьОблигации  - ПеречислениеСсылка.ЧастиЦенныхБумаг  
//
Функция ЧастьОблигацииПоВидуУчетаКупленногоКупонногоДохода(ВидУчетаКупленногоКупонногоДохода) Экспорт 
	Возврат Перечисления.ВидыУчетаКупленногоКупонногоДохода.ЧастьОблигации(ВидУчетаКупленногоКупонногоДохода);
КонецФункции

Функция ПравилаКонвертацииАналитики(ТипИсточника, Портфель, Дата) Экспорт 
	Возврат РегистрыСведений.НастройкиПравилКонвертацииАналитики.ПравилаКонвертацииАналитики(ТипИсточника, Портфель, Дата);
КонецФункции // ПравилаКонвертацииАналитики()

// Функция проверяет возможно ли проведение по виду актива
//
// Параметры:
//  ВидАктива  - ПланыВидовХарактеристикСсылка.ВидыАктивов.  
//
// Возвращаемое значение:
//  Булево   
//
Функция ВидАктиваИспользуемыйВПроводкахЕПС(ПроверяемыйВидАктива) Экспорт 
	
	МассивРазрешенныхВидовАктива = Новый Массив;
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.Акции);
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.Облигации);
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.СтруктурныеНоты);
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.ПаиПИФ);
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.ДолиУК);
	МассивРазрешенныхВидовАктива.Добавить(ПланыВидовХарактеристик.ВидыАктивов.ИпотечныеСертификатыУчастия);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыАктивов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ВидыАктивов КАК ВидыАктивов
		|ГДЕ
		|	ВидыАктивов.Ссылка В ИЕРАРХИИ(&РазрешенныеВидыАктива)
		|	И ВидыАктивов.Ссылка = &ПроверяемыйВидАктива";
	
	Запрос.УстановитьПараметр("ПроверяемыйВидАктива", ПроверяемыйВидАктива);
	Запрос.УстановитьПараметр("РазрешенныеВидыАктива", МассивРазрешенныхВидовАктива);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция проверяет является ли переданный счет счетом из группы Финансовых результатов
//
// Параметры:
//  СчетЕПС  - ПланыСчетовСсылка.ЕПС.  
//
// Возвращаемое значение:
//  Булево   
//
Функция НаСчетеЕстьСимволОФР(СчетЕПС) Экспорт 
	
	Возврат ПланыСчетов.ЕПС.НаСчетеЕстьСимволОФР(СчетЕПС)
	
КонецФункции

Функция ТипыПортфелейПоКорректировкеЭСП(Портфель, Дата) Экспорт
	
	ПВХ_Параметры = ПланыВидовХарактеристик.ПараметрыПортфеля;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_AFS);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_LR);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_DFPL);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_HTM);
	
	ЗначенияПараметров = РегистрыСведений.ЗначенияПараметровПортфеля.ЗначенияПараметровПортфеля(Портфель, МассивПараметров, Дата);
	
	СписокУчитываемыхТиповПортфелей = Новый Массив;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_AFS) = Перечисления.ВариантыКорректировкиЭСП.Корректировать Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыДляПерепродажи);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_LR) = Перечисления.ВариантыКорректировкиЭСП.Корректировать Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыПоАмортизированнойСтоимости);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_DFPL) = Перечисления.ВариантыКорректировкиЭСП.Корректировать Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыПоСправедливойСтоимостиПрибыль);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_HTM) = Перечисления.ВариантыКорректировкиЭСП.Корректировать Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.ИнвестицииДоПогашения);
	КонецЕсли;
	
	Возврат СписокУчитываемыхТиповПортфелей;
	
КонецФункции

Функция ТипыПортфелейПоКорректировкеЭСПСКритериемСущественности(Портфель, Дата) Экспорт
	
	ПВХ_Параметры = ПланыВидовХарактеристик.ПараметрыПортфеля;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_AFS);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_LR);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_DFPL);
	МассивПараметров.Добавить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_HTM);
	
	ЗначенияПараметров = РегистрыСведений.ЗначенияПараметровПортфеля.ЗначенияПараметровПортфеля(Портфель, МассивПараметров, Дата);
	
	СписокУчитываемыхТиповПортфелей = Новый Массив;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_AFS) = Перечисления.ВариантыКорректировкиЭСП.КорректироватьПоКритериюСущественности Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыДляПерепродажи);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_LR) = Перечисления.ВариантыКорректировкиЭСП.КорректироватьПоКритериюСущественности Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыПоАмортизированнойСтоимости);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_DFPL) = Перечисления.ВариантыКорректировкиЭСП.КорректироватьПоКритериюСущественности Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.АктивыПоСправедливойСтоимостиПрибыль);
	КонецЕсли;
	
	Если ЗначенияПараметров.Получить(ПВХ_Параметры.КорректировкаПоЭСПОблигации_HTM) = Перечисления.ВариантыКорректировкиЭСП.КорректироватьПоКритериюСущественности Тогда
		СписокУчитываемыхТиповПортфелей.Добавить(Перечисления.ТипыПортфелей.ИнвестицииДоПогашения);
	КонецЕсли;
	
	Возврат СписокУчитываемыхТиповПортфелей;
	
КонецФункции

// Функция возвращает массив типов портфеля для стандарта учета по портфелю на дату
//
// Параметры:
//   Портфель – СправочникСсылка.ДУ_Портфели - портфель для получения остатков       
//   Дата – Дата - дата получения остатков
//       
// Возвращаемое значение:
//   Результат - Массив - массив элементами которого являются значения перечисления ТипыПортфелей:
Функция ТипыПортфелейПоСтандартуУчета(Портфель, Дата) Экспорт 

	Возврат Перечисления.СтандартыУчета.ТипыПортфелейПоСтандартуУчета(Портфель, Дата);
	
КонецФункции	
	
Функция ПараметрыАктиваЕПС(Актив, Портфель, Дата) Экспорт
	Возврат РегистрыСведений.ПараметрыАктивовЕПС.ПараметрыАктиваЕПС(Актив, Портфель, Дата);
КонецФункции

Функция МаскаПредставленияЛицевогоСчета(СчетВторогоПорядка, Портфель) Экспорт
	
	МаскаСчета = УчетЕПСПовтИсп.МаскаЛицевогоСчетаЕПС(СчетВторогоПорядка, Портфель);
	Если Не ЗначениеЗаполнено(МаскаСчета) Тогда
		Возврат ПланыСчетов.ЕПС.МаскаПредставленияЛицевогоСчета(СчетВторогоПорядка);
	КонецЕсли;
	
	МаскаПредставленияСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МаскаСчета, "МаскаПредставленияСчета");
	Если Не ЗначениеЗаполнено(МаскаПредставленияСчета) Тогда
		Возврат ПланыСчетов.ЕПС.МаскаПредставленияЛицевогоСчета(СчетВторогоПорядка);
	КонецЕсли;
	
	
	Возврат МаскаПредставленияСчета;
	
КонецФункции

Функция ДлинаЛицевогоСчета() Экспорт
	
	ДлинаЛицевогоСчета = 25;
				
	Возврат ДлинаЛицевогоСчета;
	
КонецФункции

Функция СчетаУчетаПроцентовЧерез_20613() Экспорт 
	
	СчетаУчетаПроцентовЧерез_20613 = Новый Массив;
	СчетаУчетаПроцентовЧерез_20613.Добавить(ПланыСчетов.ЕПС.ДенежныеСредства_20603);
	СчетаУчетаПроцентовЧерез_20613.Добавить(ПланыСчетов.ЕПС.ДенежныеСредства_20604);
	
	Возврат СчетаУчетаПроцентовЧерез_20613;
	
КонецФункции

Функция ОсновнойМакетСимволовОФР() Экспорт
	
	ОсновнойМакетСимволовОФР = "НегосударственныеПенсионныеФонды_487П_1";
	
	ЗначениеКонстанты = Константы.ОсновнойМакетСимволов.Получить();
	Если ЗначениеКонстанты = Перечисления.МакетыСимволовОФР.НегосударственныеПенсионныеФонды_487П_1 Тогда  
		ОсновнойМакетСимволовОФР = "НегосударственныеПенсионныеФонды_487П_1";	
	ИначеЕсли ЗначениеКонстанты = Перечисления.МакетыСимволовОФР.ДеятельностьСубъектовСтраховогоДела_487П_2 Тогда  
		ОсновнойМакетСимволовОФР = "ДеятельностьСубъектовСтраховогоДела_487П_2";
	ИначеЕсли ЗначениеКонстанты = Перечисления.МакетыСимволовОФР.НекредитныхФинОрганизаций_487П_3 Тогда  
		ОсновнойМакетСимволовОФР = "НекредитныхФинОрганизаций_487П_3";		
	ИначеЕсли ЗначениеКонстанты = Перечисления.МакетыСимволовОФР.НекредитныхФинОрганизаций_487П_4 Тогда  
		ОсновнойМакетСимволовОФР = "НекредитныхФинОрганизаций_487П_4";		
	КонецЕсли;	
	
	Возврат ОсновнойМакетСимволовОФР;
	
КонецФункции

Функция РасходыПоАдреснымСделкамОтражатьЧерезКонтрпартнера(Портфель, Дата) Экспорт
	
	РасходыПоАдреснымСделкамОтражатьЧерезКонтрпартнера = УправлениеПараметрамиПортфеляПовтИсп.ПолучитьПараметрПортфеля(Портфель, 
										ПланыВидовХарактеристик.ПараметрыПортфеля.РасходыПоАдреснымСделкамОтражатьЧерезКонтрпартнера, 
										Дата) = Истина;
										
	Возврат РасходыПоАдреснымСделкамОтражатьЧерезКонтрпартнера;									
	
КонецФункции

Функция ПассивныйПарныйСчет(Счет) Экспорт
	
	Результат = Счет;
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	Если СвойстваСчета.Парный И СвойстваСчета.Вид = ВидСчета.Активный Тогда	
		Результат = РегистрыСведений.ПарныеСчетаЕПС.ПарныйСчет(Счет);	
	КонецЕсли; 

	Возврат Результат;

КонецФункции

Функция АктивныйПарныйСчет(Счет) Экспорт
	
	Результат = Счет;
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	Если СвойстваСчета.Парный И СвойстваСчета.Вид = ВидСчета.Пассивный Тогда	
		Результат = РегистрыСведений.ПарныеСчетаЕПС.ПарныйСчет(Счет);	
	КонецЕсли; 

	Возврат Результат;

КонецФункции 

Функция ВидСчетаДоходовРасходов(СчетЕПС) Экспорт
	Возврат ПланыСчетов.ЕПС.ВидСчетаДоходовРасходов(СчетЕПС);
КонецФункции

// Функция возвращает массив счетов переоценки активов по типу портфеля. 
//
// Параметры:
// 	ТипПортфеля - ПеречислениеСсылка ТипыПортфеля
// Возвращаемое значение:
//	<Массив> - массив счетов переоценки активов по всем видам актива
//
Функция СчетаПереоценки_ПоТипуПортфеля(ТипПортфеля) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаПереоценки_ПоТипуПортфеля(ТипПортфеля);
	
КонецФункции

// Функция возвращает счет второго порядка 
Функция СчетВторогоПорядка(Знач СчетЕПС) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетВторогоПорядка(СчетЕПС);
	
КонецФункции

Функция АктивыСКритериемСущественности(Портфель, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивыСКритериемСущественностиСрезПоследних.Актив,
	|	АктивыСКритериемСущественностиСрезПоследних.Партия
	|ИЗ
	|	РегистрСведений.АктивыСКритериемСущественности.СрезПоследних(&Дата, Портфель = &Портфель) КАК АктивыСКритериемСущественностиСрезПоследних
	|ГДЕ
	|	АктивыСКритериемСущественностиСрезПоследних.Критерий";
	
	Запрос.УстановитьПараметр("Портфель", 	Портфель);
	Запрос.УстановитьПараметр("Дата", 		Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	        
	Возврат Результат;
	
КонецФункции

Функция НеОборотныеСубконто(Счет) Экспорт
	
	НеОборотныеСубконто = Новый Массив;
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто + "ТолькоОбороты"] = Ложь Тогда
			НеОборотныеСубконто.Добавить(СвойстваСчета["ВидСубконто" + НомерСубконто]);
		КонецЕсли; 
	КонецЦикла;
	Возврат НеОборотныеСубконто;

КонецФункции

Функция ЕстьСубконтоЧастиЦБНаСчетахРезервов() Экспорт 
	
	Возврат ПланыСчетов.ЕПС.ЕстьСубконтоЧастиЦБНаСчетахРезервов();
	
КонецФункции

// Функция возвращает все счета по родителю, разрешенные в проводках
//
// Параметры:
//  СчетРодитель	 - СчетЕПС.Ссылка
// 
// Возвращаемое значение:
//  Массив - счета по родителю
//
Функция СчетаПоРодителю(СчетРодитель) Экспорт
	
	Возврат ПланыСчетов.ЕПС.СчетаПоРодителю(СчетРодитель);
	
КонецФункции

//Функция возвращает Статью ДДС да дату, в зависимости от вида операции и портфеля
//
//	Параметры
//
//	Обязательные:
//  Дата - Дата среза последних
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийДляСтатейДДС
//  Портфель - СправочникСсылка.ДУ_Портфели 
//
Функция СтатьяДДСПоВидуОперации(Дата, ВидОперации, Портфель) Экспорт
	
	Отбор = Новый Структура("ВидОперации, Портфель", ВидОперации, Портфель);
	СтатьиДДС = РегистрыСведений.МатрицаСтатейДДС.СрезПоследних(КонецДня(Дата), Отбор);
  
	Если СтатьиДДС.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Портфель) Тогда 
			Возврат УчетЕПСПовтИсп.СтатьяДДСПоВидуОперации(Дата, ВидОперации, Справочники.Портфели.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Возврат СтатьиДДС[0].СтатьяДДС;		
	КонецЕсли;
	
КонецФункции