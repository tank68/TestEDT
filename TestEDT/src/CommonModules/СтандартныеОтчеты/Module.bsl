////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
// 

//Функция получает текст, расположенный между маркерами
//
// Параметры:
//  Текст - исходный текст
//  МаркерНачало - начальный маркер
//  МаркерКонец - конечный маркер
//
// Возвращаемое значение:
//  текст, расположенный между маркерами
Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец) Экспорт
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

//Функция получает свойство поля из доступных полей выбора
//
// Прараметры:
//  ЭлементСтруктура - структура элемента
//  Поле - выбранное поле
//  Свойство - свойство поля, по умолчанию используется свойство "Заголовок"
//
// Возвращаемое значение:
//  Результат - свойство поля
//
Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция получает идентификатор отчета
//
// Параметры:
//  ОтчетОбъект - исходный отчет
//
// Возвращаемое значение:
//  имя отчета
Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

//Функция определяет количество показателей отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//
// Возвращаемое значение:
//  КоличествоПоказателей - количество показателей
Функция КоличествоПоказателей(ОтчетОбъект) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
		Если ОтчетОбъект["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

//Процедура добавляет дополнительные поля в компоновщик настроек
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек
//
// Возвращаемое значение:
//  дополнительные поля в компоновщике настроек
Процедура ДобавитьДополнительныеПоля(ОтчетОбъект) Экспорт
	
	Если ОтчетОбъект.РазмещениеДополнительныхПолей = 0 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	ИначеЕсли ОтчетОбъект.РазмещениеДополнительныхПолей = 1 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	КонецЕсли;
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(ОтчетОбъект.КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ОтчетОбъект.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//процедура добавляет группировку по периоду в параметры отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  Структура - структвра параметров
//
// Возвращаемое значение:
//  в параметры отчета добавляется группировка по периоду
Процедура ДобавитьГруппировкуПоПериоду(ОтчетОбъект, Структура) Экспорт
	
	Если ОтчетОбъект.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ОтчетОбъект.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ОтчетОбъект.Периодичность = 2 Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура добавляет отбор по Договору ДУ
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек отчета
//  ВПользовательскиеНастройки - флаг для добавления отбора в пользовательские настройки
//
// Возвращаемое значение:
//  отбор по договору ДУ добавлен в параметры отчета
Процедура ДобавитьОтборПоОрганизации(ОтчетОбъект, ВПользовательскиеНастройки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетОбъект.Портфель) Тогда
		НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Портфель", ОтчетОбъект.Портфель,,, ВПользовательскиеНастройки);
		НовыйОтбор.Представление = "###ОтборПоПортфелю###"; 
		
	КонецЕсли;
	
КонецПроцедуры

//Функция получает макет шапки отчета
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  Тело - тело отчета
//  ТипМакета - тип макета
//
// Возвращаемое значение:
//  макет шапки
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;			
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Функция получает макет подвала отчета
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  Тело - тело отчета
//
// Возвращаемое значение:
//  макет подвала
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

//Функция получает макет группировки по полю группировки
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  ПолеГруппировки - поле группировки
//  ИскатьВДетальныхЗаписях - искать в детальных записях
//  ТипМакета - тип макета
//
// Возвращаемое значение:
//  макет группировки
Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура для установки настроек по умолчанию
//
// Параметры:
//  ФормаОтчета - форма отчета
//
// Возвращаемое значение:
//  устанавливает настройки по умолчанию
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Если ФормаОтчета.Отчет.Свойство("НачалоПериода") Тогда
		ФормаОтчета.Отчет.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ФормаОтчета.Отчет.Свойство("КонецПериода") Тогда
		ФормаОтчета.Отчет.КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ФормаОтчета.Отчет.Свойство("ПоказательБУ") Тогда
		ФормаОтчета.Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Попытка 
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//Функция получает список счетов по субсчетам
//
// Параметры:
//  Таблица - таблица счетов
//
// Возвращаемое значение:
//  СписокСчетовПоСубсчетам - список счетов по субсчетам
Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

//Функция копирует параметр схемы компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных - схема компоновки данных
//  Приемник - имя нового параметра
//  Источник - имя параметра источника
//  ЗначениеПриемника - значение приемника
//
// Возвращаемое значение:
//  НовыйПараметр - новый пораметр в системе компоновки данных
Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Функция получает текст Портфеля
//
// Параметры:
//  ОтчетОбъект - отчет объект
//  Организация - Портфель
//  ВключатьОбособленныеПодразделения - включать обособленные подразделения
//
// Возвращаемое значение:
//  функция всегда возвращает строку "ОСВ"
Функция ПолучитьТекстПортфеля(ОтчетОбъект = Неопределено, Портфель = Неопределено) Экспорт
		
	Возврат ?(ЗначениеЗаполнено(Портфель), Портфель.ПолноеНаименование, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
// 

//Процедура заполняет табличный документ по переданным параметрам
//
//Параметры:
// ОтчетОбъект - СправочникСсылка.Отчет
// Результат - ТабличныйДокумент 
// ДанныеРасшифровки - Строка
// Схема - Строка - АдресВременногоХранилища
// ВыводитьПолностью - Булево
//
//Возвращаемое значение:
// <Отсутствует>
Процедура ВывестиОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, Схема = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Схема) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(Схема) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Схема);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = Схема;
	КонецЕсли;
	ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = ТекущиеНастройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = ТекущиеНастройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;

	Результат.Очистить();
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			ОтчетОбъект.ПриВыводеЗаголовка(Результат);
		Иначе
			ВывестиЗаголовокОтчета(ОтчетОбъект, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда		
		Попытка
			ВнешниеНаборыДанных = ОтчетОбъект.ПолучитьВнешниеНаборыДанных();
		Исключение
		КонецПопытки;
		
		Если ИспользоватьПередКомпоновкойМакета Тогда
			ОтчетОбъект.ПередКомпоновкойМакета(СхемаКомпоновкиДанных);
		КонецЕсли;
		ОтчетОбъект.КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ТекущиеНастройки);
		
		МакетОформления = УстановитьМакетОформленияОтчета(ОтчетОбъект, НастройкиДляКомпоновкиМакета);
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект, МакетОформления);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, , МакетОформления);
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				ОтчетОбъект.ПослеКомпоновкиМакета(МакетКомпоновки);
			КонецЕсли;
			
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			//МетаДанныеОтчета = ОтчетОбъект.Метаданные();
			//СтруктураОтчета = Новый Структура;
			//Для Каждого ТекРеквизит из МетаДанныеОтчета Цикл 				
			//	СтруктураОтчета.Вставить(ТекРеквизит.Имя, ОтчетОбъект[ТекРеквизит.Имя]);				
			//Конеццикла;
			
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Новый Структура("Объект, ДанныеРасшифровки", ОтчетОбъект, ДанныеРасшифровкиОбъект), ДанныеРасшифровки);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//ОбработкаПрерыванияПользователя();
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						ОтчетОбъект.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				ОтчетОбъект.ПриВыводеПодвала(Результат);
			Иначе
				ВывестиПодвалОтчета(ОтчетОбъект, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			ОтчетОбъект.ПослеВыводаРезультата(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура для вывода заголовка отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек 
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура выводит заголовок отчета
Процедура ВывестиЗаголовокОтчета(ОтчетОбъект, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Портфель");
	
	// Организация
	Если ЗначениеЗаполнено(ОтчетОбъект.Портфель) Тогда
		ТекстОрганизация = СтандартныеОтчетыПовтИсп.ПолучитьТекстПортфеля(ОтчетОбъект.Портфель);
		ОбластьОрганизация.Параметры.Портфель = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОтчетОбъект.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ПолучитьИдентификаторОбъекта(ОтчетОбъект);	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
		Если ОтчетОбъект["Показатель" + ИмяПоказателя] Тогда
			ТекстВыводимыеДанные = ТекстВыводимыеДанные + ОтчетОбъект.Метаданные().Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

//Процедура для вывода подвала отчета
//
// Параметры:
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура выводит подвал отчета
Процедура ВывестиПодвалОтчета(ОтчетОбъект, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

//Процедура для вывода заголовка отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  НастройкаКомпоновкиДанных - настройки компоновки данных 
//
// Возвращаемое значение:
//  Процедура устанавливает макет оформления отчета
Функция УстановитьМакетОформленияОтчета(ОтчетОбъект, НастройкаКомпоновкиДанных) Экспорт
	
	//Попытка
	//	НастройкиФормы = ОтчетОбъект.НастройкиФормы;
		
		МакетОформления = Неопределено;
		
	//	Если НастройкиФормы.МакетОформления = 0 Тогда // Зеленый
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 1 Тогда // Черно-белый
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЧерноБелый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 2 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Основной");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 3 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Яркий");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 4 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Море");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 5 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Арктика");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 6 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Зеленый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 7 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Античный");
	//	КонецЕсли;
	//Исключение
	//	УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	//КонецПопытки;
	//
	Возврат МакетОформления;
	
КонецФункции

//Процедура для обработки результата отчета 
//
// Параметры:
//  ИдентификаторОтчета - идентификатор отчета
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура устанавливает параметры печати отчета
Процедура ОбработкаРезультатаОтчета(ОтчетОбъект, Результат) Экспорт
	
	//// Выводим надписи вертикально, если количество точек диаграмм больше 9
	//Для Каждого Рисунок Из Результат.Рисунки Цикл
	//	Попытка
	//		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
	//			Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
	//			Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
	//			Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	//			
	//			Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
	//			Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
	//			Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
	//			Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ОтчетОбъект.Метаданные().Имя;
		
	
КонецПроцедуры

 //Процедура для проверки заполнения
//
// Параметры:
//  ОтчетОбъект - исходный отчет
//  Отказ - отказ от выполнения процедуры 
//
// Возвращаемое значение:
//  Процедура проверяет заполнение параметров отчета
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
	КонецЕсли;
	
	КоличествоПоказателей = 0;
	ПервыйПоказатель = "";
	Для Каждого ЭлементНабора Из ОтчетОбъект.НаборПоказателей Цикл
		КоличествоПоказателей = КоличествоПоказателей + ОтчетОбъект["Показатель" + ЭлементНабора];
		Если ПустаяСтрока(ПервыйПоказатель) Тогда
			ПервыйПоказатель = "Показатель" + ЭлементНабора;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПоказателей = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

//Функция получает копию описания макета
//
// Параметры:
//  ОписаниеМакета - описание макета
//  ФормаЗаписи - форма записи
//
// Возвращаемое значение:
//  получает описание макета
Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

//Процедура для сохранения пользовательских настроек
//
// Параметры:
//  ФормаОтчета - форма отчета
//  Настройки - настройки 
//  СохранятьТолькоРеквизиты - массив макетов
//
// Возвращаемое значение:
//  Процедура сохраняет пользовательские настройки на сервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		// Сохранение реквизитов формы
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
		ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ФормаОтчета.ВыводитьПодвал);	
		ДополнительныеСвойства.Вставить("МакетОформления"  , ФормаОтчета.МакетОформления);
	КонецЕсли;

	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

//Процедура выполняется на сервере при загрузке пользовательских настроек
//
// Параметры:
//  ФормаОтчета - форма отчета
//  Настройки - настройки 
//  ЗагружатьТолькоРеквизиты - загружать только реквизиты
//
// Возвращаемое значение:
//  Процедура устанавливает настройки по умолчанию или загружает пользовательские настройки
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт

	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);		
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					Иначе
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗагружатьТолькоРеквизиты Тогда
					// Восстановление реквизитов формы
					Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" Тогда
						ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодвал" Тогда
						ФормаОтчета.ВыводитьПодвал = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" Тогда
						ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
						СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(
							ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
							"МакетОформления", ФормаОтчета.МакетОформления);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//Функция возвращает доступное поле по полю компоновки
// 
// Параметры:
//  ПолеКомпоновкиДанных - поле компоновки данных
//  ОбластьПоиска - область поиска
// 
// Возвращаемое значение:
//   доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

//Функция добавляет родительские поля в расшифровку
//
// Параметры:
//  ЭлементРасшифровки - элемент расшифровки
//  ТекущийОтчет - текущий отчет
//  МассивПолейРасшифровки - массив полей расшифровки
//  ВключатьРесурсы - включать ресурсы в расшифровку
//
// Возвращаемое значение:
//  в массив полей расшифровки добавляются родительские поля
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
	
	 //Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда       
	 //	   Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл       
	 //			 МассивПолейРасшифровки.Добавить(Поле);       
	 //	   КонецЦикла;      
	 // КонецЕсли;      
	 // Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл       
	 //	   ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);      
	 // КонецЦикла;     
	
КонецФункции

//Функция возвращает массив, по которому следует расшифровать отчет
//
// Параметры:
//  Расшифровка - расшифровка
//  ДанныеРасшифровки - данные расшифровки
//  ТекущийОтчет - текущий отчет
//  ВключатьРесурсы - включать ресурсы в расшифровку
//
// Возвращаемое значение:
//    массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

//Функция получает параметры расшифровки отчета
//
// Параметры:
//  Адрес - адрес
//  ИдентификаторОбъекта - идентификатор объекта
//  Расшифровка - расшифровка
//
// Возвращаемое значение:
//  структура параметров расшифровки
Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	Если ИдентификаторОбъекта = "АнализСубконто"
		Или ИдентификаторОбъекта = "АнализСчета"
		Или ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		Или ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		Или ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		Или ИдентификаторОбъекта = "ОборотыСчета"
		Или ИдентификаторОбъекта = "СводныеПроводки" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Ложь);
		
		МассивПолей = СтандартныеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, , Истина);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		КорСчет         = Неопределено;
		Период          = Неопределено;
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьЗначение          = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		
		УстановитьВсеПоказатели = Ложь;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета"                      , ПредставлениеДляАнализаСчета);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
				
				УстановитьВсеПоказатели = Истина;
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Истина);
		ПараметрыРасшифровки.Вставить("Значение"       , ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	Для Каждого Элемент Из МассивПолей Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
				ПервыйЭлемент = Элемент;
			КонецЕсли;
			Если Элемент.Поле = "Показатель" Тогда
				ЕстьПоказатель = Истина;
			КонецЕсли;
			Если Найти(Элемент.Поле, "Кор") = 1 Тогда
				ЕстьКорЗначение = Истина;
			КонецЕсли;
			Если Элемент.Поле = "КорСчет" Тогда
				КорСчет = Элемент.Значение;
			КонецЕсли;
			Если Элемент.Поле = "Счет" Тогда
				Счет = Элемент.Значение;
			КонецЕсли;
			Если Элемент.Поле = "Период" Тогда
				Период = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	СписокПолейОтборов = Новый Массив;
	Для каждого Отбор из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			Если Отбор.Значение = NULL тогда
				Продолжить;
			КонецЕсли;
			Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
				ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			ИначеЕсли (Отбор.Поле = "Счет" Или Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
			ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
			ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
				Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
					Если Счет <> Неопределено Тогда 
						ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						ИндексСубконто = Число(Сред(Отбор.Поле, 9));
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
					КонецЕсли;
					ДобавитьОтборПоВидСубконто = Ложь;
				ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
					ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
					ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
					НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
					Если НайденнаяСтрока <> Неопределено Тогда
						ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
					КонецЕсли;
				Иначе
					ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
				КонецЕсли;
				СписокПолейОтборов.Добавить(Отбор.Поле);
			ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
				Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
					Если КорСчет <> Неопределено Тогда
						ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
						ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
						ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						ИндексСубконто = Число(Сред(Отбор.Поле, 12));
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
					КонецЕсли;
					ДобавитьОтборПоВидКорСубконто = Ложь;
				КонецЕсли;
			ИначеЕсли Отбор.Поле = "Портфель" Тогда
				ДополнительныеСвойства.Вставить("Портфель", Отбор.Значение);
			ИначеЕсли Отбор.Поле = "Показатель" Тогда 
				Показатель = Отбор.Значение;
			ИначеЕсли Отбор.Поле = "Период" Или Отбор.Поле = "Регистратор" Тогда 
			Иначе
				Если Отбор.Иерархия Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоПортфелю###" Тогда
				Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Портфель") Тогда
						ДополнительныеСвойства.Вставить("Портфель"                      , Отбор.ПравоеЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
				Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
					ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
					ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
					НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
					Если НайденнаяСтрока <> Неопределено Тогда
						ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
					КонецЕсли;
				ИначеЕсли Отбор.Представление = "###ОтборПоПортфелю###" Тогда
					ДополнительныеСвойства.Вставить("Портфель"                      , Отбор.ПравоеЗначение);
				Иначе
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
		Если ДобавитьОтборПоВидСубконто Тогда
			Индекс = 1;
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДобавитьОтборПоВидКорСубконто Тогда
			Индекс = 1;
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , СтандартныеОтчетыКлиентСервер.КонецПериода(Период, ОтчетОбъект.Периодичность));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	УстановитьВсеПоказатели = Истина;
	// Настройка показателей
	//Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
	//	ЭлементСтруктуры.Значение.Значение = Ложь;
	//КонецЦикла;
//	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
	//Иначе
	//				ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
	//	КонецЕсли;
	//КонецЕсли;

	Возврат ПользовательскиеНастройки;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОЛОНТИТУЛАМИ

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Настройка = Неопределено; //Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результирующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)

	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()

// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // УстановитьКолонтитулы()

//Процедура выполняется при создании отчета на сервере
//
// Параметры:
//  Форма - форма отчета
//  Отказ - флаг отказа
//  СтандартнаяОбработка - выполнение стандартной обработки
//
// Возвращаемое значение:
//  процедура устанавливает пользовательские настройки и заполняет значения по умолчанию
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	Если Параметры.Свойство("РежимРасшифровки") Тогда 
		Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки          , Форма.УникальныйИдентификатор);
	
	Форма.НаборПоказателей = Новый ФиксированныйМассив(ОтчетОбъект.НаборПоказателей);
	
	ПараметрМакетОформления = СтандартныеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = СтандартныеОтчетыПовтИсп.ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Форма.МакетОформления = ПараметрМакетОформления.Значение;
	КонецЕсли;
	
	Форма.Элементы.ПанельНастроек.Пометка = Форма.Элементы.ГруппаПанельНастроек.Видимость;
	
	Если Отчет.РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанных();
		Исключение
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
		КонецЕсли;
		Форма.СформироватьОтчетСервер();
	КонецЕсли;
		
	Форма.ДоступныеПериодыОтчета = СтандартныеОтчеты.ПолучитьДоступныеПериодыОтчета();
	СтандартныеОтчеты.ПолучитьСписокДоступныхПериодов(Форма.ДоступныеПериодыОтчета.День, 
		Форма.Элементы.ВидПериода.СписокВыбора);

КонецПроцедуры

	
////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ ВЫБОРА ПЕРИОДА

// Функция получает список доступных периодов 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//   СписокДоступныхПериодов - получает список значений перечисления "Доступные периоды отчета"
//
Процедура ПолучитьСписокДоступныхПериодов(МинимальныйПериод, СписокПериодов, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(СписокПериодов) <> Тип("СписокЗначений") тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.День);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Неделя);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Декада);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Месяц);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Квартал);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Полугодие);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Год);
	
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод);
	
	ЭлементСписка = СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйПериод);
	Если ЭлементСписка <> Неопределено Тогда
		ИндексЭлемента = СписокДоступныхПериодов.Индекс(ЭлементСписка);
		Для Сч = ИндексЭлемента По СписокДоступныхПериодов.Количество() - 1 Цикл
			Период = СписокДоступныхПериодов.Получить(Сч);
			СписокПериодов.Добавить(Период.Значение, Период.Представление);
		КонецЦикла;
		Если ЗначениеПоУмолчанию = Неопределено Тогда
			ЗначениеПоУмолчанию = СписокПериодов[0].Значение;
		КонецЕсли;
	Иначе
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

// Функция получает доступные периоды отчета
//
// Параметры:   нет
//
// Возвращаемое значение:
//  ДоступныеПериодыОтчета - структура с доступными периодами
//
Функция ПолучитьДоступныеПериодыОтчета() Экспорт
	
	ДоступныеПериодыОтчета = Новый Структура;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ДоступныеПериодыОтчета.ЗначенияПеречисления Цикл
		ДоступныеПериодыОтчета.Вставить(
			ЗначениеПеречисления.Имя, Перечисления.ДоступныеПериодыОтчета[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат ДоступныеПериодыОтчета;
	
КонецФункции