////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
//

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) 
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

//Функция получает текст, расположенный между маркерами
//
// Параметры:
//  Текст - исходный текст
//  МаркерНачало - начальный маркер
//  МаркерКонец - конечный маркер
//
// Возвращаемое значение:
//  текст, расположенный между маркерами
Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец) Экспорт
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

//Функция получает идентификатор отчета
//
// Параметры:
//  ОтчетОбъект - исходный отчет
//
// Возвращаемое значение:
//  имя отчета
Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

//Функция определяет количество показателей отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//
// Возвращаемое значение:
//  КоличествоПоказателей - количество показателей
Функция КоличествоПоказателей(ПараметрыОтчета) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

//Процедура добавляет дополнительные поля в компоновщик настроек
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек
//
// Возвращаемое значение:
//  дополнительные поля в компоновщике настроек
Процедура ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 0 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	ИначеЕсли ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	КонецЕсли;
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//процедура добавляет группировку по периоду в параметры отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  Структура - структвра параметров
//
// Возвращаемое значение:
//  в параметры отчета добавляется группировка по периоду
Процедура ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура) Экспорт
	
	Если ПараметрыОтчета.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ПараметрыОтчета.Периодичность = 2 Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура добавляет отбор по Договору ДУ
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек отчета
//  ВПользовательскиеНастройки - флаг для добавления отбора в пользовательские настройки
//
// Возвращаемое значение:
//  отбор по договору ДУ добавлен в параметры отчета
Процедура ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек, ВПользовательскиеНастройки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Портфель) Тогда
			НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Портфель", ПараметрыОтчета.Портфель,,, ВПользовательскиеНастройки);
			НовыйОтбор.Представление = "###ОтборПоПортфелю###"; 
	КонецЕсли;
	
КонецПроцедуры

//Процедура добавляет отбор по показателю Контроль
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек отчета
//  ВПользовательскиеНастройки - флаг для добавления отбора в пользовательские настройки
//
// Возвращаемое значение:
//  отбор по показателю Контроль добавлен в параметры отчета
Процедура ДобавитьОтборДляПоказателяКонтроль(ПараметрыОтчета, КомпоновщикНастроек, ВПользовательскиеНастройки = Истина) Экспорт
	
	//МассивПоказателей = Новый Массив;
	//МассивПоказателей.Добавить("БУ");
	//МассивПоказателей.Добавить("НУ");
	////МассивПоказателей.Добавить("ПР");
	////МассивПоказателей.Добавить("ВР");
	//Если ПараметрыОтчета.ПоказательКонтроль Тогда 
	//	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	//	Если ВПользовательскиеНастройки Тогда
	//		Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл	
	//			Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
	//				Отбор = ЭлементНастройки;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	ГруппаОтборИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//	ГруппаОтборИЛИ.Представление = "###Контроль###";
	//	ГруппаОтборИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
	//		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
КонецПроцедуры

//Функция получает макет шапки отчета
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  Тело - тело отчета
//  ТипМакета - тип макета
//
// Возвращаемое значение:
//  макет шапки
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетШапки];
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Функция получает макет подвала отчета
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  Тело - тело отчета
//
// Возвращаемое значение:
//  макет подвала
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

//Функция получает макет группировки по полю группировки
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  ПолеГруппировки - поле группировки
//  ИскатьВДетальныхЗаписях - искать в детальных записях
//  ТипМакета - тип макета
//
// Возвращаемое значение:
//  макет группировки
Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

//Процедура для обхода тела макета компоновки
//
// Параметры:
//  МакетКомпоновки - исходный макет отчета
//  Тело - тело 
//  МассивМакетов - массив макетов
//  ПолеГруппировки - поле группировки
//  ИскатьВДетальныхЗаписях - искать в детальных записях
//  ТипМакета - тип макета
//
// Возвращаемое значение:
//  Процедура обходит тело макета и заполняет массив макетов
Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда		//NFO-12
				//	ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Строки, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь);  //NFO-12
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда  //NFO-241
			
			ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Строки, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь); //NFO-241
	
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если СтрНайти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);
			КонецЦикла;
		КонецЕсли;
		
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиТаблицыМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура для установки настроек по умолчанию
//
// Параметры:
//  ФормаОтчета - форма отчета
//
// Возвращаемое значение:
//  устанавливает настройки по умолчанию
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Если ФормаОтчета.Отчет.Свойство("НачалоПериода") Тогда
		ФормаОтчета.Отчет.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ФормаОтчета.Отчет.Свойство("КонецПериода") Тогда
		ФормаОтчета.Отчет.КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ФормаОтчета.Отчет.Свойство("Портфель") Тогда
		ФормаОтчета.Отчет.Портфель = ОбщегоНазначенияДУ.ПолучитьЗначениеПоУмолчанию("Портфель");
	КонецЕсли;
	Если ФормаОтчета.Отчет.Свойство("ПоказательБУ") Тогда
		ФормаОтчета.Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если ФормаОтчета.Отчет.Свойство("СальдоНаНачалоДт") Тогда
		ФормаОтчета.Отчет.СальдоНаНачалоДт   = Истина;	
		ФормаОтчета.Отчет.СальдоНаНачалоКт   = Истина;
		ФормаОтчета.Отчет.СальдоНаКонецДт    = Истина;
		ФормаОтчета.Отчет.СальдоНаКонецКт    = Истина;
		ФормаОтчета.Отчет.ОборотыЗаПериодДт  = Истина;
		ФормаОтчета.Отчет.ОборотыЗаПериодКт  = Истина;
		ФормаОтчета.Отчет.ОборотыСоСчетамиДт = Истина;
		ФормаОтчета.Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	Попытка 
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка) Экспорт
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И Найти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		
		Если (НРег(Поле) <> "подразделение")
			И ((НРег(Поле) <> "договор" ИЛИ Истина)) Тогда
			НоваяСтрока = Группировка.Добавить();
			
			НоваяСтрока.Использование  = Структура.Использование;
			НоваяСтрока.Поле           = Поле;
			НоваяСтрока.Представление  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
			Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
				НоваяСтрока.ТипГруппировки = 1;
			ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
				НоваяСтрока.ТипГруппировки = 2;
			Иначе
				НоваяСтрока.ТипГруппировки = 0;
			КонецЕсли;
		КонецЕсли;
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция получает список счетов по субсчетам
//
// Параметры:
//  Таблица - таблица счетов
//
// Возвращаемое значение:
//  СписокСчетовПоСубсчетам - список счетов по субсчетам
Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

//Функция копирует параметр схемы компоновки данных
//
// Параметры:
//  СхемаКомпоновкиДанных - схема компоновки данных
//  Приемник - имя нового параметра
//  Источник - имя параметра источника
//  ЗначениеПриемника - значение приемника
//
// Возвращаемое значение:
//  НовыйПараметр - новый пораметр в системе компоновки данных
Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Функция получает текст организации
//
// Параметры:
//  ОтчетОбъект - отчет объект
//  Организация - Договор ДУ
//  ВключатьОбособленныеПодразделения - включать обособленные подразделения
//
// Возвращаемое значение:
//  функция всегда возвращает строку "ОСВ"
Функция ПолучитьТекстОрганизация(ОтчетОбъект = Неопределено, Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	//Если ОтчетОбъект <> Неопределено Тогда
	//	Портфель                       = ОтчетОбъект.Портфель;
	//КонецЕсли;
	//
	//ТекстОрганизации = "";
	//Попытка
	//	Если ЗначениеЗаполнено(Портфель) Тогда
	//			СведенияОбОрганизации = БухгалтерскийУчетВызовСервераПереопределяемый.СведенияОЮрФизЛице(Организация);
	//			ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	//			Если ПустаяСтрока(ТекстОрганизации) Тогда
	//				ТекстОрганизации = СведенияОбОрганизации.Представление;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//Исключение
	//	// Запись в журнал регистрации не требуется
	//КонецПопытки;
	
	Возврат "ОСВ";
	
КонецФункции

//Функция для получения текста обособленных подразделений
//
// Параметры:
//  Организация - исходный Портфель
//
// Возвращаемое значение:
//  возвращает пустую строку
Функция ПолучитьТекстОбособленныхПодразделений(Организация) Экспорт
	
	//ТекстОрганизации = "";
	//
	//СведенияОбОрганизации = БухгалтерскийУчетВызовСервераПереопределяемый.СведенияОЮрФизЛице(Организация);
	//ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	//Если ПустаяСтрока(ТекстОрганизации) Тогда
	//	ТекстОрганизации = СведенияОбОрганизации.Представление;
	//КонецЕсли;
	//
	//ТекстОрганизации = ТекстОрганизации + " с обособленными подразделениями";
	
	Возврат ""//ТекстОрганизации;
	
КонецФункции

Функция ПодписантыОтчета(Портфель)
	
	ПодписантыОтчета = Новый ТаблицаЗначений;
	
	//Если ЗначениеЗаполнено(Портфель) Тогда 
	//	Контрагент = "";
	//	ВидКонтрагентаПортфеляДляПодписиОтчетов = Константы.КонтрагентПортфеляДляПодписиОтчетов.Получить();
	//	Если ВидКонтрагентаПортфеляДляПодписиОтчетов = Перечисления.КонтрагентПортфеляДляПодписиОтчетов.Клиент Тогда 
	//		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Портфель, "Клиент");	
	//	ИначеЕсли ВидКонтрагентаПортфеляДляПодписиОтчетов = Перечисления.КонтрагентПортфеляДляПодписиОтчетов.УК Тогда
	//		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Портфель, "УправляющаяКомпания");	
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Контрагент) Тогда 
	//		ПодписантыОтчета = Справочники.КонтактныеЛица.КонтактныеЛицаКонтрагента(Контрагент);	
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ПодписантыОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
// 
 
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

//Процедура для формирования отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  АдресХранилища - адрес хранилища 
//
// Возвращаемое значение:
//  Процедура формирует отчет по переданным параметрам
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;

	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьВнешниеНаборыДанных Тогда
			ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета);
		КонецЕсли;
		
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				//ВывестиПодвалОтчета(Результат);  										//NFO-1787
				ВывестиПодвалОтчетаСПодписями(ПараметрыОтчета.Портфель, Результат); 	//NFO-1787
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
	
КонецПроцедуры

//Процедура для вывода заголовка отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  КомпоновщикНастроек - компоновщик настроек 
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура выводит заголовок отчета
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьПортфель      = Макет.ПолучитьОбласть("Портфель");
	
	// Портфель
	Если ЗначениеЗаполнено(ПараметрыОтчета.Портфель) Тогда
		
		//ШаблонПредставленияПортфеляДляОтчетов = Константы.ШаблонПредставленияПортфеляДляОтчетов.Получить();
		//Если ЗначениеЗаполнено(ШаблонПредставленияПортфеляДляОтчетов) И ЗначениеЗаполнено(ПараметрыОтчета.Портфель) Тогда 
		//	Портфель = ПараметрыОтчета.Портфель;
		//	ШаблонПредставленияПортфеляДляОтчетов = СтрЗаменить(ШаблонПредставленияПортфеляДляОтчетов, 
		//		"Портфель.ПолноеНаименование", 
		//		"РегистрыСведений.ИсторияРеквизитовПортфеля.РеквизитыПортфеляСУчетомИсторичности(Портфель, ПараметрыОтчета.КонецПериода).ПолноеНаименование");
		//	Выполнить("ТекстПортфель = " + ШаблонПредставленияПортфеляДляОтчетов);
		//Иначе 
		//	ТекстПортфель = ПараметрыОтчета.Портфель.Наименование;
		//КонецЕсли;
		ТекстПортфель = ПараметрыОтчета.Портфель.Наименование;
		ОбластьПортфель.Параметры.Портфель = ТекстПортфель;
		Результат.Вывести(ОбластьПортфель);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение + НСтр("ru = ' И '") + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

//Процедура для вывода подвала отчета
//
// Параметры:
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура выводит подвал отчета
Процедура ВывестиПодвалОтчета(Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

//Процедура для вывода подвала отчета
//
// Параметры:
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура выводит подвал отчета
Процедура ВывестиПодвалОтчетаСПодписями(Портфель, Результат) Экспорт
	
	ПодписантыОтчета = ПодписантыОтчета(Портфель);
	Если ПодписантыОтчета.Количество() = 0 Тогда 
		ВывестиПодвалОтчета(Результат);
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПримечание = Макет.ПолучитьОбласть("Примечание");
	ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиПодписантов");

	Результат.Вывести(ОбластьПримечание);
	
	ПерваяСтрока = Истина;
	
	Для Каждого КонтактноеЛицо Из ПодписантыОтчета Цикл
		Если ПерваяСтрока Тогда 
			ПерваяСтрока = Ложь;
			ОбластьПодписи.Параметры.Ответственный = "Ответственный:";
		Иначе
			ОбластьПодписи.Параметры.Ответственный = "";			
		КонецЕсли;
		ОбластьПодписи.Параметры.ФИО = КонтактноеЛицо.Фамилия +" "+Лев(КонтактноеЛицо.Имя,1)+"."+Лев(КонтактноеЛицо.Отчество,1)+".";
		ОбластьПодписи.Параметры.Должность = КонтактноеЛицо.Должность;
		Результат.Вывести(ОбластьПодписи);
	КонецЦикла;
			
КонецПроцедуры

//Процедура для вывода заголовка отчета
//
// Параметры:
//  ПараметрыОтчета - параметры отчета
//  НастройкаКомпоновкиДанных - настройки компоновки данных 
//
// Возвращаемое значение:
//  Процедура устанавливает макет оформления отчета
Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	Если ПараметрыОтчета.Свойство("МакетОформления") И ЗначениеЗаполнено(ПараметрыОтчета.МакетОформления) Тогда
		СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", ПараметрыОтчета.МакетОформления);
	Иначе
		СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");	
	КонецЕсли;
	
КонецПроцедуры

//Процедура для обработки результата отчета 
//
// Параметры:
//  ИдентификаторОтчета - идентификатор отчета
//  Результат - табличный документ
//
// Возвращаемое значение:
//  Процедура устанавливает параметры печати отчета
Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;		
	
КонецПроцедуры

//Процедура для проверки заполнения
//
// Параметры:
//  ОтчетОбъект - исходный отчет
//  Отказ - отказ от выполнения процедуры 
//
// Возвращаемое значение:
//  Процедура проверяет заполнение параметров отчета
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = Новый Структура("КорректностьПериода, ВыборПоказателя", Истина, Истина);
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
		КоличествоПоказателей = 0;
		ПервыйПоказатель = "";
		НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
		Для Каждого ЭлементНабора Из НаборПоказателей Цикл
			КоличествоПоказателей = КоличествоПоказателей + ОтчетОбъект["Показатель" + ЭлементНабора];
			Если ПустаяСтрока(ПервыйПоказатель) Тогда
				ПервыйПоказатель = "Показатель" + ЭлементНабора;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//Функция получает копию описания макета
//
// Параметры:
//  ОписаниеМакета - описание макета
//  ФормаЗаписи - форма записи
//
// Возвращаемое значение:
//  получает описание макета
Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

//Процедура для сохранения пользовательских настроек
//
// Параметры:
//  ФормаОтчета - форма отчета
//  Настройки - настройки 
//  СохранятьТолькоРеквизиты - массив макетов
//
// Возвращаемое значение:
//  Процедура сохраняет пользовательские настройки на сервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "РежимРасшифровки" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		// Сохранение реквизитов формы
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
		ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ФормаОтчета.ВыводитьПодвал);	
		ДополнительныеСвойства.Вставить("МакетОформления"  , ФормаОтчета.МакетОформления);
	КонецЕсли;
	
	ЭлементПанельНастроек = ФормаОтчета.Элементы.Найти("ПанельНастроек");
	Если ЭлементПанельНастроек <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ЭлементПанельНастроек.Пометка);
	КонецЕсли;

	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

//Процедура выполняется на сервере при загрузке пользовательских настроек
//
// Параметры:
//  ФормаОтчета - форма отчета
//  Настройки - настройки 
//  ЗагружатьТолькоРеквизиты - загружать только реквизиты
//
// Возвращаемое значение:
//  Процедура устанавливает настройки по умолчанию или загружает пользовательские настройки
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт

	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);		
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					ИначеЕсли ЭлементСтруктуры.Ключ <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗагружатьТолькоРеквизиты Тогда
					// Восстановление реквизитов формы
					Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" Тогда
						ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодвал" Тогда
						ФормаОтчета.ВыводитьПодвал = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" Тогда
						ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
						СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(
							ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
							"МакетОформления", ФормаОтчета.МакетОформления);
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" Тогда
					ЭлементПанельНастроек = ФормаОтчета.Элементы.Найти("ПанельНастроек");
					Если ЭлементПанельНастроек <> Неопределено Тогда
						ЭлементПанельНастроек.Пометка = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
					ЭлементГруппаПанельНастроек = ФормаОтчета.Элементы.Найти("ГруппаПанельНастроек");
					Если ЭлементГруппаПанельНастроек <> Неопределено Тогда
						ЭлементГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;		
	КонецЕсли;
	
	Попытка
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Исключение
		МинимальныйВидПериода = Неопределено;
	КонецПопытки;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") И НЕ ЗначениеЗаполнено(ФормаОтчета.ВидПериода) Тогда
		ФормаОтчета.ВидПериода = ВыборПериодаКлиентСервер.ПолучитьВидПериода(
			ФормаОтчета.Отчет.НачалоПериода, ФормаОтчета.Отчет.КонецПериода, МинимальныйВидПериода);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ФормаОтчета.ПолеОрганизация, ФормаОтчета.Отчет.Организация, ФормаОтчета.Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПолеПортфель") Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеПортфель(
			ФормаОтчета.ПолеПортфель, ФормаОтчета.Отчет.Портфель);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(ФормаОтчета, Настройки) Экспорт

	// Для отчетов использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки
	РежимРасшифровки = Ложь;
	Отчет = ФормаОтчета.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
		РежимРасшифровки = Истина;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки
	// загружаем настройки по умолчанию
	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета);
	Иначе 
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает доступное поле по полю компоновки
// 
// Параметры:
//  ПолеКомпоновкиДанных - поле компоновки данных
//  ОбластьПоиска - область поиска
// 
// Возвращаемое значение:
//   доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

//Функция добавляет родительские поля в расшифровку
//
// Параметры:
//  ЭлементРасшифровки - элемент расшифровки
//  ТекущийОтчет - текущий отчет
//  МассивПолейРасшифровки - массив полей расшифровки
//  ВключатьРесурсы - включать ресурсы в расшифровку
//
// Возвращаемое значение:
//  в массив полей расшифровки добавляются родительские поля
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

//Функция возвращает массив, по которому следует расшифровать отчет
//
// Параметры:
//  Расшифровка - расшифровка
//  ДанныеРасшифровки - данные расшифровки
//  ТекущийОтчет - текущий отчет
//  ВключатьРесурсы - включать ресурсы в расшифровку
//
// Возвращаемое значение:
//    массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

//Функция получает параметры расшифровки отчета
//
// Параметры:
//  Адрес - адрес
//  ИдентификаторОбъекта - идентификатор объекта
//  Расшифровка - расшифровка
//
// Возвращаемое значение:
//  структура параметров расшифровки
Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "АнализСубконто"
		ИЛИ ИдентификаторОбъекта = "АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки" 
		ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		Счет            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Истина);
				ПараметрыРасшифровки.Вставить("Значение"       , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Счет" Тогда
							Счет = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
			
			МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
			
			Для Каждого Элемент Из МассивПолей Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Поле = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если Найти(Элемент.Поле, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Счет" Тогда
						Счет = Элемент.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		формироватьОборотыСчета          = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета          = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьЗначение          = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Истина);
		ПараметрыРасшифровки.Вставить("Значение"       , ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

//Функция получает параметры расшифровки отчета ЕПС
//
// Параметры:
//  Адрес - адрес
//  ИдентификаторОбъекта - идентификатор объекта
//  Расшифровка - расшифровка
//
// Возвращаемое значение:
//  структура параметров расшифровки
Функция ПолучитьПараметрыРасшифровкиОтчета_ЕПС(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "АнализСубконто_ЕПС"
		ИЛИ ИдентификаторОбъекта = "АнализСчета_ЕПС"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость_ЕПС"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету_ЕПС"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета_ЕПС"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки_ЕПС" 
		//ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига_ЕПС" 
		Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		Счет            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		ЕстьЛицевойСчет = Ложь;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
		
		МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
		
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "ЛицевойСчет" Тогда
					ЛицевойСчет = Элемент.Значение;
					ЕстьЛицевойСчет = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		формироватьОборотыСчета          = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета          = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьЗначение          = НСтр("ru = 'Открыть ""%Значение%""'");
		
		СчетРасшифровки = ?(ЕстьЛицевойСчет, ЛицевойСчет, Счет);
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", СчетРасшифровки);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", СчетРасшифровки);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", СчетРасшифровки);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", СчетРасшифровки);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", СчетРасшифровки);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", СчетРасшифровки);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость_ЕПС" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету_ЕПС", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета_ЕПС"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам_ЕПС"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоДням_ЕПС"               , ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто_ЕПС" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто_ЕПС");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета_ЕПС" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету_ЕПС" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета_ЕПС" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки_ЕПС" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига_ЕПС" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета_ЕПС", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки_ЕПС" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто_ЕПС" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто_ЕПС", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета_ЕПС" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету_ЕПС" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета_ЕПС", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета_ЕПС" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам_ЕПС", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Истина);
		ПараметрыРасшифровки.Вставить("Значение"       , ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки_ЕСП(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

//Функция получает настройки для расшифровки 
//
// Параметры:
//  ИДРасшифровки - вид расшифровки ("Карточка субконто", "Отчет по проводкам", "Обороты счета" и т.д.)
//  ИдентификаторОбъекта - идентификатор отчета
//  МассивПолей - массив полей для расшифровки
//  ОтчетОбъект - отчет объект
//  УстановитьВсеПоказатели - установить все показатели
//
// Возвращаемое значение:
//  пользовательские настройки для расшифровки отчета
//
Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	БухТипРесурса   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ДополнительныеСвойства.Вставить("Портфель", ОтчетОбъект.Портфель);
		Если ИДРасшифровки = "ОборотыСчета" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				
				ЗначениеОтбора = Отбор.Значение;
				ПолеОтбора = Отбор.Поле;
				
				Если Отбор.Значение = NULL тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					ДополнительныеСвойства.Вставить("Счет", ЗначениеСчет);
					Если ЗначениеЗаполнено(БухТипРесурса) Тогда
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ПолеСубконто = СтрЗаменить(Отбор.Поле, "Субконто", "Субконто" + БухТипРесурса);
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
				ИначеЕсли (Отбор.Поле = "Счет" Или Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
					Если Отбор.Поле = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
				ИначеЕсли Отбор.Поле = "БухТипРесурса" Тогда
				ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						Иначе
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 9));
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
						КонецЕсли;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСубконто" Тогда
						
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно);
						
					//XG-414 +++
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
						
						СвойстваИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
						
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(Отбор.Значение);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбщегоНазначения.ОбъектЯвляетсяГруппой(Отбор.Значение) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
						КонецЕсли;
						
						Для НомерСубконто = 1 По СвойстваИсходногоСчета.КоличествоСубконто Цикл
							
							Если СвойстваИсходногоСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
								
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + НомерСубконто, Отбор.Значение, ВидСравненияОтбора);
								
							КонецЕсли;
							                                
						КонецЦикла;
					Иначе
						//ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						//СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(Отбор.Значение);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбщегоНазначения.ОбъектЯвляетсяГруппой(Отбор.Значение) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						
						СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
						
						СвойстваИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОтчетОбъект.Счет);
						
						ОтборУстановлен = Ложь;
						ИмяПоляСубконто = "Субконто" + Сред(Отбор.Поле, 9, 1);
						ВидСубконтоОтбора = СвойстваИсходногоСчета["Вид" + ИмяПоляСубконто];
						Для ИндексСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконто() Цикл
							Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ВидСубконтоОтбора Тогда
								// Устанавливаем отбор
								НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + ИндексСубконто);
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, Отбор.Значение, ВидСравненияОтбора);
								ОтборУстановлен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						
						Если НЕ ОтборУстановлен Тогда
							// Поиск по типу
							Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
								
								Если СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
									НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + НомерСубконто);
									БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, Отбор.Значение, ВидСравненияОтбора);
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;
					//XG-414 ---
					КонецЕсли;
					СписокПолейОтборов.Добавить(Отбор.Поле);
				ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если КорСчет <> Неопределено Тогда
							ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
							ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
							ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
						Иначе
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 12));
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидКорСубконто = Ложь;
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Портфель" Тогда
					ДополнительныеСвойства.Вставить("Портфель", Отбор.Значение);
				ИначеЕсли Отбор.Поле = "Показатель" Тогда 
					Показатель = Отбор.Значение;
				ИначеЕсли Отбор.Поле = "Период" Или Отбор.Поле = "Регистратор" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
					КонецЕсли;
				КонецЕсли;	
			//ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			//	Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
			//		Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
			//			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			//				ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
			//				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
			//			КонецЕсли;
			//		КонецЦикла;
				//ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
				//КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
						ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоПортфелю###" Тогда
						ДополнительныеСвойства.Вставить("Портфель"                      , Отбор.ПравоеЗначение);
						//ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
					Иначе
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , СтандартныеОтчетыКлиентСервер.КонецПериода(Период, ОтчетОбъект.Периодичность));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ);
			//ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательПР);
			//ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательВР);
		Иначе
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат ПользовательскиеНастройки;
	
КонецФункции

//Функция получает настройки для расшифровки ЕПС
//
// Параметры:
//  ИДРасшифровки - вид расшифровки ("Карточка субконто", "Отчет по проводкам", "Обороты счета" и т.д.)
//  ИдентификаторОбъекта - идентификатор отчета
//  МассивПолей - массив полей для расшифровки
//  ОтчетОбъект - отчет объект
//  УстановитьВсеПоказатели - установить все показатели
//
// Возвращаемое значение:
//  пользовательские настройки для расшифровки отчета
//
Функция ПолучитьНастройкиДляРасшифровки_ЕСП(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	БухТипРесурса   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига_ЕПС" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто_ЕПС" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто_ЕПС"
		Или ИДРасшифровки = "ОтчетПоПроводкам_ЕПС" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига_ЕПС" Тогда
		ДополнительныеСвойства.Вставить("Портфель", ОтчетОбъект.Портфель);
		Если ИДРасшифровки = "ОборотыСчета_ЕПС" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам_ЕПС" Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				Если Отбор.Значение = NULL тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "АнализСчета_ЕПС" Или ИдентификаторОбъекта = "ОборотыСчета_ЕПС") Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					ДополнительныеСвойства.Вставить("Счет", ЗначениеСчет);
					Если ЗначениеЗаполнено(БухТипРесурса) Тогда
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета_ЕПС" ИЛИ ИдентификаторОбъекта = "ОборотыСчета_ЕПС") Тогда
					ПолеСубконто = СтрЗаменить(Отбор.Поле, "Субконто", "Субконто" + БухТипРесурса);
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
				ИначеЕсли (Отбор.Поле = "Счет" Или Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
					Если Отбор.Поле = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
				ИначеЕсли Отбор.Поле = "БухТипРесурса" Тогда
				ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС" Тогда
						Если Счет <> Неопределено Тогда 
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						Иначе
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 9));
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто_ЕПС" И ИДРасшифровки = "КарточкаСчета_ЕПС" Тогда
						ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
						КонецЕсли;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто_ЕПС" И ИДРасшифровки = "КарточкаСубконто_ЕПС" Тогда
						
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						
					//XG-414 +++
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомость_ЕПС" Тогда
						
						СвойстваИсходногоСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчетаЕПС(Счет);
						
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(Отбор.Значение);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбщегоНазначения.ОбъектЯвляетсяГруппой(Отбор.Значение) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
						КонецЕсли;
						
						Для НомерСубконто = 1 По СвойстваИсходногоСчета.КоличествоСубконто Цикл
							
							Если СвойстваИсходногоСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
								
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + НомерСубконто, Отбор.Значение, ВидСравненияОтбора);
								
							КонецЕсли;
							                                
						КонецЦикла;
					Иначе
						//ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						//СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(Отбор.Значение);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбщегоНазначения.ОбъектЯвляетсяГруппой(Отбор.Значение) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						
						СвойстваСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчетаЕПС(Счет);
						
						СвойстваИсходногоСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчетаЕПС(Счет);
						
						ОтборУстановлен = Ложь;
						ИмяПоляСубконто = "Субконто" + Сред(Отбор.Поле, 9, 1);
						ВидСубконтоОтбора = СвойстваИсходногоСчета["Вид" + ИмяПоляСубконто];
						Для ИндексСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС() Цикл
							Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ВидСубконтоОтбора Тогда
								// Устанавливаем отбор
								НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + ИндексСубконто);
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, Отбор.Значение, ВидСравненияОтбора);
								ОтборУстановлен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						
						Если НЕ ОтборУстановлен Тогда
							// Поиск по типу
							Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
								
								Если СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
									НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + НомерСубконто);
									БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, Отбор.Значение, ВидСравненияОтбора);
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;
					//XG-414 ---
					КонецЕсли;
					СписокПолейОтборов.Добавить(Отбор.Поле);
				ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС" Тогда
						Если КорСчет <> Неопределено Тогда
							ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
							ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
							ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
						Иначе
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 12));
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидКорСубконто = Ложь;
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Портфель" Тогда
					ДополнительныеСвойства.Вставить("Портфель", Отбор.Значение);
				ИначеЕсли Отбор.Поле = "Показатель" Тогда 
					Показатель = Отбор.Значение;
				ИначеЕсли Отбор.Поле = "Период" Или Отбор.Поле = "Регистратор" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
					КонецЕсли;
				КонецЕсли;	
			//ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			//	Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
			//		Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
			//			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			//				ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
			//				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
			//			КонецЕсли;
			//		КонецЦикла;
				//ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
				//КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто_ЕПС" И ИДРасшифровки = "КарточкаСчета_ЕПС" Тогда
						ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
						ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоПортфелю###" Тогда
						ДополнительныеСвойства.Вставить("Портфель"                      , Отбор.ПравоеЗначение);
						//ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
					Иначе
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто_ЕПС" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						СТандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , СтандартныеОтчетыКлиентСервер.КонецПериода(Период, ОтчетОбъект.Периодичность));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ);
			//ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательПР);
			//ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательВР);
		Иначе
			Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
				ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат ПользовательскиеНастройки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОЛОНТИТУЛАМИ

//Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Настройка = Неопределено; //Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

//Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результирующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)

	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()

//Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // УстановитьКолонтитулы()

//Процедура выполняется при создании отчета на сервере
//
// Параметры:
//  Форма - форма отчета
//  Отказ - флаг отказа
//  СтандартнаяОбработка - выполнение стандартной обработки
//
// Возвращаемое значение:
//  процедура устанавливает пользовательские настройки и заполняет значения по умолчанию
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	Если Параметры.Свойство("РежимРасшифровки") Тогда 
		Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		
		МакетОформления = "";
		
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
			Если ДанныеОбъекта.Свойство("Объект") И ДанныеОбъекта.Объект.Свойство("МакетОформления") Тогда
				МакетОформления = ДанныеОбъекта.Объект.МакетОформления;
			КонецЕсли; 
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		ИнициализацияКомпоновщикаНастроек(Форма);
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				Если ЭлементСтруктуры.Ключ = "Группировка" Или ЭлементСтруктуры.Ключ = "ДополнительныеПоля" Тогда
					Для Каждого ЭлементЗаполнения Из ЭлементСтруктуры.Значение Цикл
						НоваяСтрока = Отчет[ЭлементСтруктуры.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЗаполнения);
					КонецЦикла;
				Иначе
					Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" Или ЭлементСтруктуры.Ключ = "ВыводитьПодвал" Или ЭлементСтруктуры.Ключ = "ВыводитьЕдиницуИзмерения" Тогда
				Попытка
					Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				Исключение
					// Обработка исключения не требуется
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
		
	КонецЕсли;

	Попытка
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
		Форма.ОписанияТиповВидовСубконто.Вставить("Контрагент"                    , ПланыВидовХарактеристик.ВидыСубконтоЕПС.Контрагенты.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента"            , ПланыВидовХарактеристик.ВидыСубконтоЕПС.Договоры.ТипЗначения);
		//Форма.ОписанияТиповВидовСубконто.Вставить("Партия"                        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения);
		//Форма.ОписанияТиповВидовСубконто.Вставить("ДокументРасчетовСКонтрагентами", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	Исключение
		// Обработка исключения не требуется
	КонецПопытки;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	МенеджерОтчета = Отчеты[СтандартныеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма)];
	Если ЕстьРеквизитФормы(Форма, "НаборПоказателей") Тогда		
		Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	КонецЕсли;
	
	ПараметрМакетОформления = СтандартныеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = СтандартныеОтчетыПовтИсп.ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Если ЕстьРеквизитФормы(Форма, "МакетОформления") Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ПанельНастроек") Тогда
		БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Форма.Элементы.ПанельНастроек, Форма.Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
	
	Если Отчет.РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанных();
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
		КонецЕсли;
		Форма.СформироватьОтчетСервер();    
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
			Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "СоответствиеПортфелей")
		И ЕстьЭлементФормы(Форма, "ПолеПортфель") Тогда
		ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокПортфелей(Форма.Элементы.ПолеПортфель, Форма.СоответствиеПортфелей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась = Ложь, ИмяВариантаНастроек = "") Экспорт
	
	Форма.КомпоновщикИнициализирован = Истина;
	
	Форма.Элементы.НастройкиОтчета.Видимость = Истина;
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет("СхемаКомпоновкиДанных");
	
	Если ПустаяСтрока(ИмяВариантаНастроек) Тогда
		ИмяВариантаНастроек = ИмяОтчета;
	КонецЕсли;
	
	ВариантНастроек = Схема.ВариантыНастроек.Найти(ИмяВариантаНастроек);
	
	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Форма.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Форма.УникальныйИдентификатор);
	Форма.Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.СхемаКомпоновкиДанных));
	
	ТекущиеПользовательскиеНастройки = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(Форма.ПользовательскиеНастройки) Тогда
		ТекущиеПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Форма.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(Форма, ТекущиеПользовательскиеНастройки);
	
	Если ОрганизацияИзменилась Тогда
		БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий) Экспорт
	
	Для каждого ИдентификаторЗадания Из ИдентификаторыОтменяемыхЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры
