#Область ПрограммныйИнтерфейс

// Объединяет ячейки шапки табличного документа с повторяющимся текстом
// Служит для решения задачи отображения группировок колонок в табличных документах, полученных с помощью СКД
//
//Параметры:
// ТабДок - ТабличныйДокумент
// ВысотаШапки - Число, если не передана, высотой шапки считается высота фиксации таблицы
//
Процедура СвернутьЗаголовкиШапкиТабличногоДокумента(ТабДок, ВысотаШапки = 0) Экспорт

    ВысотаШапки = ?(ВысотаШапки = 0, ТабДок.ФиксацияСверху, ВысотаШапки);        
    НачалоШапки = ?(ТабДок.ФиксацияСлева = 0, 1, ТабДок.ФиксацияСлева);
		
	ЭтоПервоеОбъединение = Истина;
	              
				  
    Для СчетчикСтрок=1 По ВысотаШапки Цикл
        
        НомерПервойКолонкиОбъединения = 0;
        Для СчетчикКолонок=НачалоШапки По ТабДок.ШиринаТаблицы Цикл            

            ОбъединятьЯчейки = Ложь;
            Ячейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
            Если ПустаяСтрока(Ячейка.Текст) Тогда
                Продолжить;                
            КонецЕсли; 
            ЯчейкаСлед = ТабДок.Область(СчетчикСтрок, СчетчикКолонок+1);
            ОбъединятьЯчейки = Ячейка.Текст = ЯчейкаСлед.Текст;
            
            Если ОбъединятьЯчейки Тогда                
                НомерПервойКолонкиОбъединения = ?(НомерПервойКолонкиОбъединения = 0, СчетчикКолонок, НомерПервойКолонкиОбъединения);
                
            ИначеЕсли НомерПервойКолонкиОбъединения > 0 Тогда
                ТекстЗаголовка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок).Текст;
                ОбъединяемаяОбласть = ТабДок.Область(СчетчикСтрок, НомерПервойКолонкиОбъединения, СчетчикСтрок, СчетчикКолонок);
                ОбъединяемаяОбласть.Объединить();
				                
                ОбъединяемаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
                ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				НомерПервойКолонкиОбъединения = 0;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
	
КонецПроцедуры

// Копирует элементы из одной коллекции в другую
//
// Параметры:
//	ПриемникЗначения	- коллекция элементов КД, куда копируются параметры
//	ИсточникЗначения	- коллекция элементов КД, откуда копируются параметры
//	ОчищатьПриемник		- признак необходимости очистки приемника (Булево, по умолчанию: истина)
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет одну коллекцию элементов на основании другой
//
// Параметры:
//	ПриемникЗначения	- коллекция элементов КД, куда копируются параметры
//	ИсточникЗначения	- коллекция элементов КД, откуда копируются параметры
//	ПервыйУровень		- уровень структуры коллекции элементов КД для копирования параметров
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля
//
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Возврат ПолеЭлемента;
	
КонецФункции

// Копирование настроек структуры настроек схемы
//
//Параметры:
// Приемник - НастройкиКомпоновкиДанных
// Источник - НастройкиКомпоновкиДанных
// ОчищатьПриемник - Булево
//
Процедура СкопироватьСтруктуру(Приемник, Источник, ОчищатьПриемник = Истина) Экспорт
	
	Если ОчищатьПриемник Тогда
		Если ТипЗнч(Приемник) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Приемник.Очистить();			
		КонецЕсли; 		
	КонецЕсли; 
	
	Для каждого ЭлемИсточник Из Источник Цикл
		
		ТипИсточника = ТипЗнч(ЭлемИсточник);		
		
		Если ТипИсточника = Тип("ТаблицаКомпоновкиДанных") Тогда			
			ЭлемПриемник = Приемник.Добавить(ТипИсточника);
			ЗаполнитьЗначенияСвойств(ЭлемПриемник, ЭлемИсточник);			
			
			СкопироватьЭлементы(ЭлемПриемник.Выбор, ЭлемИсточник.Выбор);				
			СкопироватьЭлементы(ЭлемПриемник.Условноеоформление, ЭлемИсточник.Условноеоформление);	
			
			СкопироватьСтруктуру(ЭлемПриемник.ПараметрыВывода, ЭлемИсточник.ПараметрыВывода.Элементы);	
			СкопироватьСтруктуру(ЭлемПриемник.Колонки, ЭлемИсточник.Колонки);
			СкопироватьСтруктуру(ЭлемПриемник.Строки, ЭлемИсточник.Строки);

		ИначеЕсли ТипИсточника = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 	
			ЭлемПриемник = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлемПриемник, ЭлемИсточник);			
			
			СкопироватьЭлементы(ЭлемПриемник.Выбор, ЭлемИсточник.Выбор);				
			СкопироватьЭлементы(ЭлемПриемник.Отбор, ЭлемИсточник.Отбор);				
			СкопироватьСтруктуру(ЭлемПриемник.ПараметрыВывода, ЭлемИсточник.ПараметрыВывода.Элементы);	
			СкопироватьЭлементы(ЭлемПриемник.ПоляГруппировки, ЭлемИсточник.ПоляГруппировки);				
			СкопироватьЭлементы(ЭлемПриемник.Порядок, ЭлемИсточник.Порядок);
			СкопироватьЭлементы(ЭлемПриемник.УсловноеОформление, ЭлемИсточник.УсловноеОформление);			
			СкопироватьСтруктуру(ЭлемПриемник.Структура, ЭлемИсточник.Структура);
			
		ИначеЕсли ТипИсточника = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 	
			ЭлемПриемник = Приемник.Элементы.Найти(ЭлемИсточник.Параметр);
			ЗаполнитьЗначенияСвойств(ЭлемПриемник, ЭлемИсточник);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры 

Функция НайтиЭлементКоллекции()
		
КонецФункции
 

#КонецОбласти 
