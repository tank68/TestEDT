Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("КодБыстрогоВыбора"              , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.КодБыстрогоВыбора,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Валютный,
	|	Хозрасчетный.Количественный,
	|	Хозрасчетный.НалоговыйУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ХозрасчетныйВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

Функция ПолучитьМаксКоличествоСубконтоЕПС() Экспорт

	Возврат Метаданные.ПланыСчетов.ЕПС.МаксКоличествоСубконто;

КонецФункции

//Функция ВедетсяУчетПоСкладам(Счет) Экспорт

//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
//		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;

//	Возврат УчетПоСкладам;

//КонецФункции 

//Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

//	СвойстваСчета      = ПолучитьСвойстваСчета(Счет);

//	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
//		Возврат СвойстваСчета.ВидСубконто1Суммовой;
//	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
//		Возврат СвойстваСчета.ВидСубконто2Суммовой;
//	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
//		Возврат СвойстваСчета.ВидСубконто3Суммовой;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;

//КонецФункции

//Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

//	СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

//	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
//		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

//	Возврат ПартионныйУчет;

//КонецФункции 

//Функция КомиссионныйТовар(Счет) Экспорт

//	Комиссионный = ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный")
//		И Счет <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()
//		И Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);

//	Возврат Комиссионный;

//КонецФункции

//Функция СчетОтноситсяКДеятельностиЕНВД(Счет) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Счет", Счет);
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Рег.Счет
//	|ИЗ
//	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК Рег
//	|ГДЕ
//	|	Рег.Счет = &Счет";
//	
//	Результат = Запрос.Выполнить();
//	
//	Возврат НЕ Результат.Пустой();
//	
//КонецФункции 

//Функция СчетаВыручкиЕНВД() Экспорт

//	Возврат БухгалтерскийУчетПереопределяемый.СчетаВыручкиЕНВД();

//КонецФункции

//Функция СчетаВыручкиНеЕНВД() Экспорт

//	Возврат БухгалтерскийУчетПереопределяемый.СчетаВыручкиНеЕНВД();

//КонецФункции

//Функция СчетаРасходовЕНВД() Экспорт

//	Возврат БухгалтерскийУчетПереопределяемый.СчетаРасходовЕНВД();

//КонецФункции

//Функция СчетаУчетаЕНВД() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СчетаДоходовИРасходовЕНВД.Счет
//	|ИЗ
//	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД";
//	
//	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
//	
//	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
//	
//КонецФункции

//Функция МассивСчетовПереоценкиУСН() Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Хозрасчетный.Ссылка КАК Счет
//	|ИЗ
//	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
//	|ГДЕ
//	|	Хозрасчетный.Валютный
//	|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
//	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
//	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
//	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
//	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
//	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
//	
//	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
//	
//	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
//	
//КонецФункции

//Функция НаСчетеВедетсяУчетПоДокументамРасчетов(Счет) Экспорт

//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
//		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;

//	Возврат УчетПоДокументамРасчетов;

//КонецФункции

//Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
//		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;

//	Возврат УчетПоКонтрагентам;

//КонецФункции 

//Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
//		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

//	Возврат УчетПоДоговорам;

//КонецФункции

//Функция НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Счет) Экспорт
//	
//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоНомГруппам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
//		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;

//	Возврат УчетПоНомГруппам;

//КонецФункции

//Функция НаСчетеВедетсяУчетПоСтатьямЗатрат(Счет) Экспорт
//	
//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоСтатьямЗатрат = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
//		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;

//	Возврат УчетПоСтатьямЗатрат;

//КонецФункции

//Функция НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(Счет) Экспорт
//	
//	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

//	УчетПоПрочимДоходамИРасходам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
//		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
//		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;

//	Возврат УчетПоПрочимДоходамИРасходам;

//КонецФункции

//Функция СчетВИерархии(Счет, Эталон) Экспорт

//	Если ЗначениеЗаполнено(Счет) Тогда
//		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;

//КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	Субсчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Новый ФиксированныйМассив(Субсчета);

КонецФункции

Функция СчетаВИерархииЕПС(Знач СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕПС.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.ЕПС КАК ЕПС
	|ГДЕ
	|	ЕПС.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	Субсчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Новый ФиксированныйМассив(Субсчета);

КонецФункции

//// Определяет вид актива для РБП.
////
//// Параметры:
////  СчетСписания   - ПланСчетовСсылка - ссылка на счет, по которому определяется 
////                  вид актива (обязательный параметр).
////  
//Функция ОпределитьВидАктиваРБП(СчетСписания) Экспорт
//	
//	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВЫБОР
//		|		КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет01)
//		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ОсновныеСредства)
//		|		ИНАЧЕ ВЫБОР
//		|				КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет08)
//		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы)
//		|				ИНАЧЕ ВЫБОР
//		|						КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетЗатрат)
//		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.Запасы)
//		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
//		|					КОНЕЦ
//		|			КОНЕЦ
//		|	КОНЕЦ КАК ВидАктива
//		|ИЗ
//		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
//		|ГДЕ
//		|	Хозрасчетный.Ссылка = &ТекущийСчет";

//	Запрос.УстановитьПараметр("ТекущийСчет", СчетСписания);
//	Запрос.УстановитьПараметр("Счет01", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
//	Запрос.УстановитьПараметр("Счет08", ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
//	Массив = Новый Массив;
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
//	Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);

//	Запрос.УстановитьПараметр("СчетЗатрат", Массив);

//	Результат = Запрос.Выполнить().Выбрать();
//	Результат.Следующий();

//	Возврат Результат.ВидАктива;

//КонецФункции

//// Определяет счет учета материалов, переданных в переработку
//Функция СчетУчетаМатериалыПереданныеВПереработку(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
//	
//	Если ЗначениеЗаполнено(СчетВыбранныйПользователем)
//		И СчетВыбранныйПользователем.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
//		Возврат СчетВыбранныйПользователем;
//	Иначе
//		Возврат ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
//	КонецЕсли;
//	
//КонецФункции

//// Определяет счет учета материалов, принятых в переработку и затем использованных
//Функция СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
//	
//	Если ЗначениеЗаполнено(СчетВыбранныйПользователем) Тогда
//		Возврат СчетВыбранныйПользователем;
//	Иначе
//		Возврат ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
//	КонецЕсли;
//	
//КонецФункции

//// Функция предназначена для определения названия объекта
//// учета по его счету учета. Название объекта выдается в родительном падеже
//Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт

//	Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы) Тогда
//		
//		Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков) Тогда
//			
//			Возврат "земельных участков";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования) Тогда
//			
//			Возврат "объектов природопользования";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
//			
//			Возврат "объектов строительства";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
//			
//			Возврат "оборудования";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов) Тогда
//			
//			Возврат "нематериальных активов";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР) Тогда
//			
//			Возврат "НИОКР";
//			
//		Иначе
//			
//			Возврат "внеоборотных активов";
//			
//		КонецЕсли;
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Материалы) Тогда
//		
//		Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности) Тогда
//			
//			Возврат "инвентаря";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации) Тогда
//			
//			Возврат "спецодежды";
//			
//		ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации) Тогда
//			
//			Возврат "спецоснастки";
//			
//		Иначе
//			
//			Возврат "материалов";
//			
//		КонецЕсли;
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке) Тогда
//		
//		Возврат "оборудования";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Тогда
//		
//		Возврат "продукции для давальца";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда
//		
//		Возврат "полуфабрикатов";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары) Тогда
//		
//		Возврат "товаров";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТорговаяНаценка) Тогда
//		
//		Возврат "торговой наценки";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
//		
//		Возврат "продукции";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные) Тогда
//		
//		Возврат "отгруженных товаров";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства) Тогда
//		
//		Возврат "арендованных основных средств";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение) Тогда
//		
//		Возврат "товаров (ответственное хранение)";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку_) Тогда
//		
//		Возврат "материалов в переработку";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию) Тогда
//		
//		Возврат "товаров комитента";
//		
//	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа) Тогда
//		
//		Возврат "оборудования для монтажа";
//		
//	Иначе
//		
//		Возврат "запасов";
//		
//	КонецЕсли;

//КонецФункции

////Функция возвращает типы значений субконто, связанных с именами реквизитов
////
//// Возвращаемое значение:
////   Соответствие   - ключ - имя реквизита, значение - описание типов связанных значений субконто
////
//Функция ВсеТипыСвязанныхСубконто() Экспорт
//	
//	СвязанныеСубконто = Новый Соответствие;
//	
//	БухгалтерскийУчетПереопределяемый.УстановитьТипыСвязанныхСубконто(СвязанныеСубконто);
//	
//	Возврат СвязанныеСубконто;
//	
//КонецФункции

//// Функция возвращает признак использования одной номенклатурной группы
////
//Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

//	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") 
//		И ОсновнаяНоменклатурнаяГруппа() <> Неопределено;

//КонецФункции
//	
//// функция получает единственную номенклатурную группу
////
//// Возвращаемое значение:
////		Основная номенклатурная группа - Тип НоменклатурныеГруппы, если ничего не найдено, то возвращается неопределено
//Функция ОсновнаяНоменклатурнаяГруппа() Экспорт

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 2
//	|	НоменклатурныеГруппы.Ссылка
//	|ИЗ
//	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
//	|ГДЕ
//	|	НЕ НоменклатурныеГруппы.ПометкаУдаления
//	|	И НЕ НоменклатурныеГруппы.ЭтоГруппа";
//	Выборка = Запрос.Выполнить().Выбрать();
//	// Если опция ВестиУчетПоНесколькимНоменклатурнымГруппам выключена, но номенклатурная группа одна,
//	// то все равно подставляем эту номенклатурную группу
//	Если Выборка.Количество() = 1 Тогда
//		Выборка.Следующий();
//		ОсновнаяНоменклатурнаяГруппа = Выборка.Ссылка;
//	Иначе
//		ОсновнаяНоменклатурнаяГруппа = Неопределено;
//	КонецЕсли;
//	
//	Возврат ОсновнаяНоменклатурнаяГруппа;

//КонецФункции

//Функция СчетаУчетаАрендныхОбязательств() Экспорт
//	
//	МассивСчетов = Новый Массив;
//	
//	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);
//	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);
//	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);
//	
//	Возврат МассивСчетов;
//	
//КонецФункции

//Функция СчетУчетаАрендныхОбязательств(Счет) Экспорт
//	
//	Если Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательства
//	 ИЛИ Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал
//	 ИЛИ Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции

//Функция ИспользоватьПодразделения() Экспорт

//	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();

//КонецФункции