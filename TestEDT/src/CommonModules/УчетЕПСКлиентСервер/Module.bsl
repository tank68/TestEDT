////////////////////////////////////////////////////////////////////////////////
// ЕПС клиент сервер: клиент серверные процедуры и функции подсистемы ЕПС
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС

// Процедура установки типа и видимости субконто в зависимости от выбранного счета
//
// Параметры:
//  Счет - счет учета
//  Форма - форма
//  ПоляФормы - переданные поля формы
//  ЗаголовкиПолей - переданные заголовки полей
//  ЭтоТаблица - флаг для определения, таблица ли передана в процедуру
//  ОграничениеТипаСубконто - Массив - массив с типами субконто, которые не нужно выводить
//  
Процедура ПриВыбореСчетаВидимость(Счет, Форма, ПоляФормы, ЗаголовкиПолей = Неопределено, ЭтоТаблица = Ложь, ОграничениеТипаСубконто) Экспорт
	
	ДанныеСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если Индекс <= ДанныеСчета.КоличествоСубконто 
			И ОграничениеТипаСубконто.Найти(ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"]) = Неопределено Тогда
			
			Если ЭтоТаблица Тогда
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				КонецЕсли;
			Иначе
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ЗаголовкиПолей["Субконто" + Индекс]].Видимость = Истина;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ":";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Заголовок 		= ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Истина;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			// Ничего делать не надо, т.к. не доступные поля будут скрыты
			Если Не ЭтоТаблица Тогда
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ЗаголовкиПолей["Субконто" + Индекс]].Видимость = Ложь;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = "";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Заголовок 		= ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Ложь;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта) Экспорт
	
	ДанныеСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Валютный") Тогда
		Объект[ПоляОбъекта["Валютный"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный") Тогда
		Объект[ПоляОбъекта["Количественный"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ограничения счетов ЕПС только доступными значениями
//	Элементы		 		- <ВсеЭлементы> - Элементы формы
//	КоллекцияДоступныхСчетовЕПС 	- <Структура> - Ключи, которой ИмяРеквизита формы типа ПланСчетов.ЕПС
//			, а значения Соответствие, где ключ - Имя реквизита объекта, Значение - Массив счетов, или неопределено если не требуется ограничения
//
Процедура УстановитьОграничениеСчетовЕПС(Элементы, КоллекцияДоступныхСчетовЕПС) Экспорт 
	
	Для Каждого ДанныеРеквизитаЕПС Из КоллекцияДоступныхСчетовЕПС Цикл
		ИмяРеквизитаФормыЕПС = ДанныеРеквизитаЕПС.Ключ;
		ДоступныеСчетаЕПС = Неопределено;
		Для Каждого ЭлементСоответствия Из ДанныеРеквизитаЕПС.Значение Цикл
			ДоступныеСчетаЕПС = ЭлементСоответствия.Значение;
		КонецЦикла;
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Если ДоступныеСчетаЕПС <> Неопределено Тогда 
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаЕПС);
			НовыйМассив.Добавить(НовыйПараметр);
		КонецЕсли;
		ЭлементЕПС = Элементы.Найти(ИмяРеквизитаФормыЕПС);
		Если ЭлементЕПС <> Неопределено Тогда 
			ЭлементЕПС.ПараметрыВыбора =  Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура устанавливает параметры выбора для типа портфеля в соответсвии с установленным стандартом учета
//
// Параметры:
//	 ЭлементТипПортфеля	- ЭлементФормы - Элемент формы тип портфеля
//   Портфель – СправочникСсылка.ДУ_Портфели - портфель для получения остатков       
//   Дата – Дата - дата получения остатков
Процедура УстановитьПараметрыОтбораДляТипаПортфеля(ЭлементТипПортфеля, Портфель, Дата) Экспорт
	
	ТипыПортфелейПоСтандартуУчета = УчетЕПСПовтИсп.ТипыПортфелейПоСтандартуУчета(Портфель, Дата);
	
	ПараметрВыбора_1 = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ТипыПортфелейПоСтандартуУчета));
	
	МассивОтборов = Новый Массив;
	МассивОтборов.Добавить(ПараметрВыбора_1);
	
	ЭлементТипПортфеля.ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтборов);
		
КонецПроцедуры  

// Процедура установки счетов ЕПС
//	Объект	- <Объект> - объект формы
//	КоллекцияДоступныхСчетовЕПС 	- <Структура> - Ключи, которой ИмяРеквизита формы типа ПланСчетов.ЕПС
//			, а значения Соответствие, где ключ - Имя реквизита объекта, Значение - Массив счетов, или неопределено если не требуется ограничения
//
Процедура УстановитьСчетаЕПС(Объект, КоллекцияДоступныхСчетовЕПС) Экспорт
		
	Для Каждого ЭлементДоступныхСчетовЕПС Из КоллекцияДоступныхСчетовЕПС Цикл
		ИмяРеквизитаФормы = ЭлементДоступныхСчетовЕПС.Ключ;
		ДоступныеСчетаЕПС = Неопределено;
		Для Каждого ЭлементСоответствия Из ЭлементДоступныхСчетовЕПС.Значение Цикл
			ИмяРеквизитаОбъекта = ЭлементСоответствия.Ключ;
			ДоступныеСчетаЕПС = ЭлементСоответствия.Значение;
		КонецЦикла;
		
		Если ДоступныеСчетаЕПС <> Неопределено Тогда 
			Позиция = Найти(ИмяРеквизитаОбъекта, ".");
			Если Позиция = 0 Тогда 
				УстановитьСчетаЕПС_Шапки(ДоступныеСчетаЕПС, ИмяРеквизитаОбъекта, Объект);
			Иначе
				ИмяТабличнойЧасти = Лев(ИмяРеквизитаОбъекта, Позиция-1);
				ИмяРеквизитаСтроки = Прав(ИмяРеквизитаОбъекта, СтрДлина(ИмяРеквизитаОбъекта) - Позиция);
				УстановитьСчетаЕПС_ТабличнойЧасти(ДоступныеСчетаЕПС, ИмяТабличнойЧасти, ИмяРеквизитаСтроки, Объект);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПодсказкуСчетовЕПС(Элементы, Объект, КоллекцияДоступныхСчетовЕПС) Экспорт
	
	Для Каждого ЭлементДоступныхСчетовЕПС Из КоллекцияДоступныхСчетовЕПС Цикл
		ИмяРеквизитаФормы = ЭлементДоступныхСчетовЕПС.Ключ;
		
		ЭлементЕПС = Элементы.Найти(ИмяРеквизитаФормы);
		// Добавил заглушку т.к. некоторых элементов может не быть.
		Если ЭлементЕПС = Неопределено Тогда
		    Продолжить;
		КонецЕсли;
		//**********
		
		Для Каждого ЭлементСоответствия Из ЭлементДоступныхСчетовЕПС.Значение Цикл
			ИмяРеквизитаОбъекта = ЭлементСоответствия.Ключ;
		КонецЦикла;
		
		Позиция = Найти(ИмяРеквизитаОбъекта, ".");
		Если Позиция = 0 Тогда 
			ЗначениеСчетаЕПС = Объект[ИмяРеквизитаОбъекта];
		Иначе
			ИмяТабличнойЧасти = Лев(ИмяРеквизитаОбъекта, Позиция-1);
			ИмяРеквизитаСтроки = Прав(ИмяРеквизитаОбъекта, СтрДлина(ИмяРеквизитаОбъекта) - Позиция);
			Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда 
				ЗначениеСчетаЕПС = Объект[ИмяТабличнойЧасти][0][ИмяРеквизитаСтроки];	
			Иначе
				ЗначениеСчетаЕПС = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеСчетаЕПС) Тогда 
			ЭлементЕПС.Подсказка = ОбщегоНазначенияДУВызовСервера.ЗначениеРеквизитаОбъекта(ЗначениеСчетаЕПС, "Описание");	
		Иначе
			ЭлементЕПС.Подсказка = "";	
		КонецЕсли;
		ЭлементЕПС.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

Процедура УстановитьСчетаЕПС_Шапки(ДоступныеСчетаЕПС, ИмяРеквизитаОбъекта, Объект)
		
	ТекущееЗначение = Объект[ИмяРеквизитаОбъекта];
	УстанавливаемоеЗначение = ТекущееЗначение;
	Если ДоступныеСчетаЕПС.Количество() = 1 Тогда 
		УстанавливаемоеЗначение = ДоступныеСчетаЕПС[0];
	ИначеЕсли ДоступныеСчетаЕПС.Найти(ТекущееЗначение) = Неопределено Тогда 
		УстанавливаемоеЗначение = Неопределено;	
	КонецЕсли;
	Если ТекущееЗначение <> УстанавливаемоеЗначение Тогда 
		Объект[ИмяРеквизитаОбъекта] = УстанавливаемоеЗначение;	
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСчетаЕПС_ТабличнойЧасти(ДоступныеСчетаЕПС, ИмяТабличнойЧасти, ИмяРеквизитаСтроки, Объект)
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл		
		ТекущееЗначение = СтрокаТЧ[ИмяРеквизитаСтроки];
		УстанавливаемоеЗначение = ТекущееЗначение;
		Если ДоступныеСчетаЕПС.Количество() = 1 Тогда 
			УстанавливаемоеЗначение = ДоступныеСчетаЕПС[0];
		ИначеЕсли ДоступныеСчетаЕПС.Найти(ТекущееЗначение) = Неопределено Тогда 
			УстанавливаемоеЗначение = Неопределено;	
		КонецЕсли;
		Если ТекущееЗначение <> УстанавливаемоеЗначение Тогда 
			СтрокаТЧ[ИмяРеквизитаСтроки] = УстанавливаемоеЗначение;	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
 
