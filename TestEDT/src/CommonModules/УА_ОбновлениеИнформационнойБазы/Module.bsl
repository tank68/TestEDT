#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеАктивами";
	Описание.Версия = "0.0.1.7";
	Описание.ИдентификаторИнтернетПоддержки = "AM";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
				
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы. 

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно"; 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "0.0.1.7";
	Обработчик.Процедура           = "УА_ИнтернетПоддержкаПользователей.НастроитьВидыКонтактнойИнформации";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Оперативно";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОбщиеДанные     = Ложь;
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5ba95299-230b-4ac8-9abb-ab3662e5ff76");
	Обработчик.Версия          = "*";
	Обработчик.Процедура       = "УА_ОбработчикиОбновления.ЗаполнитьНедостающиеДанные";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление недостающих данных в системе.'");
						
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	//Рубль = Справочники.Валюты.НайтиПоКоду("643");
	//Если Не Рубль.Пустая() Тогда
	//	Если Не Рубль.Предопределенный Тогда
	//		ИзмВал = Рубль.ПолучитьОбъект();
	//		ИзмВал.ИмяПредопределенныхДанных = "Рубль";
	//		ИзмВал.ОбменДанными.Загрузка = Истина;
	//		ИзмВал.Записать();			
	//	КонецЕсли; 		
	//КонецЕсли; 	
	
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	// Вызываем процедуры-обработчики служебного события "ПослеОбновленияИнформационнойБазы".
	// (Для быстрого перехода к процедурам-обработчикам выполнить глобальный поиск по имени события.).
	//ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
	//    "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	//
	//Для каждого Обработчик Из ОбработчикиСобытия Цикл
	//    Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
	//        Продолжить;
	//    КонецЕсли;
	//    Обработчик.Модуль.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
	//        ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	//КонецЦикла;
	
	ПланыСчетов.ЕПС.ЗаполнитьНастройкиПоставщика(,Истина);
	РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.ДозаполнитьНастройкиАналитики();
			
КонецПроцедуры

Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
//@skip-warning Пустой метод
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает в журнал регистрации событие завершения процедуры.
Процедура ЗаписатьВЖурналЗавершениеПроцедуры(ИмяПроцедуры)
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершение процедуры ""%1"".'"), ИмяПроцедуры);
	ЗаписьЖурналаРегистрации(ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Информация, , , Текст);
	
КонецПроцедуры

// Записывает в журнал регистрации событие запуска процедуры.
Процедура ЗаписатьВЖурналЗапускПроцедуры(ИмяПроцедуры)
	
	ЗаписьЖурналаРегистрации(ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запуск процедуры ""%1"".'"), ИмяПроцедуры)); 
		
КонецПроцедуры

#КонецОбласти
