// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//   Регистратор - документ-регистратор
//   Движения - движения документа
//   МассивИсключаемыхРегистров - массив исключаемых регистров, по умолчанию Неопределено
//
// Вовращаемое значение:
//   Результат - массив используемых регистров
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
// Параметры:
//   Объект - документ-регистратор
//
// Вовращаемое значение:
//   подготавливает наборы записей документа к проведению документа
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект) Экспорт
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка,МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;	
		ТекстСообщения = НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
	Иначе
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].Очистить();
		КонецЦикла;	
	КонецЕсли;
	
	//TM-832
	Если Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
// Параметры:
//   Объект - документ-регистратор
//
// Вовращаемое значение:
//   подготавливает наборы записей документа к отмене проведения документа
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка, МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура сворачивает проводки перед проведением
// Вызывается из модуля документа при проведении.
//
// Параметры:
//   ДокументОбъект - документ-регистратор
//
// Вовращаемое значение:
//   сворачивает наборы записей документа перед проведением документа
//
Процедура СвернутьПроводки(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Движения.Найти("Хозрасчетный") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Таблица = ДокументОбъект.Движения.Хозрасчетный.Выгрузить();
	
	Колонки = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	СуммируемыеКолонки = Новый Массив;
	СуммируемыеКолонки.Добавить("КоличествоДт");
	СуммируемыеКолонки.Добавить("ВалютнаяСуммаДт");
	СуммируемыеКолонки.Добавить("КоличествоКт");
	СуммируемыеКолонки.Добавить("ВалютнаяСуммаКт");
	СуммируемыеКолонки.Добавить("Сумма");
	СуммируемыеКолонки.Добавить("СуммаНУДт");
	СуммируемыеКолонки.Добавить("СуммаНУКт");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(Колонки, СуммируемыеКолонки);
	Колонки.Удалить(Колонки.Найти("Регистратор"));
	Колонки.Удалить(Колонки.Найти("НомерСтроки"));
	                                       
	Таблица.Свернуть(СтрСоединить(Колонки,","),
					 СтрСоединить(СуммируемыеКолонки,","));					 					 	 
					 
	ДокументОбъект.Движения.Хозрасчетный.Загрузить(Таблица);				 
		
КонецПроцедуры // СвернутьПроводки()

//////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ БЗК

// Очищает записи наборов из коллекции Движения и проставляет флаг Записывать наборам, по которым 
// документ уже имеет движения
// 
//	Параметры:
//		Объект - документ
//		ЭтоНовый - признак того, что пишется новый документ
//		ДвиженияМетаданные - свойство метаданных Движения
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь, ДвиженияМетаданные = НеОпределено) Экспорт
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЭтоНовый Тогда
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка, Объект.Метаданные().Движения);
		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры
