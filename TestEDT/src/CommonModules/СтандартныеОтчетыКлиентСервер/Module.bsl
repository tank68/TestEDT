// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//		ЭлементСтруктуры - элемент структуры
//		Поле             - имя поля, по которому добавляется отбор
//		Значение         - значение отбора
//		ВидСравнения     - вид сравнений компоновки данных (по умолчанию: вид сравнения)
//		Использование    - признак использования отбора (по умолчанию: истина)
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД, элемент структуры настройки отчета
//		Поле - имя поля, которое нужно добавить в СКД
//		Заголовок - заголовок добавляемого поля
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

// Функция возвращает значение параметра компоновки данных
//
// Параметры:
//  Настройки - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//  Параметр - имя параметра СКД для которого нужно вернуть значение параметра
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция получает представление периода 
//
// Параметры:
//		НачалоПериода - по умолчанию неопределено или пользовательская дата
//		КонецПериода - по умолчанию неопределено или пользовательская дата
//      ТолькоДаты      - по умолчанию Ложь
//
// Возвращаемое значение:
//      ТекстПериод - представление периода
//
Функция ПолучитьПредставлениеПериода(НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

// Функция получает идентификатор объекта по переданной форме 
//
// Параметры:
//		Форма - переданная форма объекта
//
// Возвращаемое значение:
//      идентификатор объекта в Системе
//
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции

// Функция определяет простой тип 
//
// Параметры:
//		Значение - переданное значение для определения типа
//
// Возвращаемое значение:
//      Булево - если значение простого типа, то будет возвращена Истина
//
Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

// Функция определяет конец периода по заданной периодичности 
//
// Параметры:
//		Период - исходное значение даты
//		Периодичность - условное обозначение периодичности
//
// Возвращаемое значение:
//      КонецПериода - дата окончания периода
//
Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ ВЫБОРА ПЕРИОДА

// Функция определяет вид периода отчета по датам начала и конца периода  
//
// Параметры:
//   НачалоПериода - значение начала периода 
//   КонецПериода - значение даты конца периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   ВидПериода - вид периода 
//
Функция ПолучитьВидПериода(Знач НачалоПериода, Знач КонецПериода, Форма) Экспорт
	
	ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод;
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод;
	Иначе
		НачалоПериода = НачалоДня(НачалоПериода);
		КонецПериода  = КонецДня(КонецПериода);
		Если НачалоПериода = НачалоДня(НачалоПериода) И КонецПериода = КонецДня(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.День;
		ИначеЕсли НачалоПериода = НачалоНедели(НачалоПериода) И КонецПериода = КонецНедели(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя;
		ИначеЕсли НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц;
		ИначеЕсли НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал;
		ИначеЕсли НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Год;
		ИначеЕсли НачалоПериода = Дата(Год(НачалоПериода), 1, 1) И КонецПериода = Дата(Год(НачалоПериода), 5, 31, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), 6, 1) И КонецПериода = Дата(Год(НачалоПериода), 12, 31, 23, 59, 59) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие;
		ИначеЕсли НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 10, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 11) 
			И КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 20, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И КонецПериода = КонецМесяца(НачалоПериода)	Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Декада;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Функция формирует массив слов из текста представления периода 
// 
// Параметры: 
//  Текст - строковое представление периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   МассивСлов - массив слов из представления периода отчета
//
Функция ПолучитьМассивСловПредставляющихПериодОтчета(Текст, Форма) Экспорт
	
	МассивСлов = Новый Массив;
	ПоисковыйТекст = НРег(СокрЛП(Текст));
	ПозицияРазделителя = 1;
	Пока ПоисковыйТекст <> "" Цикл
		Слово = "";
		ПозицияРазделителя = 0;
		Если Найти(ПоисковыйТекст, " ") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, " ")), Найти(ПоисковыйТекст, " "));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, ".") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, ".")), Найти(ПоисковыйТекст, "."));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, "/") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, "/")), Найти(ПоисковыйТекст, "/"));
		КонецЕсли;
		Если Найти(ПоисковыйТекст, "\") > 0 тогда
			 ПозицияРазделителя = ?(ПозицияРазделителя > 0, Мин(ПозицияРазделителя, Найти(ПоисковыйТекст, "\")), Найти(ПоисковыйТекст, "\"));
		КонецЕсли;
		
		Если ПозицияРазделителя = 0 тогда
			Слово = СокрЛП(ПоисковыйТекст);
			ПоисковыйТекст = "";
		Иначе
			Слово = СокрЛП(Сред(ПоисковыйТекст, 1, ПозицияРазделителя-1));
		КонецЕсли;
		
		Если Слово <> " " И Слово <> "." И Слово <> "/" И Слово <> "\" И Слово <> "" тогда
			МассивСлов.Добавить(Слово);
		КонецЕсли;

		ПоисковыйТекст = СокрЛП(Прав(ПоисковыйТекст, СтрДлина(ПоисковыйТекст) - ПозицияРазделителя));
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции

// Подбирает период отчета по виду периода и текущим датам отчетов
//
Функция ПодобратьПериодОтчета(ВидПериода, Текст, ДатаНачала, ДатаОкончания, Форма) Экспорт
	
	ДанныеДляВыбора = Новый СписокЗначений;
	
	МассивСлов = ПолучитьМассивСловПредставляющихПериодОтчета(Текст, Форма);
	
	ПолучитьЗначениеПериода(ВидПериода, МассивСлов, ДанныеДляВыбора, Форма);
	
	Возврат ДанныеДляВыбора;
	
КонецФункции

Процедура ПолучитьЗначениеПериода(ВидПериода, МассивСлов, ДанныеДляВыбора, Форма)
	
	День  = День(ТекущаяДата());
	Месяц = Месяц(ТекущаяДата());
	Год   = Год(ТекущаяДата());
	
	Если Форма.ДоступныеПериодыОтчета.День = ВидПериода Тогда
		Если МассивСлов.Количество() > 0 Тогда                 
			Если СодержитСимволы(МассивСлов[0], "1234567890") Тогда
				День = Число(МассивСлов[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 1 Тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[1]);
			Если НомерМесяца <> Неопределено Тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 2 Тогда
			Если СодержитСимволы(МассивСлов[2], "1234567890") Тогда
				Год = ПолучитьМесяц(МассивСлов[2]);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляВыбора.Добавить(Дата(Год, Месяц, День), Формат(Дата(Год, Месяц, День), "ДФ='dd MMMM yyyy'"))
		
	ИначеЕсли Форма.ДоступныеПериодыОтчета.Неделя = ВидПериода Тогда
	// Период Неделя не обрабатывается
	ИначеЕсли Форма.ДоступныеПериодыОтчета.Декада = ВидПериода Тогда
		Если День <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли День >= 11 И День <= 20 Тогда
			НомерДекады = 2;
		ИначеЕсли День >= 21 Тогда
			НомерДекады = 3;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 0 Тогда
			Если СодержитСимволы(МассивСлов[0], "123") Тогда
				НомерДекады = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 1 Тогда
			Если Найти(МассивСлов[1], "дек") = 0  Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		Если МассивСлов.Количество() > 2 Тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[2]);
			Если НомерМесяца <> Неопределено Тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 3 Тогда
			Если СодержитСимволы(МассивСлов[3], "1234567890") Тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоДекады = Дата(Год, Месяц, (НомерДекады - 1) * 10 + 1);
		КонецДекады  = КонецПериодаОтчета(ВидПериода, НачалоДекады, Форма);
		
		ДанныеДляВыбора.Добавить(НачалоДекады, ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоДекады, КонецДекады, Форма))
		
	ИначеЕсли Форма.ДоступныеПериодыОтчета.Месяц = ВидПериода Тогда
		День = 1;

		Если МассивСлов.Количество() > 0 Тогда
			НомерМесяца = ПолучитьМесяц(МассивСлов[0]);
			Если НомерМесяца <> Неопределено Тогда
				Месяц = НомерМесяца;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 1 Тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") Тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НачалоМесяца = Дата(Год, Месяц, День);
		Исключение
			Возврат;
		КонецПопытки;
		КонецМесяца  = КонецПериодаОтчета(ВидПериода, НачалоМесяца, Форма);
		
		ДанныеДляВыбора.Добавить(НачалоМесяца, ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоМесяца, КонецМесяца, Форма))
		
	ИначеЕсли Форма.ДоступныеПериодыОтчета.Квартал = ВидПериода Тогда
		НомерКвартала = 1;
		Если Месяц <= 3 Тогда
			НомерКвартала = 1;
		ИначеЕсли Месяц >= 4 И Месяц <= 6 Тогда
			НомерКвартала = 2;
		ИначеЕсли Месяц >= 7 И Месяц <= 9 Тогда
			НомерКвартала = 3;
		ИначеЕсли Месяц >= 10 Тогда
			НомерКвартала = 4;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 0 Тогда
			Если СодержитСимволы(МассивСлов[0], "1234") Тогда
				НомерКвартала = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 1 Тогда
			Если Найти(МассивСлов[1], "кв") = 0  Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если МассивСлов.Количество() > 1 Тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") Тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоКвартала = НачалоКвартала(Дата(Год, (НомерКвартала - 1) * 3 + 1, 1));
		КонецКвартала  = КонецПериодаОтчета(ВидПериода, НачалоДекады, Форма);
		
		ДанныеДляВыбора.Добавить(НачалоКвартала, ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоКвартала, КонецКвартала, Форма))

	ИначеЕсли Форма.ДоступныеПериодыОтчета.Полугодие = ВидПериода Тогда
		НомерПолугодия = 1;
		Если Месяц <= 6 Тогда
			НомерПолугодия = 1;
		Иначе
			НомерПолугодия = 2;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 0 Тогда
			Если СодержитСимволы(МассивСлов[0], "12") Тогда
				НомерКвартала = Число(МассивСлов[0]);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСлов.Количество() > 1 Тогда
			Если Найти(МассивСлов[1], "пол") = 0  Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если МассивСлов.Количество() > 1 Тогда
			Если СодержитСимволы(МассивСлов[1], "1234567890") Тогда 
				Год = ПолучитьМесяц(МассивСлов[3]);
			КонецЕсли;
		КонецЕсли;
		
		НачалоПолугодия = НачалоКвартала(Дата(Год, (НомерПолугодия - 1) * 6 + 1, 1));
		КонецПолугодия  = КонецПериодаОтчета(ВидПериода, НачалоДекады, Форма);
		
		ДанныеДляВыбора.Добавить(НачалоПолугодия, ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоКвартала, КонецКвартала, Форма))
		
	ИначеЕсли Форма.ДоступныеПериодыОтчета.Год = ВидПериода Тогда
		Для Каждого Слово Из МассивСлов Цикл
			Если СодержитСимволы(Слово, "1234567890") Тогда 
				Год = Число(Слово);
				Если Год < 10 Тогда // один знак  
					ТекГод = Год(ТекущаяДата());
					Год = Цел(ТекГод / 10) * 10 + Год;
				ИначеЕсли Год >= 10 И Год < 100  Тогда // два знака
					ТекГод             = Год(ТекущаяДата());
					ТекСтолетие        = Цел(ТекГод / 100) * 100;
					ПредыдущееСтолетие = ТекСтолетие - 100;
					ВерхняяГраницаТекСтолетия = ТекГод - ТекСтолетие + 20;
					Если Год >= 0 И ВерхняяГраницаТекСтолетия >= Год Тогда
						Год = Год + ТекСтолетие;
					Иначе
						Год = Год + ПредыдущееСтолетие;
					КонецЕсли;
				КонецЕсли;
				НачалоГода = Дата(Год, 1, 1);
				КонецГода  = Дата(Год, 12, 31, 23, 59, 59);
				ДанныеДляВыбора.Добавить(НачалоГода, ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоГода, КонецГода, Форма))
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМесяц(СтрокаПредставленияМесяца)
	
	СписокМесяцев = Новый СписокЗначений;
	СписокМесяцев.Добавить(1, "янв");
	СписокМесяцев.Добавить(2, "фев");
	СписокМесяцев.Добавить(3, "мар");
	СписокМесяцев.Добавить(4, "апр");
	СписокМесяцев.Добавить(5, "май");
	СписокМесяцев.Добавить(6, "июн");
	СписокМесяцев.Добавить(7, "июл");
	СписокМесяцев.Добавить(8, "авг");
	СписокМесяцев.Добавить(9, "сень");
	СписокМесяцев.Добавить(10, "окт");
	СписокМесяцев.Добавить(11, "ноя");
	СписокМесяцев.Добавить(12, "дек");
	
	Месяц = Неопределено;
	
	Если СодержитСимволы(СтрокаПредставленияМесяца, "1234567890") Тогда
		Месяц = Число(СтрокаПредставленияМесяца);
	Иначе
		Для Каждого ЭлементСписка Из СписокМесяцев Цикл
			Если Найти(СтрокаПредставленияМесяца, ЭлементСписка.Представление) > 0 Тогда
				Месяц = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Месяц;
	
КонецФункции 

Функция СодержитСимволы(СтрокаНаПроверки, СтрокаСимволов)
	
	СодержатТолькоПодстроку = Истина;
	
	СимволыПроверки = Новый СписокЗначений;
	
	Для Сч = 1 По СтрДлина(СтрокаСимволов) Цикл
		СимволыПроверки.Добавить(КодСимвола(СтрокаСимволов, Сч));
	КонецЦикла;
	
	Для Сч = 1 По СтрДлина(СтрокаНаПроверки) Цикл
		Если СимволыПроверки.НайтиПоЗначению(КодСимвола(СтрокаНаПроверки, Сч)) = Неопределено Тогда
			СодержатТолькоПодстроку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СодержатТолькоПодстроку;
	
КонецФункции

// Функция получает список периодов по переданным виду периода и дате начала периода 
// 
// Параметры: 
//  ВидПериода - значение вида периода, элемент перечисления "Доступные периоды отчета"
//  НачалоПериода - дата начала периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   СписокПериодов - список значений периодов
//
Функция ПолучитьСписокПериодов(НачалоПериода, ВидПериода, Форма) Экспорт
	                                                                                                  
	СписокПериодов = Новый СписокЗначений;
	Если НачалоПериода = '00010101' Тогда
		Возврат Новый СписокЗначений;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода;
	КонецЕсли;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 7, 1, 1), "Предыдущие года");
		Для Сч = ТекущийГод По ТекущийГод + 6 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 7, 1, 1), "Последующие года");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = ТекущийГод По ТекущийГод + 1 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), "I полугодие " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 7, 1), "II полугодие " + Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 2, 1, 1), Формат(ТекущийГод + 2, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = ТекущийГод По ТекущийГод Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), "I квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 4, 1), "II квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 7, 1), "III квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 10, 1), "IV квартал " + Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = 1 По 12 Цикл
			СписокПериодов.Добавить(Дата(ТекущийГод, Сч, 1), Формат(Дата(ТекущийГод, Сч, 1), "ДФ='MMMM yyyy'"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");

	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		ТекущийГод   = Год(ЗначениеНачалоПериода);
		ТекущийМесяц = Месяц(ЗначениеНачалоПериода);
		
		СчМесяц = ?(ТекущийМесяц - 4 < 1, 12 + ТекущийМесяц - 4, ТекущийМесяц - 4);
		СчГод   = ?(ТекущийМесяц - 4 < 1, ТекущийГод - 1       , ТекущийГод);
		Сч = 6;
		
		Период = Дата(?(СчМесяц <> 1, СчГод, СчГод - 1), ?(СчМесяц > 1, СчМесяц - 1, 12), 1);
		СписокПериодов.Добавить(Период, Формат(Период, "ДФ='MMMM yyyy'") + "...");
		Пока Сч >0 Цикл
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1),  "I дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 11), "II дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 21), "III дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СчМесяц = СчМесяц + 1;
			Если СчМесяц > 12 Тогда
				СчГод = СчГод + 1;
				СчМесяц = 1;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1), Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		НачалоНедели = НачалоНедели(ЗначениеНачалоПериода) - 21 * 86400;
		
		СписокПериодов.Добавить(НачалоНедели - 7 * 86400, "Пред. недели ...");
		Для Сч = 0 По 6 Цикл
			НачНедели = НачалоНедели + 7 * Сч * 86400;  
			КонНедели = КонецНедели(НачНедели);
			СписокПериодов.Добавить(НачНедели, Формат(НачНедели, "ДФ=dd.MM") + " - " + Формат(КонНедели, "ДФ=dd.MM"));
		КонецЦикла;
		СписокПериодов.Добавить(НачалоНедели + 7 * 86400, "След. недели ..." );
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		КонецНедели   = КонецНедели(ЗначениеНачалоПериода);
		ДатаДняНедели = НачалоНедели(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(ДатаДняНедели - 86400, "Предыдущая неделя");
		
		Пока ДатаДняНедели < КонецНедели Цикл
			ДеньНед = ДеньНедели(ДатаДняНедели);
			
			СписокПериодов.Добавить(ДатаДняНедели, Формат(ДатаДняНедели, "ДФ='dd MMMM yyyy (ddd)'"));
			
			ДатаДняНедели = ДатаДняНедели + 86400;
		КонецЦикла;
		
		СписокПериодов.Добавить(КонецНедели + 1, "Следующая неделя");
	КонецЕсли;
		
	Возврат СписокПериодов;
	
КонецФункции

// Функция формирует представление периода отчета по переданным виду периода и датам начала и окончания периода 
// 
// Параметры: 
//  ВидПериода - вид периода
//  НачалоПериода - значение даты начала периода
//  КонецПериода - значение даты окончания периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   строковое значение - представление периода отчета
//
Функция ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода, Форма) Экспорт
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда	
		Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
			Возврат "";
		Иначе
			Возврат Формат(НачалоПериода, "ДФ=dd.MM.yy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yy");
		КонецЕсли;
	Иначе
		Список = ПолучитьСписокПериодов(НачалоПериода, ВидПериода, Форма);
		
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция определяет начало периода отчета по переданным виду периода и дате периода 
// 
// Параметры: 
//  ВидПериода - вид периода, перечисление "Доступные периоды отчета"
//  ДатаПериода - дата периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   НачалоПериода - дата начала периода
//
Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода, Форма) Экспорт
	
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		Если Месяц(ДатаПериода) > 6 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) > 10 И День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
		
	КонецЕсли;
		
	Возврат НачалоПериода;
	
КонецФункции

// Функция определяет конец периода отчета по переданным виду периода и дате периода 
// 
// Параметры: 
//  ВидПериода - вид периода, перечисление "Доступные периоды отчета"
//  ДатаПериода - дата периода
//   ФормаОтчета - форма, из которой вызвана функция
//
// Возвращаемое значение:
//   КонецПериода - дата окончания периода
//
Функция КонецПериодаОтчета(ВидПериода, ДатаПериода, Форма) Экспорт
	
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		КонецПериода = КонецГода(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		Если Месяц(ДатаПериода) > 6 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) > 10 И День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		КонецПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		КонецПериода = КонецДня(ДатаПериода);
		
	КонецЕсли;
		
	Возврат КонецПериода;
	
КонецФункции

// Функция обновляет представление периода отчета по переданным виду периода и датам начала и окончания периода 
// 
// Параметры: 
//  Форма - форма, из которой вызвана функция
//  НачалоПериода - значение даты начала периода
//  КонецПериода - значение даты окончания периода
//
// Возвращаемое значение:
//   строковое значение - представление периода отчета
//
Процедура ОбновитьПредставлениеПериода(Форма, НачалоПериода, КонецПериода) Экспорт
	
	Форма.ВидПериода = СтандартныеОтчетыКлиентСервер.ПолучитьВидПериода(НачалоПериода, КонецПериода, Форма);
	Форма.Период     = СтандартныеОтчетыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Форма.ВидПериода, 
		НачалоПериода, КонецПериода, Форма);
	
	КонецПроцедуры
	
// Процедура управляет состояние поля табличного документа
//
//Параметры:
//  ПолеТабличногоДокумента – ПолеФормы – поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               – Строка – задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");;
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			//ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		Иначе
			ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'"));
	КонецЕсли;
	
КонецПроцедуры

// Функция аименование задания выполнения отчета по переданной форме 
//
// Параметры:
//		Форма - форма отчета
//
// Возвращаемое значение:
//      НаименованиеЗадания - строковое наименование задания
//
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	ИмяОтчета = ПолучитьИдентификаторОбъекта(Форма);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С СОСТОЯНИЕМ ОТЧЕТА

// Процедура устанавливает состояние
//
//Параметры:
// Параметры:
//	Форма - форма отчета
//  НеИспользовать               – Строка – задает вид состояния.
//
Процедура УстановитьСостояние(Форма, НеИспользовать = Ложь) Экспорт
	
	Если НеИспользовать Тогда
		Форма.Элементы.Результат.ОтображениеСостояния.Видимость                      = Ложь;
		Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Иначе
		Форма.Элементы.Результат.ОтображениеСостояния.Видимость                      = Истина;
		Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	КонецЕсли;
	
КонецПроцедуры