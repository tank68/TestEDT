  ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАМЕРА ПРОИЗВОДИТЕЛЬНОСТИ

// Фиксирует время начала ключевой операции
//
// Параметры:
//  ДополнительныеСвойства - Структура, дополнительные свойства объекта документа
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, ключевая операция, которая выполняется в данный момент
//
Процедура ЗафиксироватьВремяНачалаКлючевойОперации(ДополнительныеСвойства, КлючеваяОперация) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	ДополнительныеСвойства.Вставить("КлючеваяОперация", КлючеваяОперация);
	ДополнительныеСвойства.Вставить("ВремяНачала", ВремяНачала);
	
КонецПроцедуры

// Фиксирует время окончания ключевой операции
//
// Параметры:
//  ДополнительныеСвойства - Структура, дополнительные свойства объекта документа
//
Процедура ЗафиксироватьВремяОкончанияКлючевойОперации(ДополнительныеСвойства) Экспорт
	
	КлючеваяОперация = Неопределено;
	ВремяНачала = Неопределено;
	Если ДополнительныеСвойства.Свойство("КлючеваяОперация", КлючеваяОперация) И
		ДополнительныеСвойства.Свойство("ВремяНачала", ВремяНачала) Тогда
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

 // Функция удаляет повторяющиеся элементы массива  
 //
 // Параметры:
 //    Массив - переданный для обработки массив
 //    НеИспользоватьНеопределено  - флаг неиспользования значений Неопределено, по умолчанию Ложь
 //
 // Возвращаемое значение:
 //    Массив - тот же массив без повторяющихся значений
 //
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт

	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки();
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки();
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки();

	Если ТипЗнч(Массив) = Тип("Массив") Тогда

		УжеВМассиве = Новый Соответствие;
		БылоНеопределено = Ложь;

		КолвоЭлементовВМассиве = Массив.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Массив;

КонецФункции

// Функция не используется. Отбор по основной организации не устаннавливается
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	// Если значение отбора передается в параметрах формы,
	// то отбор по основной организации не устанавливается.
	Если Не Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
		Если ЗначениеОтбора = Неопределено Тогда
			//ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			//Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			//	ЗначениеОтбора = ОсновнаяОрганизация;
			//Иначе
			//	Возврат Неопределено;
			//КонецЕсли;
		КонецЕсли;

		//Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") Тогда
		//	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		//Иначе
		//	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		//КонецЕсли;

		Представление = НСтр("ru = 'Отбор по основной организации (%1)'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, Строка(ЗначениеОтбора));

		//ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(Форма[ИмяСписка], ИмяРеквизита,
		//	ЗначениеОтбора, ВидСравненияОтбора, Представление);

		Возврат ЗначениеОтбора;

	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСписокПортфелей(ЭлементПолеПортфель, СоответствиеПортфелей) Экспорт
	
	СоответствиеПортфелей = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Портфели.Ссылка КАК Порфель,
	|	Портфели.Наименование КАК ПортфельПредставление
	|ИЗ
	|	Справочник.Портфели КАК Портфели
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПортфельПредставление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементПолеПортфель.СписокВыбора.Очистить();
	МаксКоличествоСимволов = 40;
	Пока Выборка.Следующий() Цикл
		Ключ     = СтрЗаменить("П" + Выборка.Порфель.УникальныйИдентификатор(), "-", "");
		Значение = Новый Структура("Портфель", Выборка.Порфель);
		СоответствиеПортфелей.Вставить(Ключ, Значение);
		
		ПортфельПредставление = Выборка.ПортфельПредставление;
		
		ЭлементПолеПортфель.СписокВыбора.Добавить(Ключ, ПортфельПредставление);
		
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(ПортфельПредставление));
	КонецЦикла;
	
	ЭлементПолеПортфель.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ЭлементПолеПортфель.ВысотаСпискаВыбора = ?(ЭлементПолеПортфель.СписокВыбора.Количество() > 15, 15, ЭлементПолеПортфель.СписокВыбора.Количество());

КонецПроцедуры
