///////////////////////////////////////////////////////////////////////////////////
// Процедуры общего назначения ДУ, исполняемые на клиенте
///////////////////////////////////////////////////////////////////////////////////

// Процедура выводит результаты отладки в печатный документ 
//
// Параметры: нет
//
// Возвращаеые значения: 
//   показывает табличный документ с результатами отладки
//
Процедура ПоказатьРезультатОтладки() Экспорт
	
	Возврат;
	
	//Если НЕ ПолныеПрава.ФормироватьЛогОтладки() Тогда
	//	Возврат;
	//КонецЕсли;
	
	//АдресРезультата = ПолныеПрава.ПараметрСеанса("РезультатОтладки");
	АдресРезультата = "";
	Если НЕ ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗНЧ(Результат)<>Тип("ТабличныйДокумент") Тогда
		Сообщить("Лог отладки не содержит данных.");
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДУ.ОчиститьРезультатОтладки();
	
	Результат.ОтображатьСетку 	= Ложь;
	Результат.ТолькоПросмотр	= Истина;
	
//{NFO-1337
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Макет");
    ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, "Макет");
    ПечатнаяФорма.СинонимМакета = "Макет";
    ПечатнаяФорма.ТабличныйДокумент = Результат;
    ПечатнаяФорма.ИмяФайлаПечатнойФормы = "Макет";

	КлючУникальности = Строка(Новый УникальныйИдентификатор);

	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура("ЗаголовокФормы, ПечатьЛогаОтладки", "Лог отладки от " + ТекущаяДата(), Истина);
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", Новый СписокЗначений);

	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, , КлючУникальности);	
//}NFO-1337	
	
КОнецПроцедуры

// Процедура устанавливает параметры, необходимые для начала выбора субконто по счету  
//
// Параметры:
//   Форма - форма, из которой происходит вызов, 
//   Элемент - элемент на форме, 
//   СтандартнаяОбработка - флаг использования стандартной обработки, 
//   СписокПараметров - список параметров
//
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КупонныеПериоды"));
	ТипКупонныеПериоды = Новый ОписаниеТипов(Массив);
	ПараметрыВыбора = Новый Структура();
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами")
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметров  = Новый Структура;			
			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда				
				СтруктураПараметров.Вставить("Портфель", СписокПараметров.Портфель);				
				Если СписокПараметров.Свойство("Контрагент") Тогда
					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
				КонецЕсли;				
				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
				КонецЕсли;				
				Если СписокПараметров.Свойство("Дата") Тогда
					СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
				КонецЕсли;
				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
				КонецЕсли;
				СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
			
		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметров  = Новый Структура;
			СтруктураПараметров.Вставить("Портфель", СписокПараметров.Портфель);				
			Если СписокПараметров.Свойство("Актив") Тогда
				СтруктураПараметров.Вставить("Актив", СписокПараметров.Актив);
			КонецЕсли;				
			Если СписокПараметров.Свойство("МестоХранения") Тогда
				СтруктураПараметров.Вставить("МестоХранения", СписокПараметров.МестоХранения);
			КонецЕсли;				
			Если СписокПараметров.Свойство("Дата") Тогда
				СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
			КонецЕсли;
			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
			
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);

		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.КупонныеПериоды")
				И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = ТипКупонныеПериоды И Прав(Элемент.Имя, 1) = Строка(Индекс) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура("Владелец", СписокПараметров.Облигация);
			ОткрытьФорму("Справочник.КупонныеПериоды.ФормаВыбора", ПараметрыФормы, Элемент);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает параметры субконто, видимость и отбор.
// Имена в форме обязательно должны называться "Субконто1".. Либо СубконтоКт1 тогда в переменную Префикс 
//нужно передать в данном случае "Кт" 
// Параметры:
//  Счет -  счет
//  Форма - форма
//  Контрагент - значения для отбора из справочника Контрагенты или ПИФ
Процедура УстановитьСубконтоИОтбор(Счет, Форма, Контрагент=Неопределено, Эмитент = Неопределено, Префикс="") Экспорт
	
	ДанныеСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет);
	МассивПараметров = Новый Массив();
	
	Для Индекс = 1 По 3 Цикл
		Если Форма.Элементы.Найти("Субконто"+ Префикс+Индекс) <> Неопределено Тогда
			Если ДанныеСчета["ВидСубконто" + Префикс+ Индекс] <> Неопределено  Тогда
				Форма.Элементы["Субконто" + Префикс+ Индекс].Заголовок = ДанныеСчета["ВидСубконто" + Префикс+ Индекс+"Наименование"];
				Форма.Элементы["Субконто" + Префикс+ Индекс].Видимость = Истина;
				Форма.Элементы["Субконто" + Префикс+ Индекс].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Префикс+ Индекс + "ТипЗначения"];
				//Отбор
				Если ДанныеСчета["ВидСубконто" + Префикс+ Индекс + "ТипЗначения"] = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета") Тогда
					Если ЗначениеЗаполнено(Контрагент) Тогда
						МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Контрагент));
					КонецЕсли;
				ИначеЕсли ДанныеСчета["ВидСубконто" + Префикс+ Индекс + "ТипЗначения"] = Новый ОписаниеТипов("СправочникСсылка.Облигации") ИЛИ 
					ДанныеСчета["ВидСубконто" + Префикс+ Индекс + "ТипЗначения"] = Новый ОписаниеТипов("СправочникСсылка.Акции")
					Тогда
					Если ЗначениеЗаполнено(Эмитент) Тогда
						МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Эмитент", Эмитент));
					КонецЕсли;	
				КонецЕсли;
				Если МассивПараметров.Количество() > 0 Тогда
					ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
					Форма.Элементы["Субконто" + Индекс].ПараметрыВыбора = ПараметрыВыбора;
				КонецЕсли;
			Иначе 
				Форма.Элементы["Субконто" + Префикс+ Индекс].Заголовок = "";
				Форма.Элементы["Субконто" + Префикс+ Индекс].Видимость = Ложь;
				Форма.Элементы["Субконто" + Префикс+ Индекс].ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПортфельПриИзменении(Объект) Экспорт
	
	//ЗаполнитьЗначенияСвойств(Объект, ОбщегоНазначенияДУПовтИсп.ВидыУчетаПоПортфелю(Объект.Портфель));
	
КонецПроцедуры

Функция СформироватьЗаголовокВидовУчета(Объект) Экспорт
	
	СписокДоступныхВидовУчета = Новый Массив;
	Если Объект.Свойство("БУ") И Объект.БУ Тогда
		СписокДоступныхВидовУчета.Добавить("РСБУ");
	КонецЕсли;
	Если Объект.Свойство("НУ") И Объект.НУ Тогда
		СписокДоступныхВидовУчета.Добавить("НУ");
	КонецЕсли;
	Если Объект.Свойство("ВУ") И Объект.ВУ Тогда
		СписокДоступныхВидовУчета.Добавить("ВУ");
	КонецЕсли;
	Если Объект.Свойство("УУ") И Объект.УУ Тогда
		СписокДоступныхВидовУчета.Добавить("УУ");
	КонецЕсли;
	Если Объект.Свойство("ЕПС") И Объект.ЕПС Тогда
		СписокДоступныхВидовУчета.Добавить("ЕПС");
	КонецЕсли;
	Если Объект.Свойство("НУ_ЕПС") И Объект.НУ_ЕПС Тогда
		СписокДоступныхВидовУчета.Добавить("ЕПС: НУ");
	КонецЕсли;
	
	Если СписокДоступныхВидовУчета.Количество() Тогда
		ТекстЗаголовка = СтрСоединить(СписокДоступныхВидовУчета, ", ");
	Иначе
		ТекстЗаголовка = "Не выбран ни один вид учета."
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////
// Процедуры открытия форм с отборами
///////////////////////////////////////////////////////////////////////////////////

// Открывает форму счета ДЕПО с отбором по портфелю
//
Процедура ОткрытьФормуСчетаДепо(Портфель, Элемент) Экспорт
	
	ФормаВыбора = ПолучитьФорму("Справочник.СчетаДепо.ФормаВыбора", , Элемент);
	СписокОтбор = ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	
	ВидДоговораСписок = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Портфель) Тогда
		ВидДоговораСписок.Добавить(Портфель);
	КонецЕсли;
	ВидДоговораСписок.Добавить(ПредопределенноеЗначение("Справочник.Портфели.ПустаяСсылка"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтбор, "Портфель", ВидДоговораСписок, ВидСравненияКомпоновкиДанных.ВСписке, ,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	ОткрытьФорму(ФормаВыбора);
	
КонецПроцедуры

// Открывает форму счета брокера с отбором по портфелю или пулу
//
Процедура ОткрытьФормуСчетаБрокера(Портфель, Элемент) Экспорт
	
	ФормаВыбора = ПолучитьФорму("Справочник.СчетаБрокера.ФормаВыбора", , Элемент);
	СписокОтбор = ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	
	ВидДоговораСписок = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Портфель) Тогда
		ВидДоговораСписок.Добавить(Портфель);
	КонецЕсли;
	ВидДоговораСписок.Добавить(ПредопределенноеЗначение("Справочник.Портфели.ПустаяСсылка"));

	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокОтбор.Элементы, "Группа ИЛИ" , ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);//XG-162
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "Портфель", ВидДоговораСписок, ВидСравненияКомпоновкиДанных.ВСписке, ,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	// Если ведется пуловой учет и заполнен пул у договора ДУ, 
	// то делаем отбор по пулу
	ВестиПуловойУчет = ОбщегоНазначенияДУПовтИсп.ПолучитьЗначениеКонстанты("ВестиПуловойУчет");
	Если ВестиПуловойУчет Тогда
		Пул = ОбщегоНазначенияДУВызовСервера.ЗначениеРеквизитаОбъекта(Портфель, "Пул");
		Если ЗначениеЗаполнено(Пул) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "Пул", Пул, ВидСравненияКомпоновкиДанных.Равно, ,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);//XG-162
		КонецЕсли;
	КонецЕсли;

	ОткрытьФорму(ФормаВыбора);
	
КонецПроцедуры

#Область ОТЧЕТ_БРОКЕРА

Процедура ЗапомнитьСопоставлениеПоАктиву(Актив, ВнешнийКод, Брокер) Экспорт
	
	ШаблонВопроса = "Запомнить, что коду '%1' соответствует актив '%2' при загрузке отчета брокера '%3'?";
	ТекстВопроса = СтрШаблон(ШаблонВопроса, ВнешнийКод, Актив, Брокер);
	
	ЗапомнитьСопоставление(Актив, Брокер, ВнешнийКод, ТекстВопроса, ОбщегоНазначенияДУВызовСервера.КонтекстСопоставленияАктив());
	
КонецПроцедуры

Процедура ЗапомнитьСопоставлениеПоБирже(Биржа, ВнешнийКод, Брокер) Экспорт
	
	ШаблонВопроса = "Запомнить, что коду '%1' соответствует биржа '%2' при загрузке отчета брокера '%3'?";
	ТекстВопроса = СтрШаблон(ШаблонВопроса, ВнешнийКод, Биржа, Брокер);
	
	ЗапомнитьСопоставление(Биржа, Брокер, ВнешнийКод, ТекстВопроса, ОбщегоНазначенияДУВызовСервера.КонтекстСопоставленияБиржа());
	
КонецПроцедуры

Процедура ЗапомнитьСопоставлениеПоКонтрагенту(Контрагент, ВнешнийКод, Брокер) Экспорт
	
	ШаблонВопроса = "Запомнить, что коду '%1' соответствует контрагент '%2' при загрузке отчета брокера '%3'?";
	ТекстВопроса = СтрШаблон(ШаблонВопроса, ВнешнийКод, Контрагент, Брокер);
	
	ЗапомнитьСопоставление(Контрагент, Брокер, ВнешнийКод, ТекстВопроса, ОбщегоНазначенияДУВызовСервера.КонтекстСопоставленияКонтрагент());
	
КонецПроцедуры

Процедура ЗапомнитьСопоставление(Объект, Брокер, ВнешнийКод, ТекстВопроса, КонтекстСопоставления)
	
	Если Не ЗначениеЗаполнено(ВнешнийКод) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Брокер) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОбщегоНазначенияДУВызовСервера.ЕстьСопоставление(КонтекстСопоставления, Брокер, ВнешнийКод, Объект) Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("Брокер", Брокер);
	ДополнительныеПараметры.Вставить("ВнешнийКод", ВнешнийКод);
	ДополнительныеПараметры.Вставить("КонтекстСопоставления", КонтекстСопоставления);
	
	Оповещение = Новый ОписаниеОповещения("ЗапомнитьСопоставлениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

Процедура ЗапомнитьСопоставлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбщегоНазначенияДУВызовСервера.СоздатьСопоставление(ДополнительныеПараметры.КонтекстСопоставления, ДополнительныеПараметры.Брокер, ДополнительныеПараметры.ВнешнийКод, ДополнительныеПараметры.Объект);
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти 
