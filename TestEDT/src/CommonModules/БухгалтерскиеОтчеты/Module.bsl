//////////////////////////////////////////////////////////////////////////////////
//// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
////
//////////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

//// Процедура заполняет список значений с ключами отчетов, которые поддерживаются подсистемой
////
//Процедура СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов) Экспорт
//	
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.Продажи.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПродажиПоМесяцам.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателей.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикам.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.Имя);
//	
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОборотныеСредства.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПокупателей.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПоставщикам.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОстаткиДенежныхСредств.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПоступленияДенежныхСредств.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.РасходыДенежныхСредств.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.АнализДвиженийДенежныхСредств.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.РегистрыБУСубъектовМалогоПредпринимательства.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДоходыРасходы.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОстаткиТоваров.Имя);
//	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДвижениеТоваров.Имя);
//	
//КонецПроцедуры

Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями, при которой умещается заголовок, заданный
// в функции ЗаголовокГруппыПоказателей()
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

//// Устанавливает условное оформление для поля ТипГруппировки табличной части
//// Группировка настроек отчета.
////
//// Параметры:
////	Форма - УправляемаяФорма - форма отчета
////
//Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

//	УсловноеОформление = Форма.УсловноеОформление;


//	// Тип группировки "Без групп"

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


//	// Тип группировки "С группами"

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


//	// Тип группировки "Только группы"

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

//КонецПроцедуры

//Функция ВидыДоговоровПоставщиков() Экспорт
//	
//	ВидыДоговоров = Новый Массив;
//	
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
//		
//	Возврат ВидыДоговоров;
//	
//КонецФункции

//Функция ВидыДоговоровПокупателей() Экспорт
//	
//	ВидыДоговоров = Новый Массив;
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
//	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
//	
//	Возврат ВидыДоговоров;
//	
//КонецФункции

//Функция СчетаУчетаРасчетовПоставщиков() Экспорт

//	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));

//КонецФункции

//Функция СчетаУчетаРасчетовПокупателей() Экспорт

//	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));

//КонецФункции

//// Возвращает искомые значения из данных расшифровки
//// Параметры
//// - ДанныеРасшифровки - Данные расшифровки из СКД
//// - СтруктураПолей - Структура, ключи структуры соответствуют именам искомых в данных расшифровки полей
////  (имееи тип структура для того чтобы исключить дублирование имен полей)
//// - Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных, идентификатор элемента данных расшифроски 
////  в иерархии которого нужно осуществлять поиск
//Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СтруктураПолей, Расшифровка) Экспорт
//	
//	// Структура возвращаемых данных
//	// Структура на случай дублирования значений
//	СтруктураДанных = Новый Структура();
//		
//	Если ДанныеРасшифровки <> Неопределено Тогда
//		// Ищем интересующие нас поля в заданной расшифровке
//		Для каждого ЭлементДанных Из СтруктураПолей Цикл
//			// Получаем элемент расшифровки, в котором нужно искать поля
//			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
//			// Вызываем рекурсивный поиск поля
//			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
//			Если ЗначениеРасшифровки <> Неопределено Тогда
//				// Значение нашлось, помещаем в структуру
//				СтруктураДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат СтруктураДанных;

//КонецФункции

//// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД
//// Параметры
//// - Ссылка - Ссылка на элемент справочника
//Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
//	Возврат Строка(Ссылка.УникальныйИдентификатор());
//КонецФункции

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

//Функция СчетаУчетаРасчетов(ИсключенныеСчета)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ХозрасчетныйВидыСубконто_Контрагенты.Ссылка КАК Счет,
//	               |	ХозрасчетныйВидыСубконто_Договоры.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный КАК ЕстьДоговор
//	               |ПОМЕСТИТЬ СчетаКонтрагентыИДоговоры
//	               |ИЗ
//	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Контрагенты
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Договоры
//	               |		ПО ХозрасчетныйВидыСубконто_Контрагенты.Ссылка = ХозрасчетныйВидыСубконто_Договоры.Ссылка
//	               |ГДЕ
//	               |	ХозрасчетныйВидыСубконто_Контрагенты.ВидСубконто = &ВидСубконтоКонтрагенты
//	               |	И ХозрасчетныйВидыСубконто_Договоры.ВидСубконто = &ВидСубконтоДоговоры
//	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка В (&ИсключенныеСчета)
//	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка.Забалансовый
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ХозрасчетныйВидыСубконто_Документы.Ссылка
//	               |ПОМЕСТИТЬ СчетаДокументыРасчетов
//	               |ИЗ
//	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Документы
//	               |ГДЕ
//	               |	ХозрасчетныйВидыСубконто_Документы.ВидСубконто = &ВидСубконтоДокументРасчетов
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	СчетаКонтрагентыИДоговоры.Счет КАК Счет,
//	               |	ЕСТЬNULL(СчетаДокументыРасчетов.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный, ЛОЖЬ) КАК ЕстьДокументРасчетов
//	               |ПОМЕСТИТЬ Счета
//	               |ИЗ
//	               |	СчетаКонтрагентыИДоговоры КАК СчетаКонтрагентыИДоговоры
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаДокументыРасчетов КАК СчетаДокументыРасчетов
//	               |		ПО СчетаКонтрагентыИДоговоры.Счет = СчетаДокументыРасчетов.Ссылка
//	               |ГДЕ
//	               |	СчетаКонтрагентыИДоговоры.ЕстьДоговор
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Счет
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	Счета.Счет
//	               |ИЗ
//	               |	Счета КАК Счета
//	               |ГДЕ
//	               |	Счета.ЕстьДокументРасчетов
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	Счета.Счет
//	               |ИЗ
//	               |	Счета КАК Счета
//	               |ГДЕ
//	               |	НЕ Счета.ЕстьДокументРасчетов";
//	
//	Запрос.УстановитьПараметр("ИсключенныеСчета", 					ИсключенныеСчета);
//	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", 			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
//	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", 				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
//	Запрос.УстановитьПараметр("ВидСубконтоДокументРасчетов", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
//	
//	Счета = Новый Структура("СчетаСДокументомРасчетов, СчетаБезДокументаРасчетов", Новый СписокЗначений, Новый СписокЗначений);
//	
//	Результат = Запрос.ВыполнитьПакет();
//	Если Результат.Количество() = 5 Тогда
//		
//		Счета.Вставить("СчетаСДокументомРасчетов", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
//		Счета.Вставить("СчетаБезДокументаРасчетов", Результат[4].Выгрузить().ВыгрузитьКолонку("Счет"));
//		
//	КонецЕсли;

//	Возврат Счета;
//	
//КонецФункции

//// Возвращает значение искомого поля из элемента расшифровки
//Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
//	
//	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
//		// Ищем поля в текущем элементе
//		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
//		Если Поле <> Неопределено Тогда
//			// Возвращаем значение найденного поля
//			Возврат Поле.Значение;
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Если поле не нашлось, или текущий элемиент не содержит полей
//	// Ишем поля среди родителей элемента (вышестоящие группировки)
//	Родители  = Элемент.ПолучитьРодителей();
//	Если Родители.Количество() > 0 Тогда
//		
//		Для Каждого Родитель Из Родители Цикл
//			// Вызываем рекурсивный поиск поля
//			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
//			
//			Если ЗначениеРасшифровки <> Неопределено Тогда
//				Возврат ЗначениеРасшифровки;
//			КонецЕсли;
//			
//		КонецЦикла;
//	КонецЕсли;
//	
//	// Если ничего не нашлось
//	Возврат Неопределено;
//	
//КонецФункции

//#КонецОбласти
