#Область СлужебныеФункции

// Запросить данные сервиса 
// Входные параметры:
//		НастройкиСоединения 	- настройки соединения с сервисом RU:DATA
//		АдресРесурса			- адрес запрашиваемого ресурса
//  	ПараметрыЗапроса 	 	- передаваемые параметры (ключ/значение)
// 		МассивСвойств (необяз)  - массив полей для функции восстановления чтения
Функция HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, МассивСвойств = Неопределено) 
	ЗаголовкиЗапроса	= Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("Accept", "application/xml");
	Если НастройкиСервиса.Токен <> Неопределено Тогда
		ЗаголовкиЗапроса.Вставить("Authorization", "Bearer " + НастройкиСервиса.Токен);
	КонецЕсли;
	
	ИнетЗапрос	= Новый HTTPЗапрос;
	ИнетЗапрос.АдресРесурса	= АдресРесурса;
	ИнетЗапрос.Заголовки	= ЗаголовкиЗапроса;	

	ТелоЗапроса	= Новый ЗаписьJSON;
	ТелоЗапроса.УстановитьСтроку();
	ТелоЗапроса.ЗаписатьНачалоОбъекта();	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда 
			ТелоЗапроса.ЗаписатьИмяСвойства(Параметр.Ключ);
			ТелоЗапроса.ЗаписатьНачалоМассива();
			Для Каждого Значение Из Параметр.Значение Цикл
				ТелоЗапроса.ЗаписатьЗначение(Значение);
			КонецЦикла;
			ТелоЗапроса.ЗаписатьКонецМассива();
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Дата") Тогда 
			ТелоЗапроса.ЗаписатьИмяСвойства(Параметр.Ключ);
			ТелоЗапроса.ЗаписатьЗначение(ЗаписатьДатуJSON(Параметр.Значение, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата));
		Иначе
			ТелоЗапроса.ЗаписатьИмяСвойства(Параметр.Ключ);
			ТелоЗапроса.ЗаписатьЗначение(Параметр.Значение);	
		КонецЕсли;     		
	КонецЦикла;                         	
	ТелоЗапроса.ЗаписатьКонецОбъекта(); 	
	СтрокаТелоЗапроса	= ТелоЗапроса.Закрыть();  
	
	ИнетЗапрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса);
	Соединение = НастройкиСервиса.Соединение;
	Ответ	= Соединение.ОтправитьДляОбработки(ИнетЗапрос);
	
	Если НЕ Ответ.КодСостояния = 200 Тогда
		СтрокаСообщения = НСтр("ru='Не удалось корректно завершить запрос. Код ошибки: '") + Ответ.КодСостояния;		
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат Неопределено;
	КонецЕсли;	
	
	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьПоток(Ответ.ПолучитьТелоКакПоток());
	Если МассивСвойств <> Неопределено Тогда
		ОбщийМодуль = Вычислить("уа_ОбменСRUDATA");
		Результат = ПрочитатьJSON(Чтение, Ложь, , , "ФункцияВосстановленияЧтения", ОбщийМодуль , , МассивСвойств);
	Иначе
		Результат = ПрочитатьJSON(Чтение, Ложь);
	КонецЕсли; 
	Чтение.Закрыть();      
	                         
	Возврат Результат;	
КонецФункции 

// Преобразовать возвращаемые значения
Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
    Если Значение <> Неопределено Тогда
        Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Иначе
		Возврат Значение;
    КонецЕсли;
КонецФункции
#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Подключиться к сервису RU:Data
// Выходные параметры (структура)  - структура текущего соединения
// 		Соединение  - HTTP-соединение с сервисом
//		Токен 		- Токен пользователя
Функция ПодключитьсяКСервису()
	НастройкиСервиса = Новый Структура("Хост,Порт,Логин,Пароль,Адрес,Соединение,Токен");
	ИсточникДанных = Справочники.уа_ИсточникиДанных.RuData;
	УникальныйИдентификаторСсылки = Строка(ИсточникДанных.Ссылка.УникальныйИдентификатор());		
	НастройкиСервиса.Логин 	= ИсточникДанных.ИмяПользователя; 
	НастройкиСервиса.Пароль  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УникальныйИдентификаторСсылки, "Пароль");
	НастройкиСервиса.Хост	= ИсточникДанных.Сервер; 
	НастройкиСервиса.Порт	= ИсточникДанных.Порт; 
	
	Попытка
		Прокси = ?(НастройкиСервиса.Порт = 443, ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https"), ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http"));
		НастройкиСервиса.Соединение = Новый HTTPСоединение(НастройкиСервиса.Хост, НастройкиСервиса.Порт,,,Прокси,,
			?(НастройкиСервиса.Порт = 443, Новый ЗащищенноеСоединениеOpenSSL, Неопределено) );
	Исключение		
		СтрокаСообщения = НСтр("ru='Ошибка соединения с Интерфаксом. Техническая информация: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат Неопределено;
	КонецПопытки;  
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("login", НастройкиСервиса.Логин);
	ПараметрыЗапроса.Вставить("password", НастройкиСервиса.Пароль);
	
	АдресРесурса	= "/v2/Account/Login";
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, Неопределено);
	Если Результат <> Неопределено Тогда
		НастройкиСервиса.Токен = Результат.Token;
	КонецЕсли;	
	
	Возврат НастройкиСервиса;
КонецФункции

Процедура ВыйтиИзСервиса(НастройкиСервиса)
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("token", НастройкиСервиса.Токен);
	
	АдресРесурса	= "/v2/Account/Logoff";
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, Неопределено);	
	
	НастройкиСервиса.Соединение = Неопределено;
	НастройкиСервиса.Токен 		= Неопределено;
КонецПроцедуры

//Получить данные по ценной бумаге
//	Входные параметры (строка): 
//		Идентификатор - код гос. регистрации
//	Выходные параметры (структура):
//		shortname_rus - Краткое наименование инструмента
// 		fullname_rus- Полное наименование инструмента
//		reg_code 	- Регистрационный номер инструмента
//  	isin 		- Код ISIN 
//	    cfi 		- Код CFI
//		issue_vol 	- Объем выпуска (в штуках)
//		facevalue_currency - Валюта номинала
//		facevalue 	- Номинал
//		fininstid 	- Идентификатор эмитента выпуска в базе Интерфакс
//		fintooltype - Тип финансового инструмента (наименование)
//		fintoolid 	- Идентификатор инструмента в базе Интерфакс
//      begdistdate - Дата начала размещения
//		endmtydate 	- Дата погашения финансового инструмента
//      sec_type_br_code- Тип ц.б. по классификации Банка России
//      haveindexedfv 	- Облигация с индексируемым номиналом
//		amortisedmty 	- Признак наличия амортизационного погашения по выпуску 
//		secid		- Торговый код на МБ
Функция ПолучитьДанныеСервиса_InfoService_Securities(НастройкиСервиса, Идентификатор)
	ПараметрыЗапроса = Новый Соответствие;
	
	// Получаем основные атрибуты ценной бумаги
	АдресРесурса	= "/v2/Info/Securities";  	
	СтрокаФильтра = "reg_code='" + Идентификатор + "' AND securitykind <> 'Дробная часть'";	
	ПараметрыЗапроса.Вставить("filter", СтрокаФильтра);                                    
	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса);	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Элемент = Результат[0];
	
	Структура = Новый Структура("shortname_rus,fullname_rus,reg_code,isin,cfi,issue_vol,facevalue_currency,facevalue,inn,fintooltype,fintoolid");
	ЗаполнитьЗначенияСвойств(Структура, Элемент);	
	
	// Получаем дополнительные атрибуты ценной бумаги
	АдресРесурса	= "/v2/Info/FintoolReferenceData"; 
	СтрокаФильтра = "fintoolid=" + Формат(Структура.fintoolid, "ЧГ=0");
	ПараметрыЗапроса.Вставить("filter", СтрокаФильтра);
	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, СтрРазделить("begdistdate,endmtydate",","));
	Если ЗначениеЗаполнено(Результат) Тогда
		Структура.Вставить("begdistdate");
		Структура.Вставить("endmtydate");
		Структура.Вставить("sec_type_br_code");
		Структура.Вставить("haveindexedfv");	
		Структура.Вставить("amortisedmty");
		Элемент = Результат[0];  
		ЗаполнитьЗначенияСвойств(Структура, Элемент);		
	КонецЕсли;                                       
	
	// получаем идентификатор ценной бумаге на Московской бирже
	АдресРесурса	= "/v2/Moex/Securities"; 
	СтрокаФильтра = "fintoolid=" + Формат(Структура.fintoolid, "ЧГ=0");
	ПараметрыЗапроса.Вставить("filter", СтрокаФильтра);
	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса);
	Если ЗначениеЗаполнено(Результат) Тогда
		Элемент = Результат[0];   
		Структура.Вставить("secid");
		ЗаполнитьЗначенияСвойств(Структура, Элемент);		
	КонецЕсли; 
		
	Возврат Структура;	
КонецФункции

//Получить данные по эмитенту
//	Входные параметры (строка): 
//		Идентификатор - Идентификатор эмитента выпуска в базе Интерфакс
//	Выходные параметры (структура):
//		shortname_rus 	- Наименование эмитента (рус.)
// 		fullname_rus_nrd- Полное наименование эмитента в базе НРД (рус)
//      inn				- ИНН для российских компаний, TIN/TAX для остальных
//		kpp				- КПП
//		reg_code		- Государственный регистрационный номер
//		fininstid		- Идентификатор эмитента в базе Интерфакс
Функция ПолучитьДанныеСервиса_InfoService_Emitents(НастройкиСервиса, Идентификатор)
	ПараметрыЗапроса = Новый Соответствие;  	
	АдресРесурса	= "/v2/Info/Emitents"; 
	СтрокаФильтра = "inn=" + Идентификатор;	
	ПараметрыЗапроса.Вставить("filter", СтрокаФильтра);
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, Неопределено);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Структура = Новый Структура("shortname_rus,fullname_rus_nrd,inn,kpp,reg_code");	
	Элемент = Результат[0];   				
	ЗаполнитьЗначенияСвойств(Структура, Элемент);	
		
	Возврат Структура; 	
КонецФункции

// Получить потоки по ценным бумагам
// Входящие параметры:
//		МассивИдентификаторов - массив идентификаторов (ISIN, RegCode, NrdCode)
// Исходящие параметры (таблица значений):
// 		regcode 	- Регистрационный код
//	    rateDate 	- Дата определения даты либо факта события
// 	    offerDate	- Расчетная дата выкупа
// 	    endPeriod	- Окончание купонного периода
//		eventDate	- Дата события
//		eventType   - Тип события: CPN, CALL, MTY, CONV, DIV
//		pay1bond	- Выплата на одну облигацию
//		couponPeriod- Купонный период
//      couponRate	- Ставка купона, процентов годовых
Функция ПолучитьДанныеСервиса_InfoService_Calendar(НастройкиСервиса, МассивИдентификаторов)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("isinIds", МассивИдентификаторов);      	
	
	АдресРесурса	= "/v2/Info/Calendar"; 
	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, СтрРазделить("offerDate,rateDate,endPeriod,eventDate",","));
	
	ТЗ = Новый ТаблицаЗначений;
	ТипИдентификатор= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Идентификатор.Тип);		
	ТипЦена			= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Цена.Тип);
	ТипДата =  Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТЗ.Колонки.Добавить("regcode", 		ТипИдентификатор);
	ТЗ.Колонки.Добавить("rateDate", 	ТипДата);
	ТЗ.Колонки.Добавить("offerDate",	ТипДата);
	ТЗ.Колонки.Добавить("endPeriod", 	ТипДата);
	ТЗ.Колонки.Добавить("eventDate", 	ТипДата);
	ТЗ.Колонки.Добавить("eventType", 	ТипИдентификатор );
	ТЗ.Колонки.Добавить("pay1bond", 	ТипЦена);
	ТЗ.Колонки.Добавить("couponPeriod", ТипЦена);
	ТЗ.Колонки.Добавить("couponRate", 	ТипЦена);  
		
	Если ЗначениеЗаполнено(Результат) Тогда
		Для Каждого Элемент Из Результат.timeTableFields Цикл
			Строка = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла; 			
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Получить котировки Московской биржи
// Входные параметры: 
//		НастройкиСервиса - Структура текущего соединения
//		ДатаС	- Дата начала периода
//		ДатаПо	- Дата окончания периода
//		Рынок   - Наименование рынка (index, shares, bonds, ndm)
//		МассивИдентификаторов (необяз) - массив идентификаторов выпусков (торговый код)
Функция ПолучитьДанныеСервиса_Moex_History(НастройкиСервиса, ДатаС, ДатаПо, Рынок, МассивИдентификаторов = Неопределено)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("dateFrom", ДатаС);
	ПараметрыЗапроса.Вставить("dateTo", ДатаПо);
	ПараметрыЗапроса.Вставить("engine", "stock");
	ПараметрыЗапроса.Вставить("market", Рынок);    	
	Если МассивИдентификаторов <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("instruments", МассивИдентификаторов);  	
	КонецЕсли; 
	ПараметрыЗапроса.Вставить("market", Рынок);    	

	Если Рынок = "shares" Тогда
		ПараметрыЗапроса.Вставить("boardid", СтрРазделить("TQBR,TQIF,TQPI",","));
	ИначеЕсли Рынок = "bonds" Тогда 
		ПараметрыЗапроса.Вставить("boardid", СтрРазделить("TQOB,TQCB,TQRD",","));	
	КонецЕсли; 
			
	АдресРесурса	= "/v2/Moex/History";   	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, СтрРазделить("tradedate",","));
	
	ТЗ = Новый ТаблицаЗначений;
	ТипИдентификатор= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Идентификатор.Тип);		
	ТипЦена			= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Цена.Тип);
	ТипДата			= Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата) );		
	ТЗ.Колонки.Добавить("regnumber", 	ТипИдентификатор);		
	ТЗ.Колонки.Добавить("tradedate", 	ТипДата);
	ТЗ.Колонки.Добавить("currencyid",		ТипИдентификатор);
	ТЗ.Колонки.Добавить("facevalue", 	ТипЦена);
	ТЗ.Колонки.Добавить("bid", 			ТипЦена);
	ТЗ.Колонки.Добавить("offer", 		ТипЦена);
	ТЗ.Колонки.Добавить("accint", 		ТипЦена);
	ТЗ.Колонки.Добавить("marketprice2", ТипЦена);
	ТЗ.Колонки.Добавить("volume", 		ТипЦена);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Для Каждого Элемент Из Результат Цикл
			Если Элемент.tradingsession = 1 И НЕ ПустаяСтрока(Элемент.regnumber) Тогда
				Строка = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Элемент);
			КонецЕсли; 			
		КонецЦикла; 	
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Получить котировки НРД
// Входные параметры: 
//		НастройкиСервиса - Структура текущего соединения
//		ДатаС	- Дата начала периода
//		ДатаПо	- Дата окончания периода		
//		МассивИдентификаторов (необяз) - массив идентификаторов выпусков (код. гос.регистрации/ISIN/код НРД)
// Выходные параметры (таблица значений):
//		regcode - Регистрационный код
//      calcdate- Дата расчета
//      vp_pc	- Цена НРД
Функция ПолучитьДанныеСервиса_RuPrice_History(НастройкиСервиса, ДатаС, ДатаПо, МассивИдентификаторов = Неопределено)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("dateFrom", ДатаС);
	ПараметрыЗапроса.Вставить("dateTo", ДатаПо);
	Если МассивИдентификаторов <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("ids", МассивИдентификаторов);  	
	КонецЕсли; 
	ПараметрыЗапроса.Вставить("fields", СтрРазделить("calcdate,regcode,method_no,vp_pc",",") );
			
	АдресРесурса	= "/v2/RUPrice/History";   	

	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, СтрРазделить("calcdate",","));

	ТЗ = Новый ТаблицаЗначений;
	ТипИдентификатор= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Идентификатор.Тип);		
	ТипЦена			= Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.уа_Цена.Тип);
	ТипДата			= Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата) );		
	ТЗ.Колонки.Добавить("regcode", 		ТипИдентификатор);		                                        		
	ТЗ.Колонки.Добавить("calcdate", 	ТипДата);	
	ТЗ.Колонки.Добавить("vp_pc", 		ТипЦена);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Для Каждого Элемент Из Результат Цикл
			// используем только методы = 1, 2
			Если Элемент.method_no < 3 И НЕ ПустаяСтрока(Элемент.regcode) Тогда
				Строка = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Элемент);				
			КонецЕсли; 			
		КонецЦикла; 		
	КонецЕсли;  			

	Возврат ТЗ;
КонецФункции

// Получить данные кривой бескупонной доходности
// Входные параметры: 
//		НастройкиСервиса - Структура текущего соединения
//		Дата	- Дата расчета
// Выходные параметры (структура)
Функция ПолучитьДанныеСервиса_Bond_g_curve_ofz(НастройкиСервиса, Дата)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("date", Дата);
		
	АдресРесурса	= "/v2/Bond/g-curve-ofz"; 	      
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, СтрРазделить("dt",","));
	Возврат Результат;	
КонецФункции

Функция ПолучитьДанныеСервиса_Info_ResidualFaceValue(НастройкиСервиса, Идентификатор, Дата)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("date", Дата);
	ПараметрыЗапроса.Вставить("id", Идентификатор);
		
	АдресРесурса	= "/v2/Info/ResidualFaceValue";  	
	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса, Неопределено);
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеСервиса_Bond_CalculateBond(НастройкиСервиса, Идентификатор, Дата)
	ПараметрыЗапроса = Новый Соответствие; 
	ПараметрыЗапроса.Вставить("date", Дата);
	ПараметрыЗапроса.Вставить("id", Идентификатор); 
	ПараметрыЗапроса.Вставить("value", 1); 
	ПараметрыЗапроса.Вставить("valueType", 0); 
	ПараметрыЗапроса.Вставить("periods", 0); 
		
	АдресРесурса	= "/v2/Bond/CalculateBond";   	

	Результат = HTTPЗапросМетодPOST(НастройкиСервиса, АдресРесурса, ПараметрыЗапроса);
	Возврат Результат;
КонецФункции

#КонецОбласти 


#Область ЗаполнениеСправочников
// Найти и заполнить данные эмитента по идентификатору (ИНН)
Функция НайтиЗаполнитьЭмитента(НастройкиСервиса, Идентификатор, Перезаполнять = Ложь)  Экспорт
	ИсточникДанныхRuData = Справочники.уа_ИсточникиДанных.RuData;	
	Ссылка = РегистрыСведений.уа_СоответствияОбъектовУчета.НайтиОбъектПоИдентификатору(Идентификатор, 
		ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.Контрагенты, ИсточникДанныхRuData);
	ОбъектНеНайден = ?(Ссылка = Неопределено, Истина, Ложь);  
	
	Если Не ОбъектНеНайден И Не Перезаполнять Тогда
		Возврат Ссылка;
	КонецЕсли; 
                                                                        		
	ДанныеЭмитента = ПолучитьДанныеСервиса_InfoService_Emitents(НастройкиСервиса, Идентификатор);
	Если ЗначениеЗаполнено(ДанныеЭмитента) Тогда
		Эмитент 					= ?(ОбъектНеНайден, Справочники.Контрагенты.СоздатьЭлемент(), Ссылка.ПолучитьОбъект()); 
		Эмитент.Наименование 		= ДанныеЭмитента["SHORTNAME_RUS"];
		Эмитент.НаименованиеПолное 	= ДанныеЭмитента["FULLNAME_RUS_NRD"];
		Эмитент.ИНН					= ДанныеЭмитента["INN"];
		Эмитент.КПП					= ДанныеЭмитента["KPP"];
		Эмитент.ВидКонтрагента		= Перечисления.ВидКонтрагента.ЮридическоеЛицо;
		Эмитент.Записать();	
		Ссылка = Эмитент.Ссылка;		
	
		Если ЗначениеЗаполнено(ДанныеЭмитента["INN"]) Тогда
			РегистрыСведений.уа_СоответствияОбъектовУчета.ДобавитьСоответствиеОбъекта(ДанныеЭмитента["INN"], 
				ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.Контрагенты, Ссылка, ИсточникДанныхRuData);
		КонецЕсли;
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не удалось заполнить данные эмитента '") + Идентификатор;
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);           
	КонецЕсли;
	
	Возврат Ссылка; 
КонецФункции

// Найти и заполнить данные ценной бумаги по идентификатору (код гос. регистрации)
Функция НайтиЗаполнитьФинансовыйИнструмент(НастройкиСервиса, Идентификатор, Перезаполнять = Ложь) Экспорт
	ИсточникДанныхRuData = Справочники.уа_ИсточникиДанных.RuData;	
	Ссылка = РегистрыСведений.уа_СоответствияОбъектовУчета.НайтиОбъектПоИдентификатору(Идентификатор, 
		ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты, ИсточникДанныхRuData);
	ОбъектНеНайден = ?(Ссылка = Неопределено, Истина, Ложь);     
	
	Если Не ОбъектНеНайден И Не Перезаполнять Тогда
		Возврат Ссылка;
	КонецЕсли; 				
	
	ДанныеФИ = ПолучитьДанныеСервиса_InfoService_Securities(НастройкиСервиса, Идентификатор);    		
	Если ЗначениеЗаполнено(ДанныеФИ) Тогда
		ФИ 						= ?(ОбъектНеНайден, Справочники.уа_ФинансовыеИнструменты.СоздатьЭлемент(), Ссылка.ПолучитьОбъект()); 
		ФИ.Эмитент				= НайтиЗаполнитьЭмитента(НастройкиСервиса, ДанныеФИ["inn"], Перезаполнять);  		
		ФИ.Наименование 		= ДанныеФИ["shortname_rus"];
		ФИ.НаименованиеПолное 	= ДанныеФИ["fullname_rus"];
		ФИ.ISIN 				= ДанныеФИ["isin"];
		ФИ.КодГосРегистрации	= ДанныеФИ["reg_code"];
		ФИ.CFI					= ДанныеФИ["CFI"];
		ФИ.ВалютаНоминала		= РегистрыСведений.уа_СоответствияОбъектовУчета.НайтиОбъектПоИдентификатору(
			ДанныеФИ["facevalue_currency"], ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.Валюты, ИсточникДанныхRuData);
		ФИ.Номинал				= ДанныеФИ["facevalue"];
		ФИ.КатегорияАктива		= Перечисления.уа_КатегорииАктива.НайтиПоКоду(ДанныеФИ["fintooltype"]);
		ФИ.КлассификацияЦБ		= Перечисления.уа_КлассификацияЦБ.НайтиПоКоду(ДанныеФИ["sec_type_br_code"]);
		ФИ.ТипЦББР 				= Перечисления.уа_ТипыЦенныхБумагБР.НайтиПоКоду(ДанныеФИ["sec_type_br_code"]);         		
		ФИ.Родитель				= Справочники.уа_ФинансовыеИнструменты.НайтиГруппуПоТипуЦББР(ФИ.ТипЦББР);
		ФИ.ОбъемВыпуска			= ДанныеФИ["issue_vol"]; 			
		ФИ.ДатаВыпуска			= ДанныеФИ["begdistdate"];
		ФИ.ДатаПогашения		= ДанныеФИ["endmtydate"];	
		ФИ.Записать();	
		Ссылка = ФИ.Ссылка;
		
		Если ФИ.ДатаПогашения <>  Дата("00010101") Тогда
			МенеджерЗаписи = РегистрыСведений.уа_ПотокиВыплат.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.ВидВыплаты 		= Перечисления.уа_ВидыВыплат.ПолноеПогашение;
			МенеджерЗаписи.ЦеннаяБумага 	= ФИ.Ссылка;
			МенеджерЗаписи.Период 			= ФИ.ДатаПогашения;
			МенеджерЗаписи.СуммаВыплаты		= ФИ.Номинал;
			МенеджерЗаписи.ДатаОбъявления	= ФИ.ДатаВыпуска;
			МенеджерЗаписи.Записать(Истина);				
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ДанныеФИ["reg_code"]) Тогда
			РегистрыСведений.уа_СоответствияОбъектовУчета.ДобавитьСоответствиеОбъекта(ДанныеФИ["reg_code"], 
				ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты, Ссылка, ИсточникДанныхRuData);	
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеФИ["isin"]) Тогда
			РегистрыСведений.уа_СоответствияОбъектовУчета.ДобавитьСоответствиеОбъекта(ДанныеФИ["isin"], 
				ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты, Ссылка, ИсточникДанныхRuData);	
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеФИ["secid"]) Тогда
			РегистрыСведений.уа_СоответствияОбъектовУчета.ДобавитьСоответствиеОбъекта(ДанныеФИ["secid"], 
				ПланыВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты, Ссылка, Справочники.уа_ИсточникиДанных.MOEX);		
		КонецЕсли; 			
		
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(ДанныеФИ["reg_code"]);
		МассивИдентификаторов.Добавить(ДанныеФИ["isin"]);     
		ЗаполнитьПотоки(НастройкиСервиса, МассивИдентификаторов);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не удалось заполнить данные ценной бумаги '") + Идентификатор;
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;   			
	
	Возврат Ссылка;
КонецФункции 

// Заполнить регистр "Потоки выплат" по выбранным ценным бумагам
Процедура ЗаполнитьПотоки(НастройкиСервиса, МассивИдентификаторов) Экспорт
	ТЗ_Потоки	= ПолучитьДанныеСервиса_InfoService_Calendar(НастройкиСервиса, МассивИдентификаторов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	П.regcode КАК Идентификатор, 
	|	П.offerDate КАК ДатаОферты, 
	|	П.endPeriod КАК ДатаКупона,
	|	П.eventDate КАК ДатаСобытия,
	|	П.rateDate КАК ДатаОбъявления,
	|	П.eventType КАК ТипСобытия, 
	|	ЕСТЬNULL(П.pay1bond,0) КАК СуммаВыплаты, 
	|	ЕСТЬNULL(П.couponRate,0) КАК Ставка,
	|	ЕСТЬNULL(П.couponPeriod,0) КАК КупонныйПериод
	|ПОМЕСТИТЬ ВТ
	|ИЗ &ТЗ КАК П;
	|
	|ВЫБРАТЬ 
	|	ФИ.Ссылка КАК ЦеннаяБумага,
	|	ВЫБОР 
	|		КОГДА П.ТипСобытия = ""CPN"" ТОГДА П.ДатаКупона
	|		КОГДА П.ТипСобытия = ""CALL"" ТОГДА П.ДатаОферты
	|		ИНАЧЕ П.ДатаСобытия
	|	КОНЕЦ КАК Период,
	|	П.ДатаОбъявления,
	|	ВЫБОР
	|		КОГДА П.ТипСобытия = ""CPN"" ТОГДА ЗНАЧЕНИЕ(Перечисление.уа_ВидыВыплат.Купон)
	|		КОГДА П.ТипСобытия = ""MTY"" И П.ДатаСобытия <> ФИ.ДатаПогашения ТОГДА ЗНАЧЕНИЕ(Перечисление.уа_ВидыВыплат.ЧастичноеПогашение)
	|		КОГДА П.ТипСобытия = ""MTY"" И П.ДатаСобытия = ФИ.ДатаПогашения ТОГДА ЗНАЧЕНИЕ(Перечисление.уа_ВидыВыплат.ПолноеПогашение)
	|		КОГДА П.ТипСобытия = ""CALL"" ТОГДА ЗНАЧЕНИЕ(Перечисление.уа_ВидыВыплат.Оферта)
	|		КОГДА П.ТипСобытия = ""DIV"" ТОГДА ЗНАЧЕНИЕ(Перечисление.уа_ВидыВыплат.Дивиденды)
	|	КОНЕЦ КАК ВидВыплаты,
	|	П.СуммаВыплаты,
	|	П.Ставка,
	|	П.КупонныйПериод
	|ПОМЕСТИТЬ ВТ_Потоки
	|ИЗ ВТ КАК П
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уа_СоответствияОбъектовУчета КАК СОУ ПО СОУ.Идентификатор = П.Идентификатор
	|		И СОУ.ВидОбъектаИмпорта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты) 
	|		И СОУ.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.уа_ИсточникиДанных.RuData) 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уа_ФинансовыеИнструменты КАК ФИ ПО СОУ.ОбъектУчета = ФИ.Ссылка
	|ГДЕ П.ТипСобытия <> ""CONV"";
	|
	|УНИЧТОЖИТЬ ВТ;
	|
	|ВЫБРАТЬ 
	|	П.ЦеннаяБумага, 	
	|	П.ВидВыплаты,
	|	П.Период,
	|	П.ДатаОбъявления,
	|	П.СуммаВыплаты,
	|	П.Ставка,
	|   П.КупонныйПериод
	|ИЗ ВТ_Потоки КАК П
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уа_ПотокиВыплат КАК ПВ ПО ПВ.ЦеннаяБумага = П.ЦеннаяБумага
	|		И ПВ.Период = П.Период И ПВ.ВидВыплаты = П.ВидВыплаты
	|ГДЕ ЕСТЬNULL(ПВ.СуммаВыплаты,0) <> П.СуммаВыплаты 
	|	ИЛИ ЕСТЬNULL(ПВ.Ставка,0) <> П.Ставка
	|	ИЛИ ЕСТЬNULL(ПВ.КупонныйПериод,0) <> П.КупонныйПериод";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ_Потоки);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;  	
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();		
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.уа_ПотокиВыплат.СоздатьМенеджерЗаписи();	
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;	
КонецПроцедуры

// Заполнить регистр Котировки значениями за период по выбранным ценным бумагам
Процедура ЗаполнитьКотировки(НастройкиСервиса, ДатаС, ДатаПо, МассивИдентификаторов = Неопределено) Экспорт
	ТЗ_Котировки_Акции 		= ПолучитьДанныеСервиса_Moex_History(НастройкиСервиса, ДатаС, ДатаПо, "shares", МассивИдентификаторов);	 
	ТЗ_Котировки_Облигации 	= ПолучитьДанныеСервиса_Moex_History(НастройкиСервиса, ДатаС, ДатаПо, "bonds", МассивИдентификаторов);
	ТЗ_Котировки_НРД		= ПолучитьДанныеСервиса_RuPrice_History(НастройкиСервиса, ДатаС, ДатаПо, МассивИдентификаторов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	regnumber КАК НомерГосРегистрации,
	|	tradedate КАК Дата,
	|	currencyid КАК КодВалюты,
	|	bid КАК ЦенаСпроса,
	|	offer КАК ЦенаПредложения,
	|	marketprice2 КАК РыночнаяЦена2,
	|	volume КАК КоличествоСделок
	|ПОМЕСТИТЬ ВТ_КотировкиАкции
	|ИЗ &ТЗ_Котировки_Акции КАК К
	|ИНДЕКСИРОВАТЬ ПО tradedate, regnumber;
	|
	|ВЫБРАТЬ 
	|	regnumber КАК НомерГосРегистрации,
	|	tradedate КАК Дата,
	|	currencyid КАК КодВалюты,
	|	facevalue КАК Номинал,
	|	bid КАК ЦенаСпроса,
	|	offer КАК ЦенаПредложения,
	|	accint КАК Купон,
	|	marketprice2 КАК РыночнаяЦена2,
	|	volume КАК КоличествоСделок
	|ПОМЕСТИТЬ ВТ_КотировкиОблигации
	|ИЗ &ТЗ_Котировки_Облигации КАК К
	|ИНДЕКСИРОВАТЬ ПО tradedate, regnumber;
	|
	|ВЫБРАТЬ 
	|	regcode КАК НомерГосРегистрации,
	|	calcdate КАК Дата,
	|	vp_pc КАК ЦенаНРД
	|ПОМЕСТИТЬ ВТ_КотировкиНРД
	|ИЗ &ТЗ_Котировки_НРД КАК К
	|ИНДЕКСИРОВАТЬ ПО calcdate, regcode;
	|
	|
	|ВЫБРАТЬ 
	|	СОУ.ОбъектУчета КАК ЦеннаяБумага,
	|	К.Дата,
	|	СОУ_В.ОбъектУчета КАК Валюта,
	|	NULL КАК Номинал,
	|	К.ЦенаСпроса,
	|	К.ЦенаПредложения,
	|	NULL КАК Купон,
	|	К.РыночнаяЦена2,
	|	NULL КАК ЦенаНРД,
	|	К.КоличествоСделок
	|ИЗ ВТ_КотировкиАкции К
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уа_СоответствияОбъектовУчета КАК СОУ ПО СОУ.Идентификатор = К.НомерГосРегистрации 
	|		И СОУ.ВидОбъектаИмпорта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты)
	|		И СОУ.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.уа_ИсточникиДанных.RuData)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уа_СоответствияОбъектовУчета КАК СОУ_В ПО СОУ_В.Идентификатор = К.КодВалюты 
	|		И СОУ_В.ВидОбъектаИмпорта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уа_ВидыОбъектовИмпорта.Валюты)
	|		И СОУ_В.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.уа_ИсточникиДанных.MOEX)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 
	|	СОУ.ОбъектУчета КАК ЦеннаяБумага,
	|	К.Дата,
	|	СОУ_В.ОбъектУчета КАК Валюта,
	|	К.Номинал,
	|	К.ЦенаСпроса * К.Номинал / 100,
	|	К.ЦенаПредложения * К.Номинал / 100,
	|	К.Купон,
	|	К.РыночнаяЦена2 * К.Номинал / 100,
	|	К_НРД.ЦенаНРД,
	|	К.КоличествоСделок
	|ИЗ ВТ_КотировкиОблигации К
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КотировкиНРД К_НРД ПО К.НомерГосРегистрации = К_НРД.НомерГосРегистрации И К.Дата = К_НРД.Дата
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уа_СоответствияОбъектовУчета КАК СОУ ПО СОУ.Идентификатор = К.НомерГосРегистрации 
	|		И СОУ.ВидОбъектаИмпорта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уа_ВидыОбъектовИмпорта.ФинансовыеИнструменты) 
	|		И СОУ.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.уа_ИсточникиДанных.RuData)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уа_СоответствияОбъектовУчета КАК СОУ_В ПО СОУ_В.Идентификатор = К.КодВалюты 
	|		И СОУ_В.ВидОбъектаИмпорта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уа_ВидыОбъектовИмпорта.Валюты)
	|		И СОУ_В.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.уа_ИсточникиДанных.MOEX)
	|УПОРЯДОЧИТЬ ПО Дата;
	|
	|УНИЧТОЖИТЬ ВТ_КотировкиАкции;
	|УНИЧТОЖИТЬ ВТ_КотировкиОблигации;
	|УНИЧТОЖИТЬ ВТ_КотировкиНРД;";

	Запрос.УстановитьПараметр("ТЗ_Котировки_Акции", ТЗ_Котировки_Акции);
	Запрос.УстановитьПараметр("ТЗ_Котировки_Облигации", ТЗ_Котировки_Облигации);
	Запрос.УстановитьПараметр("ТЗ_Котировки_НРД", ТЗ_Котировки_НРД);  
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;  	
	КонецЕсли; 

	Котировка = Новый Структура("Период,ВидКотировки,Биржа,ЦеннаяБумага,Валюта,Значение");
	Котировка.Биржа = Справочники.уа_Биржи.МосковскаяБиржа;
	
	Выборка = Результат.Выбрать();		
	Пока Выборка.Следующий() Цикл
		Котировка.ЦеннаяБумага = Выборка.ЦеннаяБумага;
		Котировка.Период	   = Выборка.Дата;
		Котировка.Валюта	   = Выборка.Валюта;
		
		Если Выборка.Номинал <> Null Тогда
			Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.Номинал;	
			Котировка.Значение 		= Выборка.Номинал;	
			РегистрыСведений.уа_Котировки.Обновить(Котировка);
		КонецЕсли;
		
		Если Выборка.Купон <> Null Тогда
			Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.Купон;	
			Котировка.Значение 		= Выборка.Купон;	
			РегистрыСведений.уа_Котировки.Обновить(Котировка);
		КонецЕсли; 
		
		Если Выборка.ЦенаНРД <> Null Тогда
			Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.ЦенаНРД;	
			Котировка.Значение 		= Выборка.ЦенаНРД;	
			РегистрыСведений.уа_Котировки.Обновить(Котировка);			
		КонецЕсли; 
		
		Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.РыночнаяЦена2;	
		Котировка.Значение 		= Выборка.РыночнаяЦена2;	
		РегистрыСведений.уа_Котировки.Обновить(Котировка);
		
		Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.ЦенаСпроса;	
		Котировка.Значение 		= Выборка.ЦенаСпроса;	
		РегистрыСведений.уа_Котировки.Обновить(Котировка);
		
		Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.ЦенаПредложения;	
		Котировка.Значение 		= Выборка.ЦенаПредложения;	
		РегистрыСведений.уа_Котировки.Обновить(Котировка);		
		
		Котировка.ВидКотировки 	= Перечисления.уа_ВидыКотировки.КоличествоСделок;	
		Котировка.Значение 		= Выборка.КоличествоСделок;	
		РегистрыСведений.уа_Котировки.Обновить(Котировка);
	КонецЦикла;		

КонецПроцедуры

// Заполнить регистр Кривая бескупонной доходности значениями на дату
Процедура ЗаполнитьКривуюБескупоннойДоходности(НастройкиСервиса, Дата) Экспорт
	КБД = ПолучитьДанныеСервиса_Bond_g_curve_ofz(НастройкиСервиса, Дата);
	
	Если ЗначениеЗаполнено(КБД) Тогда
		МенеджерЗаписи = РегистрыСведений.уа_КриваяБескупоннойДоходности.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 	= КБД.dt;
		МенеджерЗаписи.B1 		= КБД.beta0val;
		МенеджерЗаписи.B2 		= КБД.beta1val;
		МенеджерЗаписи.B3 		= КБД.beta2val;
		МенеджерЗаписи.T1 		= КБД.tauval;
		МенеджерЗаписи.G1 		= КБД.g1val;
		МенеджерЗаписи.G2 		= КБД.g2val;
		МенеджерЗаписи.G3 		= КБД.g3val;
		МенеджерЗаписи.G4 		= КБД.g4val;
		МенеджерЗаписи.G5 		= КБД.g5val;
		МенеджерЗаписи.G6 		= КБД.g6val;
		МенеджерЗаписи.G7 		= КБД.g7val;
		МенеджерЗаписи.G8 		= КБД.g8val;
		МенеджерЗаписи.G9 		= КБД.g9val;	
		МенеджерЗаписи.Записать(Истина);  			
	КонецЕсли;
КонецПроцедуры

// Заполнить справочники Финансовые инструменты по списку идентификаторов
// Входящий параметр: соответствие идентификаторов
Процедура ЗаполнитьЦенныеБумаги(СписокАктивов) Экспорт
	// заполняем недостающие ценные бумаги по данным RU:DATA
	НастройкиRUDATA = Новый Структура;
	НастройкиRUDATA = ПодключитьсяКСервису();
	
	Для Каждого Актив Из СписокАктивов Цикл
		ФИ = НайтиЗаполнитьФинансовыйИнструмент(НастройкиRUDATA, Актив.Ключ);
	    СписокАктивов.Вставить(Актив.Ключ, ФИ);
		
		Если НЕ ЗначениеЗаполнено (ФИ) Тогда
			СтрокаСообщения = НСтр("ru = 'Не удалось заполнить данные ценной бумаги '") + Актив.Ключ;
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		КонецЕсли; 
	КонецЦикла; 
	
	ВыйтиИзСервиса(НастройкиRUDATA);	
КонецПроцедуры

#КонецОбласти 