#Область ПрограммныйИнтерфейс

#Область Расчеты

//Параметры:
// НомерГода - Число, номер года за который необходимо получить расчет сроков депозитjd
//
//Возвращаемое значение: 
//	ТаблицаЗначений
//   *ИдентификаторСтавки - Строка, имя реквизита табличной части "Ставки"
//	 *СрокДепозита - Число
//
Функция ТаблицаСроковДепозитовНаГод(НомерГода) Экспорт  //NFO-1049
	
	ПериодГода = Дата(НомерГода, 1, 1);
	
	ТаблицаСроков = Новый ТаблицаЗначений;
	ТаблицаСроков.Колонки.Добавить("ИдентификаторСтавки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50))); 	
	ТаблицаСроков.Колонки.Добавить("СрокДепозита", Новый ОписаниеТипов("Число"));
	
	МетаРеквизитыТЧ = Метаданные.Документы.СредневзвешенныеСтавкиПоДепозитам.ТабличныеЧасти.Ставки.Реквизиты;
	Для каждого МетаРеквизитТЧ Из МетаРеквизитыТЧ Цикл
		
		Если МетаРеквизитТЧ = МетаРеквизитыТЧ.Валюта Тогда
			Продолжить;			
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаСроков.Добавить();
		НоваяСтрока.ИдентификаторСтавки = МетаРеквизитТЧ.Имя;
		НоваяСтрока.СрокДепозита = Документы.СредневзвешенныеСтавкиПоДепозитам.СрокДепозитаПоИдентификаторуСтавки(МетаРеквизитТЧ.Имя, ПериодГода);
	КонецЦикла; 
	
	ТаблицаСроков.Сортировать("СрокДепозита");
		
	Возврат ТаблицаСроков;
	
КонецФункции

Функция ТаблицаПриоритетовРейтингов() Экспорт // XG-667 

	
	Возврат РегистрыСведений.РейтингиШкал.ТаблицаПриоритетовРейтингов();
	
КонецФункции

Функция ПолучитьНоминальнуюСтоимость(Актив, Дата) Экспорт
	
	Возврат Справочники.Облигации.ПолучитьНоминальнуюСтоимостьСлужебная(Актив, Дата);
	
КонецФункции

#КонецОбласти 

#Область Условия

Функция ВестиУчетЕПС(Портфель) Экспорт
	
	ВестиУчетЕПС = Ложь;
	
	Если ЗначениеЗаполнено(Портфель) Тогда
		ВестиУчетЕПС =  ОбщегоНазначенияДУПовтИсп.ПолучитьЗначениеКонстанты("ВестиУчетЕПС") И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Портфель, "ЕПС");
	КонецЕсли;
	
	Возврат  ВестиУчетЕПС;
	
КонецФункции	

// Функция проверяет есть ли действующая Учетные политики по Портфелю
//
//Параметры:
// Дата -Дата
// Портфель -СправочникСсылка.Портфель
//
//Возвращаемое значение:
// <Булево> Истина- есть, Ложь - нет.
Функция ЕстьДействующиеУП(Дата, Портфель) Экспорт // XG-626

	Возврат РегистрыСведений.УчетныеПолитики.ЕстьДействующиеУП(Дата, Портфель);	

КонецФункции // ()

// Функция проверяет закрыт ли регламентный период по портфелю на дату
//
//Параметры:
// Дата - Дата
// Портфель -СправочникСсылка.Портфель
//
//Возвращаемое значение:
// <Булево> -  Истина - период закрыт, Ложь - период не закрыт
Функция РегламентныйПериодПоПортфелюЗакрыт(Дата, Портфель) Экспорт
	
	Возврат РегистрыСведений.ЗакрытыеПериодыПортфелей.РегламентныйПериодПоПортфелюЗакрыт(Дата, Портфель);	
	
КонецФункции

#КонецОбласти 

#Область Значения

// Значение константы по имени
//
//Параметры:
// ИмяКонстанты - Строка
// ПолучатьДанныеХранилища - Булево
//
//Возвращаемое значение: 
// Произвольный - значение самой константы
//
Функция ЗначениеКонстанты(ИмяКонстанты, ПолучатьДанныеХранилища = Ложь) Экспорт		
	Возврат ОбщегоНазначенияДУ.ЗначениеКонстанты(ИмяКонстанты, ПолучатьДанныеХранилища);
	
КонецФункции

// Возвращает значение константы 
// Параметры:
// ИмяКонстанты - Строка - строчное имя константа, которую нужно заполнить
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции 

// Функция возвращает структуру с видами учета портфеля
//
// Параметры:
//  Портфель - СправочникСсылка	 - портфель
// 
// Возвращаемое значение:
//  Структура - структура с видами учета портфеля
//
Функция ВидыУчетаПоПортфелю(Портфель) Экспорт 
	
	//Возврат Справочники.ДУ_Портфели.ВидыУчетаПоПортфелю(Портфель);	
		
КонецФункции

// Функция возвращает портфели клиента ДУ
//
// Параметры:
//  КлиентДУ - СправочникСсылка	 - Клиент ДУ
// 
// Возвращаемое значение:
// Массив  - портфели клиента
//
Функция ПортфелиКлиентаДУ(КлиентДУ) Экспорт
	
	Возврат Справочники.Портфели.ПортфелиКлиентаДУ(КлиентДУ);
	
КонецФункции

Функция УчетАктивовВУНаСчетахДЕПО() Экспорт	
	Возврат ОбщегоНазначенияДУПовтИсп.ПолучитьЗначениеКонстанты("УчетАктивовВУНаСчетахДЕПОВСделкахЧерезБрокера");
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита); 
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

Функция ЭлементСправочникаПоНаименованию(ИмяСправочника, НаименованиеПоиска, ТочноеСоответствие = Ложь) Экспорт
	
	Возврат Справочники[ИмяСправочника].НайтиПоНаименованию(НаименованиеПоиска, ТочноеСоответствие);
	
КонецФункции	

Функция ЭлементСправочникаПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначениеРеквизита) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИмяСправочника.Ссылка
		|ИЗ
		|	Справочник.ИмяСправочника КАК ИмяСправочника
		|ГДЕ
		|	ИмяСправочника.ПометкаУдаления = ЛОЖЬ
		|	И ИмяСправочника.ИмяРеквизита = &ИмяРеквизита";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизита", ИмяРеквизита);
		
	Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	
	ОбщегоНазначенияДУ.ДобавитьВЛогОтладки(Запрос, "ОбщегоНазначенияДУПовтИсп: НайтиЭлементСправочникаПоРеквизиту()");	
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

#КонецОбласти 

#Область ПрограммныеПеречисления

//NPFB-122
Функция СобытияЖРРеглОпераций() Экспорт
	
	СтруктураСобытий = Новый Структура;
	СтруктураСобытий.Вставить("Начало", "Регламентные операции ДУ.Начало");
	СтруктураСобытий.Вставить("Текущая", "Регламентные операции ДУ.%1");
	СтруктураСобытий.Вставить("Окончание", "Регламентные операции ДУ.Окончание");
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураСобытий);
	
КонецФункции

// Структура перечисления
//
//Параметры:
// ИмяПеречисления - Строка
//
//Возвращаемое значение: 
// Структура
//	*Ключ - Строка - идентификатор значения перечисления
//	*Значение - ПеречислениеСсылка - Значение перечисления
//
Функция СтруктураПеречисления(ИмяПеречисления) Экспорт
	
	Рез = Новый Структура;
	
	Для каждого МетаЗначениеПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		ЗначениеПеречисления = Перечисления[ИмяПеречисления][МетаЗначениеПеречисления.Имя];
		Рез.Вставить(МетаЗначениеПеречисления.Имя, ЗначениеПеречисления);
	КонецЦикла; 
	
	Возврат Новый ФиксированнаяСтруктура(Рез);
	
КонецФункции

// Имя ресурса регистра бухгалтерии по признаку учета
//
//Параметры:
// ПризнакУчета - ПеречислениеСсылка.ПризнакиУчета
//
//Возвращаемое значение: 
// Строка
//
Функция ИмяРесурсаПоПризнакуУчета(ПризнакУчета) Экспорт
	
	Если ПризнакУчета = Перечисления.ПризнакиУчета.Валютный Тогда
		ИмяРесурса = "ВалютнаяСумма";
		
	ИначеЕсли ПризнакУчета = Перечисления.ПризнакиУчета.Количественный Тогда
		ИмяРесурса = "Количество";
		
	ИначеЕсли ПризнакУчета = Перечисления.ПризнакиУчета.НалоговыйУчет Тогда
		ИмяРесурса = "СуммаНУ";
		
	ИначеЕсли ПризнакУчета = Перечисления.ПризнакиУчета.Суммовой Тогда
		ИмяРесурса = "Сумма";
		
	КонецЕсли; 	
	
	Возврат ИмяРесурса;
	
КонецФункции
 
#КонецОбласти 

Функция НайтиСоздатьКонтекстУниверсальногоСопоставления(Имя) Экспорт
	
	НайденныйКонтекст = ОбщегоНазначенияДУ.НайтиЭлементСправочникаПоРеквизиту(Имя, "КонтекстУниверсальногоСопоставления", "Наименование");
	
	Если Не ЗначениеЗаполнено(НайденныйКонтекст) Тогда
		
		Попытка
			
			СправочникОбъект = Справочники.КонтекстУниверсальногоСопоставления.СоздатьЭлемент();
			СправочникОбъект.Наименование = Имя;
			СправочникОбъект.Записать();
			
			НайденныйКонтекст = СправочникОбъект.Ссылка;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЕсли; 
	
	Возврат НайденныйКонтекст;
	
КонецФункции
 
Функция ВидЗадолженностиПоВидуКонтрагента(ВидКонтрагента, ЗаУспех) Экспорт
	Возврат Справочники.ВидыЗадолженностей.ВидЗадолженностиПоВидуКонтрагента(ВидКонтрагента, ЗаУспех);		
КонецФункции

// Функция получает соответствие контрагентов вознаграждения
//
//Параметры:
//  Портфель -СправочникСсылкаПортфель
//	Дата - Дата
//
//Возвращаемое значение:
// <Соответствие> 
Функция ПолучитьСоответствиеКонтрагентов(Портфель, Дата) Экспорт
	Возврат Документы.НачислениеВознаграждения.ПолучитьСоответствиеКонтрагентов(Портфель, Дата);
КонецФункции

// Функция получает соответствие договоров вознаграждения
//
//Параметры:
//  Отсутствует
//
//Возвращаемое значение:
// <Соответствие> 
Функция ПолучитьСоответствиеДоговоров() Экспорт
	Возврат Документы.НачислениеВознаграждения.ПолучитьСоответствиеДоговоров();
КонецФункции	

Функция СтатьяДоходовИРасходовПоВидуКонтрагента(ВидКонтрагента) Экспорт
	Возврат Справочники.СтатьиДоходовИРасходов.СтатьяДоходовИРасходовПоВидуКонтрагента(ВидКонтрагента);		
КонецФункции	
	
#КонецОбласти 





