#Область Настройки

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка         - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  ИмяПользователяИБ - Строка - имя пользователя ИБ программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	Если НастройкаВРег = ВРег("ОсновнаяУправляющаяКомпания") Тогда
		ПустоеЗначение = ПустаяУправляющаяКомпания();
		ИмяОбъекта = "Справочник.Контрагенты";
		НастройкаТипаСсылка = Истина;
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, ИмяПользователяИБ);
	
	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			Иначе
				Запроc = Новый Запрос;
				Запроc.УстановитьПараметр("Ссылка", ЗначениеНастройки);
				Запроc.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗначенияОбъекта.Ссылка
				|ИЗ
				|	" + ИмяОбъекта + " КАК ЗначенияОбъекта
				|ГДЕ
				|	ЗначенияОбъекта.Ссылка = &Ссылка";
				Результат = Запроc.Выполнить();
				Если Результат.Пустой() Тогда
					ЗначениеНастройки = ПустоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции

// Функция возвращает значение настройки.
//
// Параметры:
//  Настройка         - Строка - вид настройки, СправочникСсылка.ДУНастройка
//  ПроверкаНаСериализованноеЗначение - может вернуть серриализованное значение
//
// Возвращаемое значение:
//  Значение для настройки.
//  
Функция ПолучитьЗначениеНастройки(Настройка, ПроверкаНаСериализованноеЗначение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
			
	Если ТипЗнч(Настройка) = Тип("СправочникСсылка.Настройки") Тогда
		
		ТипНастройки = "СсылкаНастрока";
		ИмяGUID = Строка(Настройка);
		
	Иначе
		
		ТипНастройки = "Строка";
		ИмяGUID = Настройка;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Ссылка КАК Ссылка,
	|	Настройки.Значение КАК Значение,
	|	Настройки.ЗначениеСериализация КАК ЗначениеСериализация,
	|	Настройки.ТипНастройки КАК ТипНастройки
	|ИЗ
	|	Справочник.Настройки КАК Настройки
	|ГДЕ
	|	Настройки.Имя ПОДОБНО &Имя";
	
	Если ТипНастройки = "Строка" Тогда
		
		Запрос.УстановитьПараметр("Имя", ИмяGUID);

	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Имя ПОДОБНО &Имя","Ссылка = &Настройка");
		Запрос.УстановитьПараметр("Настройка", Настройка);
		
	КонецЕсли; 
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не существует настройка: "+ИмяGUID);
		Возврат Неопределено;
	КонецЕсли; 

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
		
	ЗначениеСериализованно = Выборка.ТипНастройки > 1;
	ЗначениеСписком = Выборка.ТипНастройки = 1;
	
	Если ЗначениеСписком Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "Список").Выгрузить().ВыгрузитьКолонку("Значение");
	Иначе 
		ЗначНастройки = ?(ПроверкаНаСериализованноеЗначение 
			Или ЗначениеСериализованно, 
			ЗначениеИзСериализованнойСтроки(Выборка.ЗначениеСериализация), 
			Выборка.Значение);
		Если не ЗначениеЗаполнено(ЗначНастройки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение настройки: "+ИмяGUID);			
		КонецЕсли; 
		Возврат ЗначНастройки;
	КонецЕсли; 
	
КонецФункции

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустаяУправляющаяКомпания() Экспорт

	Возврат Справочники.Контрагенты.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает параметры подключения.
//
// Параметры:
//  Настройка         - Строка - вид настройки, СправочникСсылка.ДУНастройка
//  
// Возвращаемое значение:
//  Структура  - Содержащую параметры подключения.
//  
Функция ПолучитьСтрутуруСоединения(Подключение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Подключение) = Тип("СправочникСсылка.ПодключенияКВнешнимИсточникам") Тогда
		
		ТипНастройки = "СсылкаНаОбъект";
		КодСправочника = Строка(Подключение);
		
	Иначе
		
		ТипНастройки = "Строка";
		КодСправочника = Подключение;
		
	КонецЕсли; 

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГДУ_ПодключенияКВнешнимИсточникам.Сервер КАК Сервер,
	|	ГДУ_ПодключенияКВнешнимИсточникам.ИмяПользователя КАК ИмяПользователя,
	|	ГДУ_ПодключенияКВнешнимИсточникам.БазаДанных КАК БазаДанных,
	|	ГДУ_ПодключенияКВнешнимИсточникам.ДрайверПодключения КАК ДрайверПодключения,
	|	ГДУ_ПодключенияКВнешнимИсточникам.СтрокаСоединения КАК СтрокаСоединения,
	|	ГДУ_ПодключенияКВнешнимИсточникам.ИспользоватьСтрокуСоединения КАК ИспользоватьСтрокуСоединения,
	|	ГДУ_ПодключенияКВнешнимИсточникам.Порт КАК Порт,
	|	ГДУ_ПодключенияКВнешнимИсточникам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГДУ_ПодключенияКВнешнимИсточникам КАК ГДУ_ПодключенияКВнешнимИсточникам
	|ГДЕ
	|	ГДУ_ПодключенияКВнешнимИсточникам.Код = &Код";
	
	
	Если ТипНастройки = "Строка" Тогда
		
		Запрос.УстановитьПараметр("Код", КодСправочника);

	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Код = &Код","Ссылка = &Подключение");
		Запрос.УстановитьПараметр("Подключение", Подключение);
		
	КонецЕсли;  	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПоляДляСоединения = "Сервер, БазаДанных, Порт, ДрайверПодключения, ИмяПользователя, Пароль";
	
	Выборка = РезультатЗапроса.Выбрать();
			
	Если Выборка.Следующий() Тогда 		
		СтрСоединения = Новый Структура(ПоляДляСоединения);
		ЗаполнитьЗначенияСвойств(СтрСоединения,Выборка);		
		УникальныйИдентификаторСсылки = Строка(Выборка.Ссылка.УникальныйИдентификатор());			
		ПарольБезопасноеХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			УникальныйИдентификаторСсылки, "Пароль"); 				
		СтрСоединения.Пароль = ?(ЗначениеЗаполнено(ПарольБезопасноеХранилище), 
			ПарольБезопасноеХранилище, "");   			
		Возврат СтрСоединения;			
	Иначе
		Возврат Неопределено;
	КонецЕсли;
					
КонецФункции

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка
//
// Параметры:
// Объект - основной реквизит формы документа, с типом ДанныеФормыСтруктура
//
Функция СостояниеДокумента(Объект) Экспорт
	
	РучнаяКорректировка = Неопределено;
	
	Если Объект.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Объект.РучнаяКорректировка Тогда
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 10;
			ИначеЕсли НЕ Объект.Проведен Тогда
				СостояниеДокумента = 9;
			Иначе
				СостояниеДокумента = 8;
			КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 2;
			ИначеЕсли Объект.Проведен Тогда
				СостояниеДокумента = 1;
			Иначе
				СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ПометкаУдаления Тогда
			СостояниеДокумента = 2;
		ИначеЕсли Объект.Проведен Тогда
			СостояниеДокумента = 1;
		Иначе
			СостояниеДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбъектXDTO

Функция СериализоватьОбъектXDTOвТаблицуЗначений(ОбъектXDTO) Экспорт
	
	ТипОбъектаXDTO = ТипЗнч(ОбъектXDTO); 	
	Если ТипОбъектаXDTO = Тип("СписокXDTO") Тогда 
		ТЗ = СоздатьТаблицуЗначенийПоСвойствамXDTO(ОбъектXDTO.ВладеющееСвойство.Тип.Свойства);		
		Для Каждого Элемент Из ОбъектXDTO Цикл
			Строка = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла; 
	ИначеЕсли ТипОбъектаXDTO = Тип("ОбъектXDTO") Тогда
		ТЗ = СоздатьТаблицуЗначенийПоСвойствамXDTO(ОбъектXDTO.Свойства());
		Строка = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ОбъектXDTO); 
	КонецЕсли;
	
	Возврат ТЗ; 
	
КонецФункции

Функция СоздатьТаблицуЗначенийПоСвойствамXDTO(КоллекцияСвойствXDTO)
	
	ТЗ = Новый ТаблицаЗначений;
	Для Каждого СвойствоXDTO Из КоллекцияСвойствXDTO Цикл
		ТипСвойства = СвойствоXDTO.Тип.Имя;
		Если ТипСвойства = "string" Тогда
			ТипКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
		ИначеЕсли ТипСвойства = "dateTime"
			ИЛИ ТипСвойства = "date" Тогда
			ТипКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов("Дата"));
		Иначе
			ТипКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ТЗ.Колонки.Добавить(СвойствоXDTO.Имя, ТипКолонки);			
	КонецЦикла;
	
	Возврат ТЗ;	
	
КонецФункции

// Создает ОбъектXDTO из пространства имен.
Функция ФабрикаXDTOПоИмениПространствоИмен(ПространствоИмен) Экспорт
	
	СхемаФабрика = ФабрикаXDTO.ЭкспортСхемыXML(ПространствоИмен)[0];
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаФабрика);
	
	Возврат Новый ФабрикаXDTO(НаборСхем);
	
КонецФункции

// Преобразует объект XDTO в структуру таблиц значений
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуруТаблицЗначений(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуруТаблицЗначений(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Таблица = Новый ТаблицаЗначений;

			Если ЗначениеСвойства.Количество() <> 0 И ТипЗнч(ЗначениеСвойства[0]) = Тип("ОбъектXDTO") Тогда
				ПерваяСтруктура = ЗначениеСвойства[0];
				
				Для Каждого СвойствоПервойСтруктуры Из ПерваяСтруктура.Свойства() Цикл
					
					Ключ = СвойствоПервойСтруктуры.Имя;
					
					ТипПоляПоКлючу = ОписаниеТиповПоТипу(ТипЗнч(ПерваяСтруктура[Ключ]));
					
					Если СтрЧислоВхождений(Ключ, "CurrRate") > 0 Тогда
						ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Строка"));  
					КонецЕсли; 
					
					//Если тип Неопределено, возможно другой элемент коллекции не тип Неопределено 
					Если ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Неопределено")) Тогда
						//Берем последний элемент коллекции
						ТипПоляПоКлючу = ОписаниеТиповПоТипу(ТипЗнч(ЗначениеСвойства[ЗначениеСвойства.Количество()-1][Ключ]));
					КонецЕсли; 
					                                  
					Если ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Неопределено")) Тогда
						
						Если СтрЧислоВхождений(СвойствоПервойСтруктуры.Имя, "Date") > 0  Тогда
							ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Дата"));  
						Иначе 	
							ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Строка"));  
						КонецЕсли;
						
					КонецЕсли; 
					
					Таблица.Колонки.Добавить(Ключ, ТипПоляПоКлючу);
				КонецЦикла;
				
			КонецЕсли;
			
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;

			Если Таблица.Количество() <> 0 Тогда
				
				Структура.Вставить(ИмяСвойства, Таблица);
				
				Продолжить;
				
			КонецЕсли; 
			
			//если не было элементов
			Структура.Вставить(ИмяСвойства, Новый Массив);
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуруТаблицЗначений(ЭлементСписка, ПараметрыПреобразования));
					
				Иначе
					
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			//Если значение неопределено, то пустая структура
			Если ЗначениеСвойства = Неопределено Тогда
				
				ЗначениеСвойства = Новый Структура;
				
				Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
				
				Продолжить;
				
			КонецЕсли; 
			
			ФлагСоздатьТЗ = Истина;
			
			//Проверка если в составе объекты XDTO
			Для Каждого СвойствоПроверка Из ОбъектXDTO.Свойства() Цикл
				
				ИмяСвойстваПроверка      = СвойствоПроверка.Имя;
				ЗначениеСвойстваПроверка = ОбъектXDTO[ИмяСвойстваПроверка];
				
				Если ТипЗнч(ЗначениеСвойстваПроверка) = Тип("ОбъектXDTO")
					Или ТипЗнч(ЗначениеСвойстваПроверка) = Тип("СписокXDTO") Тогда
					
					Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
					
					ФлагСоздатьТЗ = Ложь;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Не ФлагСоздатьТЗ Тогда
				Продолжить;
			КонецЕсли; 
			
			//тз по объекту xdto вместо структуры
			ТаблицаЗначенийЭлемента  = Новый ТаблицаЗначений;
			
			ДобавитьКолонкиВТаблицуЗначенийПоОбъектуXDTO(ОбъектXDTO, ТаблицаЗначенийЭлемента);
			
			НоваяСтрока = ТаблицаЗначенийЭлемента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектXDTO);
			
			Возврат ТаблицаЗначенийЭлемента
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьКолонкиВТаблицуЗначенийПоОбъектуXDTO(ОбъектXDTO, Таблица)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		
		ПерваяСтруктура = ОбъектXDTO;
		
		Для Каждого СвойствоПервойСтруктуры Из ПерваяСтруктура.Свойства() Цикл
			
			Ключ = СвойствоПервойСтруктуры.Имя;
			
			ТипПоляПоКлючу = ОписаниеТиповПоТипу(ТипЗнч(ПерваяСтруктура[Ключ]));
			
			Если СтрЧислоВхождений(Ключ, "CurrRate") > 0 Тогда
				ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Строка"));  
			КонецЕсли;
			
			//Если тип Неопределено, возможно другой элемент коллекции не тип Неопределено 
			Если ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Неопределено")) Тогда
				
				Если СтрЧислоВхождений(СвойствоПервойСтруктуры.Имя, "Date") > 0  Тогда
					ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Дата"));  
				Иначе 	
					ТипПоляПоКлючу = ОписаниеТиповПоТипу(Тип("Строка"));  
				КонецЕсли; 
				
			КонецЕсли; 
			
			Таблица.Колонки.Добавить(Ключ, ТипПоляПоКлючу);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработка_данных

// Функция возвращает значение настройки.
//
// Параметры:
//  Текст         - Строка
//
// Возвращаемое значение:
//  Строка - серриализованное значение.
//  
Функция ЗначениеИзСериализованнойСтроки(Знач Текст) Экспорт
	
	Если ТипЗнч(Текст) = Тип("Строка") И Лев(Текст, 3) = "{""#" Тогда
		
		Попытка
			Возврат ЗначениеИзСтрокиВнутр(Текст);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Предупреждение, , ,
				СтрШаблон("Не удалось десериализовать из:
				|%1
				|по причине: %2", Текст, КраткоеПредставлениеОшибки(ИнформацияОбОшибке))
			);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//										Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

//  Преобразует временную таблицу в таблицу значений.
//
// Параметры:
//  Запрос				 - Запрос, МенеджерВременныхТаблиц	 - Контекст менеджера временная таблица.
//  ИмяВременнойТаблицы	 - Строка	 - Имя временной таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений.
//
Функция ВременнаяТаблицаВТаблицуЗначений(Запрос, ИмяВременнойТаблицы) Экспорт
	
	л_Запрос = Новый Запрос("ВЫБРАТЬ Т.* ИЗ " + ИмяВременнойТаблицы + " КАК Т");
	
	Если ТипЗнч(Запрос)=Тип("Запрос") Тогда
		л_Запрос.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Иначе
		л_Запрос.МенеджерВременныхТаблиц = Запрос;
	КонецЕсли;
	
	л_Результат = л_Запрос.Выполнить().Выгрузить();
	
	Возврат л_Результат;
	
КонецФункции

//  Преобразует таблицу значений в временную таблицу
//
// Параметры:
//  ТаблицаЗначений				 - ТаблицаЗначений	 - Контекст таблицы значений.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - Контекст менеджера временной таблицы.
//  НовоеИмяВременнойТаблицы	 - Строка	 - Имя временной таблицы.
// 
Процедура ТаблицаЗначенийВоВременнуюТаблицу(ТаблицаЗначений, МенеджерВременныхТаблиц, НовоеИмяВременнойТаблицы, ПоляИндексирования = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ {ИмяВременнойТаблицы}
	|ИЗ
	|	&ТекущаяТаблицаЗначений КАК Т
	|
	|{ИНДЕКСИРОВАТЬ}
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ИмяВременнойТаблицы}", НовоеИмяВременнойТаблицы);  
	
	ТекстЗаменыИндексировать =  ?(ЗначениеЗаполнено(ПоляИндексирования), "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования, "");
	
	ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "{ИНДЕКСИРОВАТЬ}", ТекстЗаменыИндексировать); 
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяТаблицаЗначений", ТаблицаЗначений);
	
	Запрос.Выполнить();
		
КонецПроцедуры

// Функция преобразует Массив из структур в ТаблицуЗначений.
// 
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

#КонецОбласти
