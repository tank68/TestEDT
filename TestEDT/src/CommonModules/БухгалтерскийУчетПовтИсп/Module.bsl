// ОБЩИЕ ФУНКЦИИ ДЛЯ РАБОТЫ СО СЧЕТАМИ
//                                      

// Функция получает свойства счета 
//
// Параметры:
//  Счет - переданный счет учета
//
// Возвращаемое  значение:
//  свойства счета из плана счетов Хозрасчетный
Функция ПолучитьСвойстваСчета(Счет) Экспорт
		
	Возврат ПланыСчетов.Хозрасчетный.СвойстваСчета(Счет);
	
КонецФункции

// Функция получает максимальное количество субконто
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое  значение:
//  число - максимального количества субконто из плана счетов
//
Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат БухгалтерскийУчет.ПолучитьМаксКоличествоСубконто();

КонецФункции

// Функция получает максимальное количество субконто
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое  значение:
//  число - максимального количества субконто из плана счетов
//
Функция ПолучитьМаксКоличествоСубконтоЕПС() Экспорт

	Возврат БухгалтерскийУчет.ПолучитьМаксКоличествоСубконтоЕПС();

КонецФункции

// Функция определяет, находится ли переданный счет в иерархии счета-эталона
//
// Параметры:
//  Счет - переданный счет
//  Эталон - переданный счет-эталон
//
// Возвращаемое  значение:
//  Булево - если счет в иерархии, то возвращает "Истина"
//
Функция СчетВИерархии(Счет, Эталон) Экспорт

	Если ЗначениеЗаполнено(Счет) Тогда
	
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

// Функция получает список счетов переоценки
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое  значение:
//  список, содержащий счета переоценки
//
Функция СписокСчетовПереоценки() Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СписокСчетовПереоценки();
	
КонецФункции

// Функция получает список субсчетов затрат на приобретение активов 
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое значение:
//  список, содержащий счета учета доп.затрат активов
//
Функция СписокСчетовДополнительныхЗатрат() Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СписокСчетовДополнительныхЗатрат();
	
КонецФункции

// Функция получает счета учета неденежных активов
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое  значение:
//  МассивСчетов - массив, содержащий счета учета неденежных активов
//
Функция СчетаУчетаНеденежныхАктивов() Экспорт
	
    Возврат ПланыСчетов.Хозрасчетный.СчетаУчетаНеденежныхАктивов();
	
КонецФункции // ПолучитьСчетаУчетаНеденежныхАктивов()

// Функция получает счета учета всех активов
//
// Параметры:
//  Развернуть - признак добавления субсчетов в результирующий массив счетов
//
// Возвращаемое значение:
//  МассивСчетов - массив, содержащий счета учета неденежных активов
//
Функция СчетаУчетаВсехАктивов(Развернуть = Ложь) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетаУчетаВсехАктивов();
	
КонецФункции // ПолучитьСчетаУчетаВсехАктивов()

// Функция возвращает ПВХ.ВидыСубконтоХозрасчетный ценной бумаги, установленной на счете
Функция СубконтоЦеннойБумагиНаСчете(Счет) Экспорт
	
	Результат = Новый Структура("НомерСубконто, ВидСубконто");
	
	ВидыСубконтоЦБ = Новый Массив;
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Акции);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Векселя);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеТребования);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДепозитарныеРасписки);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДолиУК);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ИпотечныеСертификатыУчастия);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Облигации);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПаиПИФ);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочийФинансовыйИнструмент);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтруктурныеНоты);
	ВидыСубконтоЦБ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	СвойстваСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет);
	Для НомерСубконто = 1 По 3 Цикл
		Если ВидыСубконтоЦБ.Найти(СвойстваСчета["ВидСубконто" + НомерСубконто]) <> Неопределено Тогда
			Результат.НомерСубконто = НомерСубконто;
			Результат.ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Функция возвращает соотвествие подчиненных счетов
//
// Параметры:
//  ИмяПланаСчетов - имя плана счетов
//  Счет - счет
//  ДобавлятьСамСчетВСоответсвие - признак добавления самого счета в результирующее соответствие счетов
//
// Возвращаемое значение:
//  СоответсвиеСчетов - соответствие счетов
//
Функция ПолучитьСоответвиеПодчиненныхСчетов(Знач ИмяПланаСчетов = "", Знач Счет, Знач ДобавлятьСамСчетВСоответсвие = Ложь) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ПланСчетовРегистра.Ссылка КАК Ссылка
	|ИЗ	
	|	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетовРегистра
	|ГДЕ
	|	ПланСчетовРегистра.Ссылка В Иерархии(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ ДобавлятьСамСчетВСоответсвие)
			И (Выборка.Ссылка = Счет) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СоответсвиеСчетов.Вставить(Выборка.Ссылка, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответсвиеСчетов);
	
КонецФункции // ПолучитьСоответвиеПодчиненныхСчетов()

//НомерСубконто - исходящий параметр. Возвращает номер субконто, если оно установлено на счете
//
// Параметры:
//  Счет - переданный счет
//  ВидСубконто - вид субконто
//  НомерСубконто - номер субконто, по умолчанию устанавливается ноль
//
// Возвращаемое значение:
//  номер субконто на счете, если оно установлено
//
Функция СчетИспользуетВидСубконто(Счет, ВидСубконто, НомерСубконто=0) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетИспользуетВидСубконто(Счет,ВидСубконто, НомерСубконто);
	
КонецФункции	

Функция ВалютныеСчетаРасчетовСКонтрагентами() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Валютный
	               |	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))";
	СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

	Возврат Новый ФиксированныйМассив(СчетаРасчетовСПокупателями);
	
КонецФункции

Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Хозрасчетный.Ссылка КАК Счет
	                |ИЗ
	                |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                |ГДЕ
	                |	(Хозрасчетный.Валютный
	                |				И НЕ Хозрасчетный.Забалансовый)";
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
КонецФункции

Функция СчетаРасчетовСКонтрагентамиССубконто() Экспорт
	
	// Счета расчетов с контрагентами
	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Контрагенты, Договоры, Документы расчетов
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетаСубконтоКонтрагенты.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоКонтрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДоговоры
	               |		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДоговоры.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДокументы
	               |		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДокументы.Ссылка
	               |ГДЕ
	               |	СчетаСубконтоКонтрагенты.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
	               |	И СчетаСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	               |	И СчетаСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	               |	И СчетаСубконтоДокументы.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)";
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
КонецФункции

// Функция возвращает счет учета процентов по сделке РЕПО напрямую с биржей, в зависимости от параметра учетной политики
Функция СчетУчетаПроцентовПоСделкеРЕПО(Портфель, Дата, ВидОперации) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетУчетаПроцентовПоСделкеРЕПО(Портфель, Дата, ВидОперации);
				
КонецФункции

Функция СчетаПоВидамКонтрагентовРСБУ(Портфель, Дата, ЗаУспех) Экспорт
	Возврат	Документы.НачислениеВознаграждения.ПолучитьСоответствиеСчетов(Портфель, Дата, ЗаУспех);
КонецФункции

/////////////////////////////////////////////////////////////////
// СЧЕТА УЧЕТА ФИН. ВЛОЖЕНИЙ

// Функция возвращает счет учета фин. вложений
// по переданному активу или Актив.Объект
//
// Параметры:
//  СчетаУчета  		- Тип: булево - признак выгрузки счетов учета
//  СчетаПереоценка  	- Тип: булево - признак выгрузки счетов переоценки
//  СчетаДопРасходов  	- Тип: булево - признак выгрузки счетов доп. расходов включеных в стоимость
//
// Возвращаемое  значение:
//  Массив счетов учета
Функция СписокСчетовУчетаФинВложений(СчетаУчета = Ложь, СчетаПереоценка = Ложь, СчетаДопРасходов = Ложь) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СписокСчетовУчетаФинВложений(СчетаУчета, СчетаПереоценка, СчетаДопРасходов);

КонецФункции // СчетПереоценкиПоСчетуАктива()

// Функция возврашает массив счетов учета купонного дохода
//
// Параметры:
//  Отсутствуют
//
// Возвращаемое  значение:
//  Массив
Функция СписокСчетовУчетаКупонногоДохода(СчетаНКД = Истина, СчетаУКД = Истина, Счета58 = Истина, Счета76 = Истина) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СписокСчетовУчетаКупонногоДохода(СчетаНКД, СчетаУКД, Счета58, Счета76);
	
КонецФункции

// Функция возвращает счет учета актива
// по переданному активу или Актив.Объект
//
// Параметры:
//  ЦеннаяБумага  - ссылка справочник Активы или Актив.Объект
//
// Возвращаемое  значение:
//  ссылка на план счетов Хозрасчетный
Функция СчетУчетаПоТипуЦБ(ЦеннаяБумага) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетУчетаПоТипуЦБ(ЦеннаяБумага);

КонецФункции // СчетПереоценкиПоСчетуАктива()


/////////////////////////////////////////////////////////////////
// СЧЕТА ПЕРЕОЦЕНКИ

// Функция возвращает счет переоценки актива
// по переданному счету тела актива
//
// Параметры:
//  СчетАктива - ссылка на план счетов Хозрасчетный
//
// Возвращаемое  значение:
//  ссылка на план счетов Хозрасчетный
Функция СчетПереоценкиПоСчетуАктива(СчетАктива) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетПереоценкиПоСчетуАктива(СчетАктива) ;

КонецФункции 

// Функция возвращает счет переоценки актива
// по переданному активу или Актив.Объект
//
// Параметры:
//  ЦеннаяБумага  - ссылка справочник Активы или Актив.Объект
//
// Возвращаемое  значение:
//  ссылка на план счетов Хозрасчетный
Функция СчетПереоценкиПоТипуЦБ(ЦеннаяБумага) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетПереоценкиПоТипуЦБ(ЦеннаяБумага);

КонецФункции 


/////////////////////////////////////////////////////////////////
// СЧЕТА ДОП. РАСХОДОВ ВКЛЮЧЕННЫХ В СТОИМОСТЬ

// Функция возврашает субсчето расходов на приобретение актива
// по переданному счету тела актива
//
// Параметры:
//  СчетАктива - ссылка на план счетов Хозрасчетный
//
// Возвращаемое  значение:
//  ссылка на план счетов Хозрасчетный
Функция СчетДопЗатратПоСчетуАктива(СчетАктива) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетДопЗатратПоСчетуАктива(СчетАктива);
	
КонецФункции // СчетДопЗатратПоСчетуАктива()

// Функция возвращает субсчет переоценки актива
// по переданному счету доп.затрат актива
//
// Параметры:
//  СчетАктива - ссылка на план счетов Хозрасчетный
//
// Возвращаемое  значение:
//  ссылка на план счетов Хозрасчетный
Функция СчетПереоценкиПоСчетуДопЗатрат(СчетАктива) Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.СчетПереоценкиПоСчетуДопЗатрат(СчетАктива);

КонецФункции // СчетПереоценкиПоСчетуАктива()




// ОБЩИЕ ФУНКЦИИ ДЛЯ РАБОТЫ СО СЧЕТАМИ ЕПС
//                                      

// Функция получает свойства счета 
//
// Параметры:
//  Счет - переданный счет учета
//
// Возвращаемое  значение:
//  свойства счета из плана счетов Хозрасчетный
Функция ПолучитьСвойстваСчетаЕПС(Счет) Экспорт
		
	Возврат УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
КонецФункции

Функция СчетаПоВидамКонтрагентовЕПС(Портфель, Дата) Экспорт
	Возврат Документы.НачислениеВознаграждения.ПолучитьСоответствиеСчетовЕПС(Портфель, Дата); 		
КонецФункции
