#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет по проводкам" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);

КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);

	ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить("ЗаголовокПодвал");
	МассивМакетов.Добавить("ПроводкиЗаголовок");	
	
	Для Каждого ЭлементМассива Из МассивМакетов Цикл
		Схема.Макеты[ЭлементМассива].Макет = БухгалтерскиеОтчетыВызовСервера.ПолучитьКопиюОписанияМакета(Схема.Макеты[ЭлементМассива + "Образец"].Макет);
		ОписаниеМакета = Схема.Макеты[ЭлементМассива].Макет;
		МассивСтрокДляУдаления = Новый Массив;
		Индекс = 0;
		НетНедоступныхПоказателей = Истина;
		Для Каждого ЭлементПоказатель Из ПараметрыОтчета.НаборПоказателей Цикл
			Если Не ПараметрыОтчета["Показатель" + ЭлементПоказатель] Тогда 
				МассивСтрокДляУдаления.Добавить(ОписаниеМакета[Индекс]);
			ИначеЕсли (НЕ (ЭлементПоказатель = "Количество")) 
				И (НЕ БухгалтерскиеОтчетыКлиентСервер.ПоказательДоступен(КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, "Суммы." + ЭлементПоказатель + "Дт")) Тогда
				МассивСтрокДляУдаления.Добавить(ОписаниеМакета[Индекс]);
				НетНедоступныхПоказателей = Ложь;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;		
		
		// Каждому показателю отчета в образце (макет "ПроводкиОбразец: Заголовок") соответствует строка.
		// Строки показатели которых не включены или недоступны, нужно удалить.
		// В образце также есть строка не соответствующая ни одному показателю (пустая).
		// Если есть недоступные показатели которые включены (ПараметрыОтчета["Показатель" + ЭлементПоказатель] = Истина)
		// нужно удалить строки соответствующие этим показателям и вывести пустую строку (чтобы не портить структуру отчета).
		// В остальных случаях нужно всегда удалять пустую строку (последняя строка в образце).
		Если НетНедоступныхПоказателей И Индекс = ОписаниеМакета.Количество() - 1 Тогда
			МассивСтрокДляУдаления.Добавить(ОписаниеМакета[Индекс]);
		КонецЕсли;	
		
		Для Каждого Строка Из МассивСтрокДляУдаления Цикл
			ОписаниеМакета.Удалить(Строка);
		КонецЦикла;
		
		КоличествоСтрок = ОписаниеМакета.Количество();
		
		// Обвести область
		Если КоличествоСтрок > 0 Тогда
			Для Индекс = 0 По 10 Цикл
				ПоследняяСтрока = ?(ЭлементМассива = "ЗаголовокПодвал" И Индекс < 4, 0, КоличествоСтрок - 1);
				ПараметрГраницы = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ОписаниеМакета[0].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Сверху", ЛинияСплошная);
				ПараметрГраницы = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ОписаниеМакета[ПоследняяСтрока].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Снизу", ЛинияСплошная);	
			КонецЦикла;
		КонецЕсли;
		
		Для Индекс = 1 По КоличествоСтрок - 1 Цикл
			ОписаниеМакета[Индекс].Ячейки[0].Элементы.Очистить();	
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[1].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[2].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[3].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			Если ЭлементМассива = "ПроводкиЗаголовок" Тогда
				ОписаниеМакета[Индекс].Ячейки[5].Элементы.Очистить();
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				ОписаниеМакета[Индекс].Ячейки[8].Элементы.Очистить();
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ПараметрыОтчета.ПоказательБУ Тогда
		ГруппаОтборов = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Если ПараметрыОтчета.ПоказательНУ Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "Суммы.НУДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "Суммы.НУКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "Суммы.ВалютнаяСуммаДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "Суммы.ВалютнаяСуммаКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		Если ПараметрыОтчета.ПоказательКоличество Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "КоличествоДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, "КоличествоКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);	
		КонецЕсли;	
	КонецЕсли;
	
	
	МассивОтборов = Новый Массив;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
			ДоступныеПоляОтбора = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
			Если ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение) = Неопределено
				И ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение), "Субконто", "СубконтоДт"))) <> Неопределено Тогда 
				МассивОтборов.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		ГруппаИЛИ = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаИЛИ, СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, "Субконто", "СубконтоДт"), ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения); 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаИЛИ, СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, "Субконто", "СубконтоКт"), ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения); 
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);	
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	// Если показатель один, то удалим столбик "Показатель"
	Если КоличествоПоказателей = 1 Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Для Каждого СтрокаМакета Из Макет.Макет Цикл
				СтрокаМакета.Ячейки.Удалить(СтрокаМакета.Ячейки[0]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МакетПроводки = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Проводки", Истина);
	
	Если МакетПроводки.Количество() = 1 Тогда
		МакетПроводки = МакетПроводки[0];
		ИмяМакетПроводок = МакетПроводки.Имя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = 2;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + 2;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

#КонецОбласти

#КонецЕсли