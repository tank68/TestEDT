#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров исполнения отчета
// Возвращаемое значение:
//   Структура
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
	
КонецФункции

// Возвращает текст заголовка
// Возвращаемое значение:
//   ТекстЗаголовка - Строка
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕПС.Ссылка КАК Счет,
		|	ЕПС.Родитель КАК РодительСчета,
		|	ЕПС.Представление КАК ПредставлениеСчета
		|ПОМЕСТИТЬ ТЗ_Счета
		|ИЗ
		|	ПланСчетов.ЕПС КАК ЕПС
		|ГДЕ
		|	ЕПС.Ссылка В(&Счета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_Счета.ПредставлениеСчета КАК ПредставлениеСчета
		|ИЗ
		|	ТЗ_Счета КАК ТЗ_Счета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Счета КАК ТЗ_СчетаРодители
		|		ПО ТЗ_Счета.РодительСчета = ТЗ_СчетаРодители.Счет
		|ГДЕ
		|	ТЗ_СчетаРодители.Счет ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредставлениеСчета");
	
	Запрос.УстановитьПараметр("Счета", ПараметрыОтчета.Счет);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	СтрокаМножественноеЧисло = ?(Выборка.Количество() > 1, "парным счетам", "счету");
	СтрокаСчетов = "";
	
	Пока Выборка.Следующий() Цикл
		СтрокаСчетов = СтрокаСчетов + СокрЛП(Выборка.ПредставлениеСчета) + ", ";
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаСчетов) Тогда
		СтрокаСчетов = Лев(СтрокаСчетов, СтрДлина(СтрокаСчетов) - 2);
	КонецЕсли;	
	
	
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оборотно-сальдовая ведомость по %3 %1 %2'"),
		СтрокаСчетов,
		СокрЛП(БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода)),
		СтрокаМножественноеЧисло);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(ПараметрыОтчета.Счет[0]);
	
	ВидыСубконто = Новый Массив;
	Для НомерСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС() Цикл
		
		ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
		Если ЗначениеЗаполнено(ВидСубконто) Тогда
			ВидыСубконто.Добавить(ВидСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("ВидыСубконто", ВидыСубконто);
	
	СчетаБезСубконто = СчетаБезСубконто(ПараметрыОтчета.Счет[0]);
	
	ПараметрыОтчета.Вставить("СчетаБезСубконто", СчетаБезСубконто);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконто", 		ВидыСубконто);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаБезСубконто", 	СчетаБезСубконто);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счета", 				ПараметрыОтчета.Счет);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", 		ПараметрыОтчета.Периодичность);
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", 	НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", 	КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	НастроитьСхемуКомпоновки(Схема, ПараметрыОтчета, КомпоновщикНастроек);
	
	НастроитьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

// В процедуре можно доработать макет перед выводом в отчет
// Параметры:
//   ПараметрыОтчета - Структура
//   МакетКомпоновки - МакетКомпоновкиДанных 
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Определим количество группировок
	КоличествоГруппировок = 0;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;

	// Снимем флаг Игнорировать значение Null для реквизитов субконто
	Для ИндексСубконто = 1 По 3 Цикл
		Для Каждого Поле Из МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Поля Цикл
			
			Если Лев(Поле.ПутьКДанным, 10) = "Субконто" + ИндексСубконто + "." Тогда
				
				Поле.Роль.ИгнорироватьЗначенияNULL = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	КоличествоСтрокШапки = Макс(?(КоличествоГруппировок = 1,2,КоличествоГруппировок), 1);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки + 1);

	// Обработка шапки отчета
	// Шапка отчета состоит и 4 макетов, макет шапки таблицы, и 3 макета группировок колонок
	// поместим ссылки на них в массив, для дальнейшей обработки
	МакетШапкиТаблицы = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	МакетыШапкиОтчета = Новый Массив;
	МакетыШапкиОтчета.Добавить(МакетШапкиТаблицы.Имя);

	Для Каждого Колонка Из МакетКомпоновки.Тело[3].Колонки Цикл

		Для Каждого ТелоГруппировки Из Колонка.Тело Цикл
			МакетыШапкиОтчета.Добавить(ТелоГруппировки.Макет);
		КонецЦикла;

	КонецЦикла;
	
	// Удалим лишние строки из шапки отчета
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ИмяМакетаШапкиОтчета Из МакетыШапкиОтчета Цикл
		
		МакетШапкиОтчета = МакетКомпоновки.Макеты[ИмяМакетаШапкиОтчета];
		
		
		Для Индекс = КоличествоСтрокШапки + 1 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
			
			МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
			
		КонецЦикла;
		
		Для Каждого Элемент Из МассивДляУдаления Цикл
			МакетШапкиОтчета.Макет.Удалить(Элемент);
		КонецЦикла;
		
		// Если группировка только по счету, объединим ячейки заголовка таблицы
		Если МакетШапкиОтчета = МакетШапкиТаблицы И КоличествоСтрокШапки = 1 Тогда
			
			Для Каждого Ячейка Из МакетШапкиОтчета.Макет[МакетШапкиОтчета.Макет.Количество() - 1].Ячейки Цикл
				
				Оформление = Ячейка.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
				Оформление.Значение = Истина;
				Оформление.Использование = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Запомним какие макеты ресурсов каким колонкам соответствуют
	// Это может понадобиться для обработки развернутого сальдо
	СоответствиеМакетовКолонкамОтчета = Новый Соответствие;
	
	Если ПараметрыОтчета.РазвернутоеСальдо Тогда
		
		// Макет подвала таблицы это макет подвала верхней группировки из этой таблицы
		МакетПодвалаТаблицы = МакетКомпоновки.Макеты[МакетКомпоновки.Тело[3].Строки[0].МакетПодвала.Макет];
		
		КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
		
		// В итогах сначала идет обычное сальдо а затем развернутое, разделим заголовок итогов на 2 части.
		// И нижнюю подпишем "Итого развернутое"
		ЯчейкаРазвернутыйИтог = МакетПодвалаТаблицы.Макет[КоличествоПоказателей].Ячейки[0];
		
		ОбъединятьПоВертикали = ЯчейкаРазвернутыйИтог.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
		
		Если ОбъединятьПоВертикали <> Неопределено Тогда
			
			ОбъединятьПоВертикали.Использование = Ложь;
			
		КонецЕсли;

		ЯчейкаРазвернутыйИтог.Элементы.Очистить();
		НовыйЭлемент = ЯчейкаРазвернутыйИтог.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		НовыйЭлемент.Значение = НСтр("ru = 'Итого развернутое'");
		
		// В дальнейшей обработке понадобится знать где макеты ресурсов подвала
		МакетыПодвалаТаблицы = Новый Массив;
		МакетыПодвалаТаблицы.Добавить(МакетПодвалаТаблицы.Имя);
		
		Для Каждого МакетРесурсаПодвала Из МакетКомпоновки.Тело[3].Строки[0].МакетПодвала.МакетРесурсов Цикл
			МакетыПодвалаТаблицы.Добавить(МакетРесурсаПодвала.Макет);
		КонецЦикла;
		
		//NFO-241
		// Если включена валютная сумма, то нужно удалитьвалюту из итогов
		Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
			
			НаборПоказателей = ПолучитьНаборПоказателей();
			
			// Определяем позицию валютной суммы
			ПозицияВалюты = 0;
			Для Каждого Показатель Из НаборПоказателей Цикл
				
				Если Показатель = "ВалютнаяСумма" Тогда
					Прервать;
				КонецЕсли;
				
				Если ПараметрыОтчета["Показатель" + Показатель] Тогда
					ПозицияВалюты = ПозицияВалюты + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если валюта не единственный показатель, то удаляем ее из итогов
			Если ПозицияВалюты > 0 Тогда
				Для Каждого Макет Из МакетыПодвалаТаблицы Цикл
					МакетКомпоновки.Макеты[Макет].Макет.Удалить(МакетКомпоновки.Макеты[Макет].Макет[ПозицияВалюты]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		//NFO-241
		
		// Найдем все макеты ресурсов
		МакетыРесурсов = Новый Массив;
		
		ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[3].Строки, МакетыРесурсов, СоответствиеМакетовКолонкамОтчета, , Истина, Истина);
			
		// Перереберем все макеты и удалим из них "простое" сальдо
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			
			СтрокиМакета = Макет.Макет;
			
			// Макеты шапки и подвала обрабатывать не нужно
			Если МакетыШапкиОтчета.Найти(Макет.Имя) <> Неопределено ИЛИ МакетыПодвалаТаблицы.Найти(Макет.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УдаляемыеСтроки = Новый Массив;
			
			// Определяем колонку к которой принадлежит макет
			Колонка = СоответствиеМакетовКолонкамОтчета.Получить(Макет.Имя);
			
			Если Колонка = Неопределено Тогда
				
				Для Сч = КоличествоПоказателей По СтрокиМакета.Количество() - 1 Цикл
					
					УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
					
				КонецЦикла;
				
			Иначе
				
				Для Сч = 0 По КоличествоПоказателей - 1 Цикл
					
					УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
				
				СтрокиМакета.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Макеты группировки и ресурсов группировки по валюте,
	// будем использовать для определения принадлежности элемента Макет, Макета компоновки к группировке по валюте.
	МакетГруппировкиВалюта = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	МакетРесурсовГруппировкиВалюта = Новый Массив;
	
	МассивИменМакетовВалюта = Новый Массив;
	Для Каждого МакетВалюта Из МакетГруппировкиВалюта Цикл
		МассивИменМакетовВалюта.Добавить(МакетВалюта.Имя);
	КонецЦикла;
	
	ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[3].Строки, МакетРесурсовГруппировкиВалюта, СоответствиеМакетовКолонкамОтчета, "Валюта", Истина);
	
	МассивИменМакетовВключенныхВГруппировкуВалюта = Новый Массив;
	НайденаВалюта = Ложь;
	Для Каждого СтрокаГруппировка Из ПараметрыОтчета.Группировка Цикл
		
		Если НЕ СтрокаГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаГруппировка.Поле = "Валюта" Тогда
			НайденаВалюта = Истина;
		КонецЕсли;
		
		Если НайденаВалюта Тогда // Нужны все последующие группировки 
			
			МакетГруппировкиВключеннойВВалюту = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, СтрокаГруппировка.Поле);
			
			Для Каждого МакетВключенныйВВалюту Из МакетГруппировкиВключеннойВВалюту Цикл
				МассивИменМакетовВключенныхВГруппировкуВалюта.Добавить(МакетВключенныйВВалюту.Имя);
			КонецЦикла;
			
			ИменаМакетовРесурсов = ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[3].Строки, 
				МакетГруппировкиВключеннойВВалюту, СоответствиеМакетовКолонкамОтчета, СтрокаГруппировка.Поле, Истина);
				
			Если ИменаМакетовРесурсов <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменМакетовВключенныхВГруппировкуВалюта, ИменаМакетовРесурсов, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в отчете включена валютная сумма, то ее нужно показывать только по тем счетам
	// где есть валюта, для того чтобы убрать вывод показателя валюта там где он не нужен.
	// Переберем все макеты, и удалим строки предназначенные для вывода валютных сумм у всех макетов
	// кроме макетов группировки по валюте и макетов ресурсов группировки по валюте.
	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
			// Пропускаем макеты шапки
			Если МакетыШапкиОтчета.Найти(Макет.Имя) = Неопределено Тогда
				
				Если МассивИменМакетовВалюта.Найти(Макет.Имя) <> Неопределено 
					ИЛИ МакетРесурсовГруппировкиВалюта.Найти(Макет.Имя) <> Неопределено
					ИЛИ МассивИменМакетовВключенныхВГруппировкуВалюта.Найти(Макет.Имя) <> Неопределено Тогда
					
				ИначеЕсли Макет.Макет.Количество() > 1 Тогда // Последний не удаляем
					
					Макет.Макет.Удалить(Макет.Макет.Количество() - 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	КорректируемыйНабор = МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Элементы.ОстаткиИОбороты;
	УточнитьРеквизитСимволаОФР(КорректируемыйНабор, "Символ", "Символ");
	УточнитьРеквизитСимволаОФР(КорректируемыйНабор, "СтатьяДоходаРасхода", "Статья");
	
КонецПроцедуры

Процедура УточнитьРеквизитСимволаОФР(КорректируемыйНабор, ЗаменяемыйРеквизит, ЧастьЗаменяющегоРеквизита)
	
	Для НомерСубконто = 1 По 3 Цикл
		КорректируемыйНабор.Запрос = СтрЗаменить(КорректируемыйНабор.Запрос, 
		СтрШаблон("ЕПСОстаткиИОбороты.Субконто%1.%2", НомерСубконто, ЗаменяемыйРеквизит), 
		СтрШаблон("ВЫБОР КОГДА ЕПСОстаткиИОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный) ТОГДА ВЫРАЗИТЬ(ЕПСОстаткиИОбороты.Субконто%1 КАК Справочник.СимволыОФР).%2Расхода ИНАЧЕ ВЫРАЗИТЬ(ЕПСОстаткиИОбороты.Субконто%1 КАК Справочник.СимволыОФР).%2Дохода КОНЕЦ", НомерСубконто, ЧастьЗаменяющегоРеквизита));
	КонецЦикла;

КонецПроцедуры

// В процедуре можно доработать результат
// Параметры:
//   ПараметрыОтчета - Структура
//   Результат - ТабличныйДокумент
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает набор показателей отчета
// Возвращаемое значение:
//   НаборПоказателей - Массив
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ"); //NFO-241
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьМакетыРесурсовГруппировки(Таблица, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки = Неопределено, ВключатьМакетыВложенныхГруппировок = Ложь, ПрочитатьМакетыРесурсов = Ложь)
	
	// Перебираем все элементы макета
	Для Каждого Группировка Из Таблица Цикл
		
		Если ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			// Если это группировка проверим поле группировки
			Если ПолеГруппировки = Неопределено ИЛИ Группировка.Группировка[0].ИмяПоля = ПолеГруппировки Тогда
				
				Если ВключатьМакетыВложенныхГруппировок Тогда
					// Перебираем вложенные группировки, условие по полю группировки в них не накладываем.
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета,,,Истина);
				Иначе
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок, Истина);
				КонецЕсли;
				
				// Перебираем иерархию группировки
				Для Каждого ТелоИерархии Из Группировка.ТелоИерархии Цикл
					
					Если ТипЗнч(ТелоИерархии) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
						
						Для Каждого МакетРесурсов Из ТелоИерархии.МакетРесурсов Цикл
							// Помещаем макеты в массив
							МассивМакетов.Добавить(МакетРесурсов.Макет);
							// Добавляем соответствие макетов ресурсов и колонок отчета
							СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
							
						КонецЦикла;
						
					КонецЕсли;
				
				КонецЦикла;
				
			Иначе
				// Если эта группировка не подошла по условию проверим вложенные группировки
				ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок);

			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Группировка) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") И ПрочитатьМакетыРесурсов Тогда
			
			Для Каждого МакетРесурсов Из Группировка.МакетРесурсов Цикл
				
				// Помещаем макеты в массив
				МассивМакетов.Добавить(МакетРесурсов.Макет);
				// Добавляем соответствие макетов ресурсов и колонок отчета
				СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Получает список субсчетов выбранного счета, 
// состав субконто которых не полностью соответствует составу субконто счета.
// Возвращаемое значение:
//   Массив - Список счетов
Функция ОсобенныеСчета(Счет)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕПСВидыСубконто.Ссылка КАК Счет,
	               |	КОЛИЧЕСТВО(ЕПСВидыСубконто.ВидСубконто) КАК ВидСубконто
	               |ИЗ
	               |	ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
	               |ГДЕ
	               |	ЕПСВидыСубконто.Ссылка В ИЕРАРХИИ(&Счет)
	               |	И ЕПСВидыСубконто.ВидСубконто В (&ВидСубконто1, &ВидСубконто2, &ВидСубконто3)
	               |	И ЕПСВидыСубконто.Ссылка <> &Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕПСВидыСубконто.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ЕПСВидыСубконто.ВидСубконто) <> &КоличествоСубконто";

	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	Запрос.УстановитьПараметр("Счет", СвойстваСчета.Ссылка);
	
	Запрос.УстановитьПараметр("ВидСубконто1", 		СвойстваСчета.ВидСубконто1);
	Запрос.УстановитьПараметр("ВидСубконто2", 		СвойстваСчета.ВидСубконто2);
	Запрос.УстановитьПараметр("ВидСубконто3", 		СвойстваСчета.ВидСубконто3);
	Запрос.УстановитьПараметр("КоличествоСубконто", СвойстваСчета.КоличествоСубконто);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Получает список субсчетов выбранного счета, у которых нет субконто совсем, или же их состав субконто
// совершенно отличается от состава субконто счета.
Функция СчетаБезСубконто(Счет)
	
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);

	Если СвойстваСчета.КоличествоСубконто = 0 Тогда
		
		Возврат Новый Массив();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕПСВидыСубконто.Ссылка КАК Счет
	               |ПОМЕСТИТЬ СчетаССубконто
	               |ИЗ
	               |	ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
	               |ГДЕ
	               |	ЕПСВидыСубконто.Ссылка В ИЕРАРХИИ(&Счет)
	               |	И ЕПСВидыСубконто.ВидСубконто В (&ВидСубконто1, &ВидСубконто2, &ВидСубконто3)
	               |	И ЕПСВидыСубконто.Ссылка <> &Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕПСВидыСубконто.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕПС.Ссылка КАК Счет
	               |ПОМЕСТИТЬ ВсеСчета
	               |ИЗ
	               |	ПланСчетов.ЕПС КАК ЕПС
	               |ГДЕ
	               |	ЕПС.Ссылка В ИЕРАРХИИ(&Счет)
	               |	И ЕПС.Ссылка <> &Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеСчета.Счет
	               |ИЗ
	               |	ВсеСчета КАК ВсеСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
	               |		ПО ВсеСчета.Счет = ЕПСВидыСубконто.Ссылка
	               |ГДЕ
	               |	ЕПСВидыСубконто.Ссылка ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВсеСчета.Счет
	               |ИЗ
	               |	ВсеСчета КАК ВсеСчета
	               |ГДЕ
	               |	НЕ ВсеСчета.Счет В
	               |				(ВЫБРАТЬ
	               |					СчетаССубконто.Счет КАК СЧЕТ
	               |				ИЗ
	               |					СчетаССубконто КАК СчетаССубконто)";

	Запрос.УстановитьПараметр("Счет", СвойстваСчета.Ссылка);
	
	Запрос.УстановитьПараметр("ВидСубконто1", СвойстваСчета.ВидСубконто1);
	Запрос.УстановитьПараметр("ВидСубконто2", СвойстваСчета.ВидСубконто2);
	Запрос.УстановитьПараметр("ВидСубконто3", СвойстваСчета.ВидСубконто3);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Получает таблицу состава субконто счетов в которой счета с одинаковым составом субконто объединены в одну строку
// Параметры:
// Счета - Массив - Счета для которых требуется определить состав субконто.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица значений с колонками:
// * Счета - Массив - Счета с определенным составом субконто
// * ВидыСубконто - Массив - Виды субконто счетов
Функция СоставСубконтоСчетов(Счета, ВидыСубконтоЭталон)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕПСВидыСубконто.Ссылка КАК Счет,
		|	ЕПСВидыСубконто.ВидСубконто КАК ВидСубконто
		|ИЗ
		|	ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
		|ГДЕ
		|	ЕПСВидыСубконто.Ссылка В(&Счет)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидСубконто
		|ИТОГИ ПО
		|	Счет
		|";
	
	Запрос.УстановитьПараметр("Счет", Счета);
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСубконтоСчетов = НовыйТаблицаСубконтоСчетов();
	
	Пока Результат.Следующий() Цикл
		
		ВидыСубконто = Новый Массив;
		
		ВидыСубконтоСчета = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВидыСубконтоСчета.Следующий() Цикл
			
			Позиция = ВидыСубконтоЭталон.Получить(ВидыСубконтоСчета.ВидСубконто);
			
			Если Позиция = Неопределено Тогда
				ВидыСубконто.Добавить(ВидыСубконтоСчета.ВидСубконто);
			Иначе
				Если ВидыСубконто.Количество() > Позиция И ВидыСубконто[Позиция] = Неопределено Тогда
					ВидыСубконто.Удалить(Позиция);
				КонецЕсли;
				ВидыСубконто.Вставить(Позиция, ВидыСубконтоСчета.ВидСубконто);
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураСубконто = НовыйСтруктураСубконто();
		ИндексСубконто = 1;
		Для Каждого ВидСубконто Из ВидыСубконто Цикл
			
			Если ВидСубконто <> Неопределено Тогда
				СтруктураСубконто.Вставить("ВидСубконто" + (ИндексСубконто), ВидСубконто);
				ИндексСубконто = ИндексСубконто + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		ПодходящиеСтроки = ТаблицаСубконтоСчетов.НайтиСтроки(СтруктураСубконто);
		
		Если ПодходящиеСтроки.Количество() > 0 Тогда
			
			ПодходящиеСтроки[0].Счета.Добавить(Результат.Счет);
			
		Иначе
			
			НоваяСтрока = ТаблицаСубконтоСчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСубконто);
			НоваяСтрока.ВидыСубконто = ВидыСубконто;
			НоваяСтрока.Счета = Новый Массив();
			НоваяСтрока.Счета.Добавить(Результат.Счет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС() Цикл
		ТаблицаСубконтоСчетов.Колонки.Удалить("ВидСубконто" + НомерСубконто);
	КонецЦикла;
	
	Возврат ТаблицаСубконтоСчетов;
	
КонецФункции

Функция ВидыСубконтоЭталон(Счет)
	
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	ВидыСубконтоЭталон = Новый Соответствие;
	ВидыСубконтоЭталон.Вставить(СвойстваСчета.ВидСубконто1, 0);
	ВидыСубконтоЭталон.Вставить(СвойстваСчета.ВидСубконто2, 1);
	ВидыСубконтоЭталон.Вставить(СвойстваСчета.ВидСубконто3, 2);

	Возврат ВидыСубконтоЭталон;

КонецФункции

Функция НовыйТаблицаСубконтоСчетов()
	
	ТаблицаСубконтоСчетов 	= Новый ТаблицаЗначений;
	ТипВидСубконто 			= Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоЕПС");
	ТипМассив 				= Новый ОписаниеТипов("Массив");
	
	ТаблицаСубконтоСчетов.Колонки.Добавить("Счета", 		ТипМассив);
	ТаблицаСубконтоСчетов.Колонки.Добавить("ВидыСубконто", 	ТипМассив);
	
	Для НомерСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС() Цикл
		ТаблицаСубконтоСчетов.Колонки.Добавить("ВидСубконто" + НомерСубконто, 	ТипВидСубконто);
	КонецЦикла;

	Возврат ТаблицаСубконтоСчетов;
	
КонецФункции

Функция НовыйСтруктураСубконто()

	СтруктураСубконто = Новый Структура();
	
	Для НомерСубконто = 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконтоЕПС() Цикл
		
		СтруктураСубконто.Вставить("ВидСубконто" + НомерСубконто);
		
	КонецЦикла;
	
	Возврат СтруктураСубконто;
	
КонецФункции

// Добавляет параметр в схему компоновки данных и присваивает ему значение
// Параметры:
// 	ИмяПараметра - Строка - Имя (Ключ) нового параметра
// 	ЗначениеПараметра - Произвольный - Значение которое нужно присвоить параметру
Процедура ДобавитьПараметрСхемыКомпоновки(ИмяПараметра, ЗначениеПараметра, СхемаКомпоновкиДанных)
	
	НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	
	Если НовыйПараметр = Неопределено Тогда
		НовыйПараметр 							= СхемаКомпоновкиДанных.Параметры.Добавить();
	КонецЕсли;
	
	НовыйПараметр.Имя 						= ИмяПараметра;
	НовыйПараметр.Значение 					= ЗначениеПараметра;
	НовыйПараметр.ВключатьВДоступныеПоля 	= Ложь;
	НовыйПараметр.ОграничениеИспользования	= Истина;
	НовыйПараметр.Использование 			= ИспользованиеПараметраКомпоновкиДанных.Всегда;
	
КонецПроцедуры

#Область ДоработкаСхемыКомпоновкиДанных

// Переопределяет текст запроса набора данных ОстаткиИОборотыПоОсобеннымСчетам
Процедура НастроитьСхемуКомпоновки(СхемаКомпоновкиДанных, ПараметрыОтчета, КомпоновщикНастроек)
	
	НаборДанных_ОстаткиИОборотыПоОсобеннымСчетам = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Элементы.Найти("ОстаткиИОборотыПоОсобеннымСчетам");
	
	Если НаборДанных_ОстаткиИОборотыПоОсобеннымСчетам <> Неопределено Тогда
		Запрос = ТекстЗапросаДляОсобенныхСчетов(ПараметрыОтчета.Счет[0], СхемаКомпоновкиДанных, КомпоновщикНастроек);
		Если Запрос = Неопределено Тогда
			
			НаборДанных_ОстаткиИОборотыПоОсобеннымСчетам.Запрос = ПустойЗапрос();

		Иначе
			НаборДанных_ОстаткиИОборотыПоОсобеннымСчетам.Запрос = Запрос;
		КонецЕсли;
	КонецЕсли;
	
	НаборДанных_ОстаткиИОборотыБезСубконто = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Элементы.Найти("ОстаткиИОборотыБезСубконто");
	
		
	Если ПараметрыОтчета.СчетаБезСубконто.Количество() = 0 Тогда
		НаборДанных_ОстаткиИОборотыБезСубконто.Запрос = ПустойЗапрос();
	Иначе
		НаборДанных_ОстаткиИОборотыБезСубконто.Запрос = ТекстЗапросаДляСчетовБезСубконто();
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета)
	
	// Очищаем структуру отчета и выбранные поля
	// Они будут перезаполнены в соответствии с настройками которые сделал пользователь
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	ВидыОстатка = Новый Массив;
	ВидыОстатка.Добавить("");
	
	Если ПараметрыОтчета.РазвернутоеСальдо Тогда
		ВидыОстатка.Добавить("Развернутый");
	КонецЕсли;
	
	Если КоличествоПоказателей > 1 Тогда
		
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя = "Показатели";
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = БухгалтерскиеОтчеты.ЗаголовокГруппыПоказателей();
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		Для Каждого ВидОстатка Из ВидыОстатка Цикл
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя + ВидОстатка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Для начального сальдо, оборотов и конечного сальдо создадим по отдельной колонке
	// в каждой колонке будет 2 ячейки дебет и кредит.
	
	// Колонка Начальное сальдо
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "СальдоНаНачалоПериода";
	ГруппаСальдоНаНачало = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru = 'Сальдо на начало периода'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Обороты
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "ОборотыЗаПериод";
	ГруппаОбороты = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru = 'Обороты за период'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Конечное сальдо
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "СальдоНаКонецПериода";
	ГруппаСальдоНаКонец = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru = 'Сальдо на конец периода'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Для Каждого ВидОстатка Из ВидыОстатка Цикл
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатка + "ОборотДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатка + "ОборотКт");
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокКт");
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru = 'Уменьшенный автоотступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru = 'Уменьшенный автоотступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Структура = Таблица.Строки.Добавить();
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить();
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Период
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура);
	
	Для каждого ЭлементГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период")) Тогда
			Поле = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			Поле.Поле = ЭлементГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Валюта
	Если ПараметрыОтчета.ПоказательВалютнаяСумма И БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(Таблица.Строки, "Валюта") = Неопределено Тогда
		Структура = Структура.Структура.Добавить();
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	//NFO-241
	// Пометить строки для удаления по счетам, на которых не ведется налоговый учет
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Для Каждого Показатель Из МассивПоказателей Цикл
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйРазвернутыйОстатокДт");
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	//NFO-241
	
КонецПроцедуры

// Формирует текст запроса учитывающий разный состав субконто субсчетов выбранного счета.
// Возвращаемое значение:
//   Строка - Текст запроса
Функция ТекстЗапросаДляОсобенныхСчетов(Счет, СхемаКомпоновкиДанных, КомпоновщикНастроек)
	
	ОсобенныеСчета = ОсобенныеСчета(Счет);
	
	Если ОсобенныеСчета.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ТекстЗапроса = "";
		СчетчикСчетов = 1;
		ШаблонПоляСубконто = "ЕПСОстаткиИОбороты.Субконто";
		
		Для Каждого СчетаИСубконто Из СоставСубконтоСчетов(ОсобенныеСчета, ВидыСубконтоЭталон(Счет)) Цикл
			
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("ПараметрСубконто1", "NULL");
			ПараметрыЗапроса.Вставить("ПараметрСубконто2", "NULL");
			ПараметрыЗапроса.Вставить("ПараметрСубконто3", "NULL");
			
			СчетчикСубконто = 1;
			ВидыСубконтоДляСхемыКомпоновки = Новый Массив;
			УсловиеПоСубконто = "";
			
			Для ИндексВидаСубконто = 0 По СчетаИСубконто.ВидыСубконто.ВГраница() Цикл
				
				ВидСубконто = СчетаИСубконто.ВидыСубконто[ИндексВидаСубконто];
				
				Если ВидСубконто = Неопределено Тогда
					ПараметрыЗапроса.Вставить("ПараметрСубконто" + (ИндексВидаСубконто + 1), "НЕОПРЕДЕЛЕНО");
				Иначе
					УсловиеПоСубконто = УсловиеПоСубконто + ", (Субконто" + СчетчикСубконто + ").*";
					
					ПараметрыЗапроса.Вставить("ПараметрСубконто" + (ИндексВидаСубконто + 1), ШаблонПоляСубконто + СчетчикСубконто);
					ВидыСубконтоДляСхемыКомпоновки.Добавить(ВидСубконто);
					СчетчикСубконто = СчетчикСубконто + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЗапроса.Вставить("УсловиеПоСубконто", 	УсловиеПоСубконто);
			ПараметрыЗапроса.Вставить("ОсобенныеСчета", 	"&Счет_" + СчетчикСчетов);
			ПараметрыЗапроса.Вставить("ВидыСубконто", 		"&ВидыСубконто_" + СчетчикСчетов);
			
			ДобавитьПараметрСхемыКомпоновки("Счет_" + СчетчикСчетов, СчетаИСубконто.Счета, СхемаКомпоновкиДанных);
			ДобавитьПараметрСхемыКомпоновки("ВидыСубконто_" + СчетчикСчетов, ВидыСубконтоДляСхемыКомпоновки, СхемаКомпоновкиДанных);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконто_" + СчетчикСчетов, ВидыСубконтоДляСхемыКомпоновки);
			
			ТекстЗапроса = ТекстЗапроса + РазделительЗапросов(СчетчикСчетов) + ТекстЗапросаПоШаблону(ПараметрыЗапроса, СчетчикСчетов);
			СчетчикСчетов = СчетчикСчетов + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляСчетовБезСубконто()
	
	Возврат "ВЫБРАТЬ
	        |	ЕПСОстаткиИОбороты.Счет КАК Счет,
	        |	ЕПСОстаткиИОбороты.Период КАК Период,
	        |	ЕПСОстаткиИОбороты.Субконто1 КАК Субконто1,
	        |	ЕПСОстаткиИОбороты.Субконто2 КАК Субконто2,
	        |	ЕПСОстаткиИОбороты.Субконто3 КАК Субконто3,
	        |	ЕПСОстаткиИОбороты.Валюта КАК Валюта,
	        |	ЕПСОстаткиИОбороты.Портфель КАК Портфель,
	        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕСТЬNULL(ЕПСОстаткиИОбороты.Субконто1, """")) КАК Субконто1Представление,
	        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕСТЬNULL(ЕПСОстаткиИОбороты.Субконто2, """")) КАК Субконто2Представление,
	        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕСТЬNULL(ЕПСОстаткиИОбороты.Субконто3, """")) КАК Субконто3Представление,
	        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Валюта) КАК ВалютаПредставление,
	        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Портфель) КАК ОрганизацияПредставление,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт КАК БУНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.СуммаОборотДт КАК БУОборотДт,
	        |	ЕПСОстаткиИОбороты.СуммаОборотКт КАК БУОборотКт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт КАК БУНачальныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК НУНачальныйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК НУНачальныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК НУКонечныйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК НУКонечныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУОборотДт КАК НУОборотДт,
			|   ЕПСОстаткиИОбороты.СуммаНУОборотКт КАК НУОборотКт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК БУНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК БУНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК БУКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК БУКонечныйРазвернутыйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт КАК НУНачальныйРазвернутыйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт КАК НУНачальныйРазвернутыйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт КАК НУКонечныйРазвернутыйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт КАК НУКонечныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалНачальныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт КАК ВалНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт КАК ВалНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт КАК ВалКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт КАК ВалКонечныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалОборотДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалОборотКт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КолНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КолНачальныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт КАК КолНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт КАК КолНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КолКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КолКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоОборотДт КАК КолОборотДт,
	        |	ЕПСОстаткиИОбороты.КоличествоОборотКт КАК КолОборотКт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт КАК КолКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт КАК КолКонечныйРазвернутыйОстатокКт
	        |{ВЫБРАТЬ
	        |	Счет.*,
	        |	Период,
	        |	Субконто1.*,
	        |	Субконто2.*,
	        |	Субконто3.*,
	        |	Портфель.*,
	        |	Валюта.*,
	        |	Субконто1Представление,
	        |	Субконто2Представление,
	        |	Субконто3Представление,
	        |	ВалютаПредставление,
	        |	ОрганизацияПредставление,
	        |	БУНачальныйОстатокДт,
	        |	БУНачальныйОстатокКт,
	        |	БУКонечныйОстатокДт,
	        |	БУКонечныйОстатокКт,
	        |	БУОборотДт,
	        |	БУОборотКт,
			|   НУНачальныйОстатокДт,
			|   НУНачальныйОстатокКт,
			|   НУКонечныйОстатокДт,
			|   НУКонечныйОстатокКт,
			|   НУОборотДт,
			|   НУОборотКт,
	        |	БУНачальныйРазвернутыйОстатокДт,
	        |	БУНачальныйРазвернутыйОстатокКт,
	        |	БУКонечныйРазвернутыйОстатокДт,
	        |	БУКонечныйРазвернутыйОстатокКт,
			|   НУНачальныйРазвернутыйОстатокДт,
			|   НУНачальныйРазвернутыйОстатокКт,
			|   НУКонечныйРазвернутыйОстатокДт,
			|   НУКонечныйРазвернутыйОстатокКт,
	        |	ВалНачальныйОстатокДт,
	        |	ВалНачальныйОстатокКт,
	        |	ВалНачальныйРазвернутыйОстатокДт,
	        |	ВалНачальныйРазвернутыйОстатокКт,
	        |	ВалКонечныйРазвернутыйОстатокДт,
	        |	ВалКонечныйРазвернутыйОстатокКт,
	        |	ВалКонечныйОстатокДт,
	        |	ВалКонечныйОстатокКт,
	        |	ВалОборотДт,
	        |	ВалОборотКт,
	        |	КолНачальныйОстатокДт,
	        |	КолНачальныйОстатокКт,
	        |	КолНачальныйРазвернутыйОстатокДт,
	        |	КолНачальныйРазвернутыйОстатокКт,
	        |	КолКонечныйОстатокДт,
	        |	КолКонечныйОстатокКт,
	        |	КолОборотДт,
	        |	КолОборотКт,
	        |	КолКонечныйРазвернутыйОстатокДт,
	        |	КолКонечныйРазвернутыйОстатокКт}
	        |ИЗ
	        |	РегистрБухгалтерии.ЕПС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц {(&Периодичность)}, , Счет В (&СчетаБезСубконто) {(Счет).*}, , {(Портфель).* КАК Портфель, (ЛицевойСчет).*, (Субконто1).*, (Субконто2).*, (Субконто3).*, (Валюта).*}) КАК ЕПСОстаткиИОбороты
	        |{ГДЕ
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.СуммаОборотДт,
	        |	ЕПСОстаткиИОбороты.СуммаОборотКт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУОборотДт,
			|   ЕПСОстаткиИОбороты.СуммаНУОборотКт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт,
			|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт,
	        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт,
	        |	ЕПСОстаткиИОбороты.КоличествоОборотДт,
	        |	ЕПСОстаткиИОбороты.КоличествоОборотКт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт,
	        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт}";

КонецФункции

// Подставляет параметры запроса в шаблон, и возвращает готовый текст запроса
// Возвращаемое значение:
// Строка - текст запроса
Функция ТекстЗапросаПоШаблону(Параметры, Счетчик)
	
	ТекстЗапроса = ШаблонЗапроса(Счетчик);
	
	Для Каждого Параметр Из Параметры Цикл
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса, в зависимости от счетчика возвращается разный текст.
// Параметры системы компоновки данных {} указываются только для первого запроса объединения.
// Возвращаемое значение:
//   Строка - шаблон запроса
Функция ШаблонЗапроса(Счетчик)
	
	Если Счетчик = 1 Тогда
		Возврат "ВЫБРАТЬ
		        |	ЕПСОстаткиИОбороты.Счет КАК Счет,
		        |	ЕПСОстаткиИОбороты.Период КАК Период,
		        |	&ПараметрСубконто1 КАК Субконто1,
		        |	&ПараметрСубконто2 КАК Субконто2,
		        |	&ПараметрСубконто3 КАК Субконто3,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто1) КАК Субконто1Представление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто2) КАК Субконто2Представление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто3) КАК Субконто3Представление,
		        |	ЕПСОстаткиИОбороты.Валюта КАК Валюта,
		        |	ЕПСОстаткиИОбороты.Портфель КАК Портфель,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Валюта) КАК ВалютаПредставление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Портфель) КАК ОрганизацияПредставление,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт КАК БУНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотДт КАК БУОборотДт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотКт КАК БУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт КАК БУНачальныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК НУНачальныйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК НУНачальныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК НУКонечныйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК НУКонечныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУОборотДт КАК НУОборотДт,
				|   ЕПСОстаткиИОбороты.СуммаНУОборотКт КАК НУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК БУНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК БУНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК БУКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК БУКонечныйРазвернутыйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт КАК НУНачальныйРазвернутыйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт КАК НУНачальныйРазвернутыйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт КАК НУКонечныйРазвернутыйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт КАК НУКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт КАК ВалНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт КАК ВалНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт КАК ВалКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт КАК ВалКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалОборотДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КолНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КолНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт КАК КолНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт КАК КолНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КолКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КолКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотДт КАК КолОборотДт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотКт КАК КолОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт КАК КолКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт КАК КолКонечныйРазвернутыйОстатокКт
		        |{ВЫБРАТЬ
		        |	Счет.*,
		        |	Период,
		        |	Субконто1,
		        |	Субконто2,
		        |	Субконто3,
		        |	Портфель.* КАК Портфель,
		        |	Валюта.*,
		        |	Субконто1Представление,
		        |	Субконто2Представление,
		        |	Субконто3Представление,
		        |	ВалютаПредставление,
		        |	ОрганизацияПредставление,
		        |	БУНачальныйОстатокДт,
		        |	БУНачальныйОстатокКт,
		        |	БУКонечныйОстатокДт,
		        |	БУКонечныйОстатокКт,
		        |	БУОборотДт,
		        |	БУОборотКт,
				|   НУНачальныйОстатокДт,
				|   НУНачальныйОстатокКт,
				|   НУКонечныйОстатокДт,
				|   НУКонечныйОстатокКт,
				|   НУОборотДт,
				|   НУОборотКт,
		        |	БУНачальныйРазвернутыйОстатокДт,
		        |	БУНачальныйРазвернутыйОстатокКт,
		        |	БУКонечныйРазвернутыйОстатокДт,
		        |	БУКонечныйРазвернутыйОстатокКт,
				|   НУНачальныйРазвернутыйОстатокДт,
				|   НУНачальныйРазвернутыйОстатокКт,
				|   НУКонечныйРазвернутыйОстатокДт,
				|   НУКонечныйРазвернутыйОстатокКт,
		        |	ВалНачальныйОстатокДт,
		        |	ВалНачальныйОстатокКт,
		        |	ВалНачальныйРазвернутыйОстатокДт,
		        |	ВалНачальныйРазвернутыйОстатокКт,
		        |	ВалКонечныйРазвернутыйОстатокДт,
		        |	ВалКонечныйРазвернутыйОстатокКт,
		        |	ВалКонечныйОстатокДт,
		        |	ВалКонечныйОстатокКт,
		        |	ВалОборотДт,
		        |	ВалОборотКт,
		        |	КолНачальныйОстатокДт,
		        |	КолНачальныйОстатокКт,
		        |	КолНачальныйРазвернутыйОстатокДт,
		        |	КолНачальныйРазвернутыйОстатокКт,
		        |	КолКонечныйОстатокДт,
		        |	КолКонечныйОстатокКт,
		        |	КолОборотДт,
		        |	КолОборотКт,
		        |	КолКонечныйРазвернутыйОстатокДт,
		        |	КолКонечныйРазвернутыйОстатокКт}
		        |ИЗ
		        |	РегистрБухгалтерии.ЕПС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц {(&Периодичность)}, , Счет В (&ОсобенныеСчета) {(Счет).*}, &ВидыСубконто, {(Портфель).* КАК Портфель, (ЛицевойСчет).*, (Валюта).*}) КАК ЕПСОстаткиИОбороты
		        |{ГДЕ
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт КАК БУНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотДт КАК БУОборотДт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотКт КАК БУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт КАК БУНачальныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК НУНачальныйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК НУНачальныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК НУКонечныйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК НУКонечныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУОборотДт КАК НУОборотДт,
				|	ЕПСОстаткиИОбороты.СуммаНУОборотКт КАК НУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК БУНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК БУНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК БУКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК БУКонечныйРазвернутыйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт КАК НУНачальныйРазвернутыйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт КАК НУНачальныйРазвернутыйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт КАК НУКонечныйРазвернутыйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт КАК НУКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт КАК ВалНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт КАК ВалНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт КАК ВалКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт КАК ВалКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалОборотДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КолНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КолНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт КАК КолНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт КАК КолНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КолКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КолКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотДт КАК КолОборотДт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотКт КАК КолОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт КАК КолКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт КАК КолКонечныйРазвернутыйОстатокКт}";

	Иначе
		
		Возврат "ВЫБРАТЬ
		        |	ЕПСОстаткиИОбороты.Счет КАК Счет,
		        |	ЕПСОстаткиИОбороты.Период КАК Период,
		        |	&ПараметрСубконто1 КАК Субконто1,
		        |	&ПараметрСубконто2 КАК Субконто2,
		        |	&ПараметрСубконто3 КАК Субконто3,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто1) КАК Субконто1Представление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто2) КАК Субконто2Представление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ПараметрСубконто3) КАК Субконто3Представление,
		        |	ЕПСОстаткиИОбороты.Валюта КАК Валюта,
		        |	ЕПСОстаткиИОбороты.Портфель КАК Портфель,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Валюта) КАК ВалютаПредставление,
		        |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕПСОстаткиИОбороты.Портфель) КАК ОрганизацияПредставление,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт КАК БУНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотДт КАК БУОборотДт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотКт КАК БУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт КАК БУНачальныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК НУНачальныйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК НУНачальныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК НУКонечныйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК НУКонечныйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУОборотДт КАК НУОборотДт,
				|   ЕПСОстаткиИОбороты.СуммаНУОборотКт КАК НУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК БУНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК БУНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК БУКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК БУКонечныйРазвернутыйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт КАК НУНачальныйРазвернутыйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт КАК НУНачальныйРазвернутыйОстатокКт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт КАК НУКонечныйРазвернутыйОстатокДт,
				|   ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт КАК НУКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт КАК ВалНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт КАК ВалНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт КАК ВалКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт КАК ВалКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалОборотДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КолНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КолНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт КАК КолНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт КАК КолНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КолКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КолКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотДт КАК КолОборотДт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотКт КАК КолОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт КАК КолКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт КАК КолКонечныйРазвернутыйОстатокКт
		        |ИЗ
		        |	РегистрБухгалтерии.ЕПС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц {(&Периодичность)}, , Счет В (&ОсобенныеСчета) {(Счет).*}, &ВидыСубконто, {(Портфель).*, (ЛицевойСчет).*, (Валюта).*}) КАК ЕПСОстаткиИОбороты
		        |{ГДЕ
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокДт КАК БУНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотДт КАК БУОборотДт,
		        |	ЕПСОстаткиИОбороты.СуммаОборотКт КАК БУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйОстатокКт КАК БУНачальныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК НУНачальныйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК НУНачальныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК НУКонечныйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК НУКонечныйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУОборотДт КАК НУОборотДт,
				|	ЕПСОстаткиИОбороты.СуммаНУОборотКт КАК НУОборотКт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК БУНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК БУНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК БУКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК БУКонечныйРазвернутыйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокДт КАК НУНачальныйРазвернутыйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУНачальныйРазвернутыйОстатокКт КАК НУНачальныйРазвернутыйОстатокКт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокДт КАК НУКонечныйРазвернутыйОстатокДт,
				|	ЕПСОстаткиИОбороты.СуммаНУКонечныйРазвернутыйОстатокКт КАК НУКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокДт КАК ВалНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаНачальныйРазвернутыйОстатокКт КАК ВалНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокДт КАК ВалКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаКонечныйРазвернутыйОстатокКт КАК ВалКонечныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалОборотДт,
		        |	ЕПСОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КолНачальныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КолНачальныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокДт КАК КолНачальныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоНачальныйРазвернутыйОстатокКт КАК КолНачальныйРазвернутыйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КолКонечныйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КолКонечныйОстатокКт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотДт КАК КолОборотДт,
		        |	ЕПСОстаткиИОбороты.КоличествоОборотКт КАК КолОборотКт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокДт КАК КолКонечныйРазвернутыйОстатокДт,
		        |	ЕПСОстаткиИОбороты.КоличествоКонечныйРазвернутыйОстатокКт КАК КолКонечныйРазвернутыйОстатокКт}";
		
	КонецЕсли;
	
КонецФункции

Функция РазделительЗапросов(Счетчик)
	
	Если Счетчик = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";

КонецФункции

Функция ПустойЗапрос()
	
	Возврат "
			|	ВЫБРАТЬ
			|	Неопределено КАК Портфель
			|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
