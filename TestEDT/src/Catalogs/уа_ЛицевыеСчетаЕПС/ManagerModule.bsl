#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ПРОГРАМНЫЙ_ИНТЕРФЕЙС 

// Функция Осуществляет поиск ЛицевогоСчета по переданным параметрам, 
// а в случае если не нашли может завести новый счет с этими параметрами поиска. 
//
// Параметры:
//  Контекст - <Структура>. Структура, содержащая в себе данные из шапки документа откуда производится создание\поиск лицевого счета.
//  АналитикаЛС - <Соответствие>. Соответствие содержащее в себе данные, по которым будет организовано заполнение данных для создания\поиска лицевого счета.
//  СоздаватьПриОтсутствии - <Булево>. Параметр, для того чтобы понять надо ли создавать новый счет в случае отсутствия лицевого счета по переданным параметрам.
//  СоздаватьПарныйСчет - <Булево>. Параметр, для того чтобы понять надо ли создавать парный лицевой счет (с аналогичными правилами) в случае создания лицевого счета по переданным параметрам.
//
// Возвращаемое значение:
//	<СправочникСсылка.ЛицевыеСчетаЕПС>.
//
Функция СчетПоАналитике(Контекст, АналитикаЛС, СоздаватьПриОтсутствии, СоздаватьПарныйСчет, КэшПоискаЛицевыхСчетов) Экспорт 
	
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Контекст.СчетЕПС);
	СчетВторогоПорядка = ПланыСчетов.ЕПС.СчетВторогоПорядка(СвойстваСчета);
	
	НастройкиАналитики = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.АналитикаСчета(СчетВторогоПорядка, Контекст.Портфель);
	КоллекцияАналитики = УчетЕПС.ПустаяКоллекцияАналитики();
	
	Контекст.Вставить("Аналитика", АналитикаЛС);
	Если ПланыСчетов.ЕПС.ЭтоСчетТретьегоПорядка(СвойстваСчета) Тогда
		НомерСубсчета = Перечисления.НомерСубсчета["Субсчет" + Прав(СокрЛП(СвойстваСчета.Код), 2)];
		АналитикаЛС.Вставить(ПланыВидовХарактеристик.ВидыСубконтоЕПС.СчетТретьегоПорядка, НомерСубсчета);
	КонецЕсли;
	
	Для Каждого ТекущаяАналитика Из АналитикаЛС Цикл
		УчетЕПС.УстановитьЗначениеАналитики(Контекст, НастройкиАналитики, КоллекцияАналитики, ТекущаяАналитика.Ключ, ТекущаяАналитика.Значение);	
	КонецЦикла; 
	
	ЭтоСозданиеПарногоСчета = Не СоздаватьПарныйСчет; // Если этот признак включен, то поиск ЛС происходит только по ЛС, у которых еще нет пары
	Результат = РегистрыСведений.ДанныеЛицевыхСчетовЕПС.НайтиЛицевойСчетПоАналитике(СчетВторогоПорядка, Контекст.Портфель, Контекст.Валюта, КоллекцияАналитики, Контекст.Дата, ЭтоСозданиеПарногоСчета, КэшПоискаЛицевыхСчетов);
	
	Если Результат = Неопределено И СоздаватьПриОтсутствии Тогда 
		Результат = СоздатьЛицевойСчетПоАналитике(Контекст, АналитикаЛС, КоллекцияАналитики, СоздаватьПарныйСчет, КэшПоискаЛицевыхСчетов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДополнитьКэшПоискаЛицевыхСчетов(КэшПоискаЛицевыхСчетов, Результат, СчетВторогоПорядка, Контекст.Портфель, Контекст.Валюта, КоллекцияАналитики, Контекст.Дата);
	КонецЕсли;
	                                            
	Возврат Результат;
	
КонецФункции

// Функция получает максиматьный порядковый номер лицевого счета
//
//СчетЕПС - ПланСчетовСсылка.ЕПС.
//Портфель - СправочникСсылка.ДоговорыДУ.
//Валюта - СправочникСсылка.Вылюты.
//
//Резульатом является максимальный порядковый номер для переданных параметров,
//или 0 в случае если Лицевых счетов с таким набором параметров нет.
//
Функция ПолучитьМаксимальныйНомерЛицевогоСчета(СчетЕПС, Портфель) Экспорт 
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЛицевыеСчетаЕПС.Ссылка.ПорядковыйНомер) КАК Номер
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
		|ГДЕ
		|	ЛицевыеСчетаЕПС.Владелец = &СчетЕПС
		|	И ЛицевыеСчетаЕПС.Портфель = &Портфель";

	Запрос.УстановитьПараметр("СчетЕПС", СчетЕПС);
	Запрос.УстановитьПараметр("Портфель", Портфель);	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий(); 
	МаксНомер = ?(Выборка.Номер = NULL, 0, Выборка.Номер);	
	Возврат МаксНомер;			
КонецФункции

// Функция формирует код лицевого счета по переданным параметрам
//
//СчетЕПС - ПланСчетовСсылка.ЕПС.
//Портфель - СправочникСсылка.ДоговорыДУ.
//Валюта - СправочникСсылка.Вылюты.
//Символ - СправочникСсылка.СимволыДоходовРасходов.
//
//Резульатом является Структура содержащая код и порядковый номер 
//
Функция НомерЛицевогоСчетаПоПараметрам(СчетЕПС, Портфель, Валюта, Символ, ПорядковыйНомер = 0) Экспорт 
	
	НомерЛицевогоСчета = "";
	
	ДополнитьНомерЛицевогоСчетаНомеромСчетаВторогоПорядка(НомерЛицевогоСчета, СчетЕПС);
	ДополнитьНомерЛицевогоСчетаКодомВалюты(НомерЛицевогоСчета, Валюта);
	ДополнитьНомерЛицевогоСчетаПризнакомДоверительногоУправления(НомерЛицевогоСчета, Портфель); 
	ДополнитьНомерЛицевогоСчетаПризнакомВидаДеятельностиНПФ(НомерЛицевогоСчета, Портфель);
	ДополнитьНомерЛицевогоСчетаСимволомОтчетаОФинансовыхРезультатах(НомерЛицевогоСчета, Символ, СчетЕПС);		
	ДополнитьНомерЛицевогоСчетаПорядковымНомером(НомерЛицевогоСчета, СчетЕПС, Портфель, ПорядковыйНомер);

	СтруктураНомера = Новый Структура;
	СтруктураНомера.Вставить("ПорядковыйНомер", ПорядковыйНомер);
	СтруктураНомера.Вставить("НомерЛицевогоСчета", НомерЛицевогоСчета);
	
	Возврат СтруктураНомера;
	
КонецФункции

// Процедура осуществляет создание парного лицевого счета по переданным параметрам в случае его отсутствия
//
// Параметры:
//  ЛицевойСчетЕПС - <СправочникСсылка.ЛицевыеСчетаЕПС> 
//  Контекст - <Структура>. Структура, содержащая в себе данные из шапки документа откуда производится создание\поиск лицевого счета.
//  АналитикаЛС - <Соответствие>. Соответствие содержащее в себе данные, по которым будет организовано заполнение данных для создания\поиска лицевого счета.
// 
Процедура СоздатьПарныйЛицевойСчет(ЛицевойСчетЕПС, Контекст = Неопределено, АналитикаЛС = Неопределено, КэшПоискаЛицевыхСчетов = Неопределено) Экспорт 
	
	Если КэшПоискаЛицевыхСчетов = Неопределено Тогда
		КэшПоискаЛицевыхСчетов = Новый Соответствие;
	КонецЕсли;
	
	Если Контекст = Неопределено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("СчетЕПС",	  ЛицевойСчетЕПС.Владелец);
		Контекст.Вставить("Портфель",	  ЛицевойСчетЕПС.Портфель);
		Контекст.Вставить("Валюта",		  ЛицевойСчетЕПС.Валюта);
		Контекст.Вставить("Дата",		  ЛицевойСчетЕПС.ДатаСоздания);
		Контекст.Вставить("Документ", 	  Неопределено);
	КонецЕсли;
	
	Если АналитикаЛС = Неопределено Тогда
		АналитикаЛС = Новый Соответствие;
	
		НастройкиАналитики = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.АналитикаСчета(ЛицевойСчетЕПС.Владелец, ЛицевойСчетЕПС.Портфель);
		НомерАналитики = 0;
		Для Каждого ТекущаяАналитика Из НастройкиАналитики Цикл
			НомерАналитики = НомерАналитики + 1;		
			АналитикаЛС.Вставить(ТекущаяАналитика, ЛицевойСчетЕПС["ЗначениеАналитики" + НомерАналитики]);
		КонецЦикла;  
	КонецЕсли;
	
	//ПарныйСчетЕПС = РегистрыСведений.ПарныеСчетаЕПС.ПарныйСчет(ПланыСчетов.ЕПС.СчетВторогоПорядка(Контекст.СчетЕПС));
	//ПарныйЛицевойСчетЕПС = РегистрыСведений.ПарныеЛицевыеСчетаЕПС.ПарныйСчет(ЛицевойСчетЕПС);
	//
	//Если ЗначениеЗаполнено(ПарныйСчетЕПС) И Не ЗначениеЗаполнено(ПарныйЛицевойСчетЕПС) Тогда 
	//	Контекст.Вставить("СчетЕПС", ПарныйСчетЕПС);
	//	ПарныйЛицевойСчетЕПС = СчетПоАналитике(Контекст, АналитикаЛС, Истина, Ложь, КэшПоискаЛицевыхСчетов);
	//	РегистрыСведений.ПарныеЛицевыеСчетаЕПС.СоздатьПару(ЛицевойСчетЕПС, ПарныйЛицевойСчетЕПС);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет обновление данных парного лицевого счета по переданным параметрам.
//Обновляются как значения реквизитов лицевого счета, так и данные значений аналитики.
//
// Параметры:
//  СтруктураДляЗаписиАналитики - <Структура>. Структура, содержащая в себе данные обовления парного счета.
// 
Процедура ОбновитьПарныйЛицевойСчет(СтруктураДляЗаписиАналитики) Экспорт 
	
	Если СтруктураДляЗаписиАналитики.СчетЕПС.Парный Тогда 
		ОбновитьРеквизитыПарногоЛицевогоСчета(СтруктураДляЗаписиАналитики);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру Аналитики. 
//
// Параметры:
//  Объект - СправочникСсылка.ЛицевыеСчетаЕПС
//
// Возвращаемое значение:
//	<Структура> - Возвращается структура для формирования номера.
//
Функция СимволИзАналитикиЛицевогоСчета(Объект) Экспорт 
	
	ВозвращаемоеЗначение = Неопределено;
	
	НастройкиАналитики = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.АналитикаСчета(Объект.Владелец, Объект.Портфель);	
	НомерАналитики = 0;
	Для Каждого ТекущаяАналитика Из НастройкиАналитики Цикл
		НомерАналитики = НомерАналитики + 1;	
		ЗначениеТекущейАналитики = Объект["ЗначениеАналитики" + НомерАналитики];
		Если ЗначениеЗаполнено(ЗначениеТекущейАналитики) Тогда 
			Если ТипЗнч(ЗначениеТекущейАналитики) = Тип("СправочникСсылка.уа_СимволыОФР") Тогда 
				ВозвращаемоеЗначение = ЗначениеТекущейАналитики;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает структуру для формирования номера по маске. 
//
// Параметры:
//  Объект - СправочникСсылка.ЛицевыеСчетаЕПС
//  МаскаЛицевогоСчета - СправочникСсылка.МаскаЛицевогоСчета
//
// Возвращаемое значение:
//	<Структура> - Возвращается структура для формирования номера по маске.
//
Функция КонтекстДляФормированияНомераПоМаске(Объект, МаскаЛицевогоСчета) Экспорт 
	
	РеквизитыМаски = ОбщегоНазначенияДУПовтИсп.ЗначенияРеквизитовОбъекта(МаскаЛицевогоСчета, "Шаблон, ВидЛицевогоСчета");
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВидЛицевогоСчета",	РеквизитыМаски.ВидЛицевогоСчета);
	Контекст.Вставить("Валюта", Объект.Валюта);
	Контекст.Вставить("Портфель", Объект.Портфель);
	Контекст.Вставить("Ссылка", Объект.Ссылка);
	Контекст.Вставить("Счет", Объект.Владелец);
	Контекст.Вставить("ПорядковыйНомер", Объект.ПорядковыйНомер);
	
	Контекст.Вставить("Шаблон", РеквизитыМаски.Шаблон);
	
	Аналитика = Новый Структура;
	
	НастройкиАналитики = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.АналитикаСчета(Объект.Владелец, Объект.Портфель);	
	НомерАналитики = 0;
	Для Каждого ТекущаяАналитика Из НастройкиАналитики Цикл
		НомерАналитики = НомерАналитики + 1;		
		Если МаскаЛицевогоСчета.ВидыАналитик.Найти(ТекущаяАналитика) <> Неопределено Тогда 
			Если ТекущаяАналитика.ИмяПредопределенныхДанных <> "" Тогда 
				Аналитика.Вставить(ТекущаяАналитика.ИмяПредопределенныхДанных, Объект["ЗначениеАналитики" + НомерАналитики]);	
			Иначе
				Аналитика.Вставить(ТекущаяАналитика.Наименование, Объект["ЗначениеАналитики" + НомерАналитики]);	
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Контекст.Вставить("Аналитика", Аналитика);
	
	Возврат Контекст;
	
КонецФункции

// Процедура обновляет наименование лицевого счета. 
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.ЛицевыеСчетаЕПС
//
Процедура ОбновитьКодНаименование(ЛицевойСчет) Экспорт
	
	ЗначениеРеквизитовЛицевойСчет = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЛицевойСчет, "Владелец, Портфель, Валюта, Наименование, Код, ОшибкаКодирования, ОписаниеОшибкиКодирования, ПорядковыйНомер");
	СчетЕПС = ЗначениеРеквизитовЛицевойСчет.Владелец;
	Портфель = ЗначениеРеквизитовЛицевойСчет.Портфель;
	Валюта = ЗначениеРеквизитовЛицевойСчет.Валюта; 
	
	Символ = СимволИзАналитикиЛицевогоСчета(ЛицевойСчет);
	
	ДанныеНомера = НомерЛицевогоСчетаПоПараметрам(СчетЕПС, Портфель, Валюта, Символ, ЗначениеРеквизитовЛицевойСчет.ПорядковыйНомер);
	АктуальныйКодЛицевогоСчета = ДанныеНомера.НомерЛицевогоСчета;

	МаскаЛицевогоСчета = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.МаскаЛицевогоСчетаЕПС(СчетЕПС, Портфель);
	
	Если ЗначениеЗаполнено(МаскаЛицевогоСчета) Тогда 
		КонтекстДляФормированияНомераПоМаске = Справочники.уа_ЛицевыеСчетаЕПС.КонтекстДляФормированияНомераПоМаске(ЛицевойСчет, МаскаЛицевогоСчета);
		СтруктураНомера = Справочники.МаскаЛицевогоСчета.НомерЛицевогоСчета(КонтекстДляФормированияНомераПоМаске);
		
		Наименование = СтруктураНомера.Номер;
		ОшибкаКодирования = СтруктураНомера.ОшибкаКодирования;
		ОписаниеОшибкиКодирования = СтруктураНомера.ОписаниеОшибкиКодирования;	
	Иначе
		
		Наименование = АктуальныйКодЛицевогоСчета;
		ОшибкаКодирования = ЗначениеРеквизитовЛицевойСчет.ОшибкаКодирования;
		ОписаниеОшибкиКодирования = ЗначениеРеквизитовЛицевойСчет.ОписаниеОшибкиКодирования;	

	КонецЕсли;
	
	Если Наименование <> ЗначениеРеквизитовЛицевойСчет.Наименование  
		Или АктуальныйКодЛицевогоСчета <> ЗначениеРеквизитовЛицевойСчет.Код 
		Или ОшибкаКодирования <> ЗначениеРеквизитовЛицевойСчет.ОшибкаКодирования 
		Или ОписаниеОшибкиКодирования <> ЗначениеРеквизитовЛицевойСчет.ОписаниеОшибкиКодирования 
		Тогда 
		
		ЛицевойСчетОбъект = ЛицевойСчет.ПолучитьОбъект();
		ЛицевойСчетОбъект.Код = АктуальныйКодЛицевогоСчета;
		ЛицевойСчетОбъект.Наименование = Наименование;
		ЛицевойСчетОбъект.ОшибкаКодирования = ОшибкаКодирования;
		ЛицевойСчетОбъект.ОписаниеОшибкиКодирования = ОписаниеОшибкиКодирования;
		
		ЛицевойСчетОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
		ЛицевойСчетОбъект.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПометитьНаУдалениеНеиспользуемыеЛС() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
		|ГДЕ
		|	ЛицевыеСчетаЕПС.ПометкаУдаления = ЛОЖЬ";
		
	ТабЛС = Запрос.Выполнить().Выгрузить();	
	
	ТабСсылок = НайтиПоСсылкам(ТабЛС.ВыгрузитьКолонку("Ссылка"));
	ТабСсылок.Индексы.Добавить("Ссылка, Метаданные");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПарныеЛицевыеСчетаЕПС.СчетАктивный КАК СчетАктивный,
		|	ПарныеЛицевыеСчетаЕПС.СчетПассивный КАК СчетПассивный
		|ПОМЕСТИТЬ ВТ_ПарныеЛС
		|ИЗ
		|	РегистрСведений.ПарныеЛицевыеСчетаЕПС КАК ПарныеЛицевыеСчетаЕПС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка КАК ЛС,
		|	NULL КАК ПарныйЛС
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
		|ГДЕ
		|	ЛицевыеСчетаЕПС.ПометкаУдаления = ЛОЖЬ
		|	И ЛицевыеСчетаЕПС.Владелец.Парный = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ПарныеЛС.СчетАктивный,
		|	ВТ_ПарныеЛС.СчетПассивный
		|ИЗ
		|	ВТ_ПарныеЛС КАК ВТ_ПарныеЛС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СсылкиНаЛС = ТабСсылок.НайтиСтроки(Новый Структура("Ссылка", Выборка.ЛС));
		
		КолвоСсылокНаЛС = 0;
		
		Для Каждого Строка Из СсылкиНаЛС Цикл
			Если Строка.Метаданные = Метаданные.РегистрыСведений.ДанныеЛицевыхСчетовЕПС ИЛИ Строка.Метаданные = Метаданные.РегистрыСведений.ПарныеЛицевыеСчетаЕПС Тогда
				Продолжить;
			КонецЕсли;
			КолвоСсылокНаЛС = КолвоСсылокНаЛС + 1;
			Прервать;
		КонецЦикла;
		
		КолвоСсылокНаПарныйЛС = 0;
		
		Если ЗначениеЗаполнено(Выборка.ПарныйЛС) Тогда
			
			СсылкиНаПарныйЛС = ТабСсылок.НайтиСтроки(Новый Структура("Ссылка", Выборка.ПарныйЛС));
			
			Для Каждого Строка Из СсылкиНаПарныйЛС Цикл
				Если Строка.Метаданные = Метаданные.РегистрыСведений.ДанныеЛицевыхСчетовЕПС ИЛИ Строка.Метаданные = Метаданные.РегистрыСведений.ПарныеЛицевыеСчетаЕПС Тогда
					Продолжить;
				КонецЕсли;
				КолвоСсылокНаПарныйЛС = КолвоСсылокНаПарныйЛС + 1;
				Прервать;
			КонецЦикла;	
		КонецЕсли;
		
		Если КолвоСсылокНаЛС = 0 И КолвоСсылокНаПарныйЛС = 0 Тогда 
			ЛСОбъект = Выборка.ЛС.ПолучитьОбъект();
			ЛСОбъект.УстановитьПометкуУдаления(Истина);
			
			Если ЗначениеЗаполнено(Выборка.ПарныйЛС) Тогда
				ПарныйЛСОбъект = Выборка.ПарныйЛС.ПолучитьОбъект();
				ПарныйЛСОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьСоответствиеАналитикиНастройкеПриСнятииПометкиУдаления(ЛицевойСчет) Экспорт
	
	НастройкиАналитики = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.АналитикаСчета(ЛицевойСчет.Владелец, ЛицевойСчет.Портфель);
	
	Для счетчик = 1 По 5 Цикл
		ЗначениеАналитики = ЛицевойСчет["ЗначениеАналитики" + Строка(счетчик)];
		Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
			Если счетчик > НастройкиАналитики.Количество() Тогда
				Возврат Истина;
			КонецЕсли; 
			Если Не НастройкиАналитики[счетчик - 1].ТипЗначения.СодержитТип(ТипЗнч(ЗначениеАналитики)) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;
		
КонецФункции

#КонецОбласти

#Область ОБРАБОТЧИКИ_ОБНОВЛЕНИЯ

// Процедура заполняет наименование
//
Процедура ЗаполнитьНаименование() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка КАК ЛицевыеСчетаЕПС,
		|	ЛицевыеСчетаЕПС.Код
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
		|ГДЕ
		|	ЛицевыеСчетаЕПС.Наименование = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ЛицевойСчетЕПС_Объект = Выборка.ЛицевыеСчетаЕПС.ПолучитьОбъект();	
		ЛицевойСчетЕПС_Объект.Наименование = ЛицевойСчетЕПС_Объект.Код;
		ЛицевойСчетЕПС_Объект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
		ЛицевойСчетЕПС_Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет владельца на счетЕПС второго порядка
//
Процедура ПеренестиЛицевыеСчетаНаСчетаВторогоПорядка() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка КАК ЛицевойСчетЕПС,
		|	ЛицевыеСчетаЕПС.Владелец.Код КАК КодСчетаЕПС
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СтрДлина(СокрЛП(Выборка.КодСчетаЕПС)) > 5 Тогда
			ЛицевойСчетЕПС_Объект = Выборка.ЛицевойСчетЕПС.ПолучитьОбъект();	
			ЛицевойСчетЕПС_Объект.Владелец = ПланыСчетов.ЕПС.СчетВторогоПорядка(ЛицевойСчетЕПС_Объект.Владелец);
			ЛицевойСчетЕПС_Объект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
			ЛицевойСчетЕПС_Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ОчиститьПустыеЗначенияАналитикиЛицевыхСчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка,
		|	ЛицевыеСчетаЕПС.ЗначениеАналитики1,
		|	ЛицевыеСчетаЕПС.ЗначениеАналитики2,
		|	ЛицевыеСчетаЕПС.ЗначениеАналитики3,
		|	ЛицевыеСчетаЕПС.ЗначениеАналитики4,
		|	ЛицевыеСчетаЕПС.ЗначениеАналитики5
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НужноОбновить = Ложь;
		Для НомерАналитики = 1 По 5 Цикл
			Если Не ЗначениеЗаполнено(Выборка["ЗначениеАналитики" + НомерАналитики]) И Выборка["ЗначениеАналитики" + НомерАналитики] <> Неопределено Тогда
				НужноОбновить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноОбновить Тогда
			ЛицевойСчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ЛицевойСчетОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
				ЛицевойСчетОбъект.Записать();
			Исключение
			КонецПопытки
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПарныеЛицевыеСчета() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицевыеСчетаЕПС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уа_ЛицевыеСчетаЕПС КАК ЛицевыеСчетаЕПС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПарныеЛицевыеСчетаЕПС КАК ПарныеЛицевыеСчетаЕПСАктивный
		|		ПО ЛицевыеСчетаЕПС.Ссылка = ПарныеЛицевыеСчетаЕПСАктивный.СчетАктивный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПарныеЛицевыеСчетаЕПС КАК ПарныеЛицевыеСчетаЕПСПассивный
		|		ПО ЛицевыеСчетаЕПС.Ссылка = ПарныеЛицевыеСчетаЕПСПассивный.СчетПассивный
		|ГДЕ
		|	ЛицевыеСчетаЕПС.Владелец.Парный
		|	И ПарныеЛицевыеСчетаЕПСАктивный.СчетАктивный ЕСТЬ NULL
		|	И ПарныеЛицевыеСчетаЕПСПассивный.СчетПассивный ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьПарныйЛицевойСчет(Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_ФУНКЦИИ

Функция СоздатьЛицевойСчетПоАналитике(Контекст, АналитикаЛС, КоллекцияАналитики, СоздаватьПарныйСчет, КэшПоискаЛицевыхСчетов)

  	ЛицевойСчетЕПС = НовыйЛицевойСчет(Контекст, КоллекцияАналитики);

	Если СоздаватьПарныйСчет Тогда 
		СоздатьПарныйЛицевойСчет(ЛицевойСчетЕПС, Контекст, АналитикаЛС, КэшПоискаЛицевыхСчетов);
	КонецЕсли;
	
	Возврат ЛицевойСчетЕПС;
	
КонецФункции

Функция НовыйЛицевойСчет(Контекст, КоллекцияАналитики)
	
	СчетЕПС = Контекст.СчетЕПС;
	Портфель = Контекст.Портфель;
	Валюта = Контекст.Валюта;
	
	Символ = УчетЕПС.ЗначениеОпределенногоТипаИзСтруктуры(КоллекцияАналитики, Тип("СправочникСсылка.уа_СимволыОФР"));
				
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "Справочник.уа_ЛицевыеСчетаЕПС";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ДанныеНомера = НомерЛицевогоСчетаПоПараметрам(СчетЕПС, Портфель, Валюта, Символ);
		
	ЛицевойСчетЕПСОбъект 					= Справочники.уа_ЛицевыеСчетаЕПС.СоздатьЭлемент();
	ЛицевойСчетЕПСОбъект.Код 				= ДанныеНомера.НомерЛицевогоСчета;
	ЛицевойСчетЕПСОбъект.Портфель 			= Портфель;
	ЛицевойСчетЕПСОбъект.Валюта 			= Валюта;
	ЛицевойСчетЕПСОбъект.Владелец 			= СчетЕПС;
	ЛицевойСчетЕПСОбъект.ПорядковыйНомер	= ДанныеНомера.ПорядковыйНомер;
	ЛицевойСчетЕПСОбъект.ДатаСоздания 		= Контекст.Дата;
	
	Для Сч = 1 по 5 Цикл
		ЗначениеАналитики = КоллекцияАналитики["Аналитика"+Сч];
		ЛицевойСчетЕПСОбъект["ЗначениеАналитики"+Сч] = ЗначениеАналитики;
	КонецЦикла;
	
	ЛицевойСчетЕПСОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
	ЛицевойСчетЕПСОбъект.Записать();
	ЛицевойСчетЕПС = ЛицевойСчетЕПСОбъект.Ссылка;
	
	ЗафиксироватьТранзакцию();

	Возврат ЛицевойСчетЕПС;
	
КонецФункции 

Процедура ДополнитьНомерЛицевогоСчетаНомеромСчетаВторогоПорядка(НомерЛицевогоСчета, СчетЕПС)
	
	КодСчетаЕПС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетЕПС, "Код");
	КодСчетаЕПС = УА_ОбщегоНазначенияКлиентСервер.ОставитьТолькоЦифры(КодСчетаЕПС);
	НомерЛицевогоСчета = НомерЛицевогоСчета + КодСчетаЕПС;
	
КонецПроцедуры

Процедура ДополнитьНомерЛицевогоСчетаКодомВалюты(НомерЛицевогоСчета, Валюта)
	
	КодВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
	
	Если КодВалюты = "643" Тогда 
		КодВалюты = "810";
	КонецЕсли;	
	
	НомерЛицевогоСчета = НомерЛицевогоСчета + КодВалюты;
	
КонецПроцедуры

Процедура ДополнитьНомерЛицевогоСчетаПризнакомДоверительногоУправления(НомерЛицевогоСчета, Портфель)
	
	//НомерЛицевогоСчета = НомерЛицевогоСчета + Справочники.ДУ_Портфели.ПризнакДоверительногоУправления(Портфель);
	
КонецПроцедуры

Процедура ДополнитьНомерЛицевогоСчетаПризнакомВидаДеятельностиНПФ(НомерЛицевогоСчета, Портфель)
	
	НомерЛицевогоСчета = НомерЛицевогоСчета + Справочники.Портфели.ПризнакВидаДеятельностиНПФ(Портфель);
	
КонецПроцедуры

Процедура ДополнитьНомерЛицевогоСчетаСимволомОтчетаОФинансовыхРезультатах(НомерЛицевогоСчета, СимволСсылка, СчетЕПС)
	
	Если УчетЕПСПовтИсп.НаСчетеЕстьСимволОФР(СчетЕПС) Тогда 
		Если СимволСсылка = Неопределено Тогда 
			Символ = "00000";
		Иначе 
			Символ = Справочники.СимволыОФР.СимволОтчетаОФинансовыхРезультатах(СимволСсылка, СчетЕПС);  
		КонецЕсли;
	КонецЕсли;
	
	НомерЛицевогоСчета = НомерЛицевогоСчета + Символ;
	
КонецПроцедуры

Процедура ДополнитьНомерЛицевогоСчетаПорядковымНомером(НомерЛицевогоСчета, СчетЕПС, Портфель, ПорядковыйНомер)
	
	Если Не ЗначениеЗаполнено(ПорядковыйНомер) Тогда 
		ПорядковыйНомер = Справочники.уа_ЛицевыеСчетаЕПС.ПолучитьМаксимальныйНомерЛицевогоСчета(СчетЕПС, Портфель) + 1;
	КонецЕсли;
	
	ДлинаПорядковогоНомера = УчетЕПСПовтИсп.ДлинаЛицевогоСчета() - СтрДлина(НомерЛицевогоСчета);
	ПорядковыйНомерНужнойДлины = ОбщегоНазначенияДУКлиентСервер.ДобавитьЛидирующиеНули(ПорядковыйНомер, ДлинаПорядковогоНомера);

	НомерЛицевогоСчета = НомерЛицевогоСчета + ПорядковыйНомерНужнойДлины;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПарногоЛицевогоСчета(СтруктураДляЗаписиАналитики)
	
	ПарныйСчет = РегистрыСведений.ПарныеСчетаЕПС.ПарныйСчет(СтруктураДляЗаписиАналитики.СчетЕПС);
	ПарныйЛицевойСчет = РегистрыСведений.ПарныеЛицевыеСчетаЕПС.ПарныйСчет(СтруктураДляЗаписиАналитики.ЛицевойСчетЕПС);
	
	ЗначениеРеквизитовПарногоЛицевогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПарныйЛицевойСчет, "Владелец, Портфель, Валюта, ЗначениеАналитики1, ЗначениеАналитики2, ЗначениеАналитики3, ЗначениеАналитики4, ЗначениеАналитики5");
	Если ЗначениеРеквизитовПарногоЛицевогоСчета.Владелец <> ПарныйСчет 
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.Портфель <> СтруктураДляЗаписиАналитики.Портфель
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.Валюта <> СтруктураДляЗаписиАналитики.Валюта 
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.ЗначениеАналитики1 <> СтруктураДляЗаписиАналитики.ЗначениеАналитики1
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.ЗначениеАналитики2 <> СтруктураДляЗаписиАналитики.ЗначениеАналитики2
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.ЗначениеАналитики3 <> СтруктураДляЗаписиАналитики.ЗначениеАналитики3
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.ЗначениеАналитики4 <> СтруктураДляЗаписиАналитики.ЗначениеАналитики4
		Или ЗначениеРеквизитовПарногоЛицевогоСчета.ЗначениеАналитики5 <> СтруктураДляЗаписиАналитики.ЗначениеАналитики5
		Тогда 
		
		ПарныйЛицевойСчетОбъект = ПарныйЛицевойСчет.ПолучитьОбъект();
		ПарныйЛицевойСчетОбъект.Владелец 	= ПарныйСчет;
		ПарныйЛицевойСчетОбъект.Портфель 	= СтруктураДляЗаписиАналитики.Портфель;
		ПарныйЛицевойСчетОбъект.Валюта 		= СтруктураДляЗаписиАналитики.Валюта;
		
		Для НомерАналитики = 1 По 5 Цикл
			ПарныйЛицевойСчетОбъект["ЗначениеАналитики" + НомерАналитики] = СтруктураДляЗаписиАналитики["ЗначениеАналитики" + НомерАналитики];
		КонецЦикла;
		
		ПарныйЛицевойСчетОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьПриЗаписиПарныйЛицевойСчет");
		ПарныйЛицевойСчетОбъект.Записать();
		        
		ПарныйЛицевойСчет = ПарныйЛицевойСчетОбъект.Ссылка;
	КонецЕсли;
		
	СтруктураДляЗаписиАналитики.Вставить("СчетЕПС", ПарныйСчет);
	СтруктураДляЗаписиАналитики.Вставить("ЛицевойСчетЕПС", ПарныйЛицевойСчет);

КонецПроцедуры

Функция МассивНеобновляемыхТиповАналитики()
	
	МассивНеобновляемыхТиповАналитики = Новый Массив;
	
	Возврат МассивНеобновляемыхТиповАналитики;	
	
КонецФункции

Процедура ДополнитьКэшПоискаЛицевыхСчетов(КэшПоискаЛицевыхСчетов, ЛицевойСчет, СчетЕПС, Портфель, Валюта, КоллекцияАналитики, Дата)
	
	КлючКэша = РегистрыСведений.ДанныеЛицевыхСчетовЕПС.КлючКэшаЛС(СчетЕПС, Портфель, Валюта, КоллекцияАналитики, Дата);
	Если КэшПоискаЛицевыхСчетов[КлючКэша] = Неопределено Тогда
		КэшПоискаЛицевыхСчетов.Вставить(КлючКэша, ЛицевойСчет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОБРАБОТЧИКИ_СОБЫТИЙ

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
		
	Если Данные.Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Маска = УчетЕПСПовтИсп.МаскаПредставленияЛицевогоСчета(Данные.Владелец, Данные.Портфель);
	МассивЧастей = СтрРазделить(Маска, ".");
	НачальныйСимвол = 1;
	КоличествоЧастей = МассивЧастей.Количество();
	НомерЧасти = 0;
	Для Каждого Часть Из МассивЧастей Цикл
		НомерЧасти = НомерЧасти + 1;
		ЧислоСимволов = СтрДлина(Часть);
		Представление = Представление + Сред(Данные.Наименование, НачальныйСимвол, ЧислоСимволов);
		НачальныйСимвол = НачальныйСимвол + ЧислоСимволов;
		Если НомерЧасти = КоличествоЧастей Тогда
			Представление = Представление + Сред(Данные.Наименование, НачальныйСимвол);;
		Иначе
			Представление = Представление + ".";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("Владелец");
	Поля.Добавить("Портфель");
КонецПроцедуры

#КонецОбласти