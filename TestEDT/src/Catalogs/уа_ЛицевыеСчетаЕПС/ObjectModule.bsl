#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОБРАБОТЧИКИ_СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Наименование");	
	
	НужныеДлины = Новый Массив;
	НужныеДлины.Добавить(20);
	НужныеДлины.Добавить(25);
	Если (ЗначениеЗаполнено(Наименование) И НужныеДлины.Найти(СтрДлина(Наименование)) = Неопределено) 
		 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Наименование) Тогда 
		ТекстСообщения = НСтр("ru = 'Код должен состоять из 20 или 25 цифр'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Наименование",, Отказ);
	КонецЕсли;
		
	ОбщегоНазначенияДУ.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Код = "";
	Наименование = "";
	ПорядковыйНомер = 0;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления = Ложь И Ссылка.ПометкаУдаления = Истина Тогда
		Отказ = Справочники.уа_ЛицевыеСчетаЕПС.ПроверитьСоответствиеАналитикиНастройкеПриСнятииПометкиУдаления(Ссылка);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настройка аналитики л/счета не соответствует настройке, снятие пометки невозможно!",,,,Отказ);
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	Если ЭтоНовый() Тогда 
		Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда 
			ДатаСоздания = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		ЗаполнитьНаименование();
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Наименование = Код;
	КонецЕсли;
	
	Для НомерАналитики = 1 По 5 Цикл
		Если Не ЗначениеЗаполнено(ЭтотОбъект["ЗначениеАналитики" + НомерАналитики]) Тогда
			ЭтотОбъект["ЗначениеАналитики" + НомерАналитики] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ЗаполнитьДанныеЛицевыхСчетовЕПС();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("НеСоздаватьПриЗаписиПарныйЛицевойСчет") = Ложь Тогда
		Справочники.уа_ЛицевыеСчетаЕПС.СоздатьПарныйЛицевойСчет(Ссылка);
	КонецЕсли;
	СинхронизироватьРеквизитыПарныхСчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_ФУНКЦИИ

Процедура ЗаполнитьДанныеЛицевыхСчетовЕПС()
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СчетЕПС", Владелец);
	СтруктураДанных.Вставить("Портфель", Портфель);
	СтруктураДанных.Вставить("Валюта", Валюта);
	СтруктураДанных.Вставить("ЛицевойСчетЕПС", Ссылка);
	СтруктураДанных.Вставить("ЛицевойСчетДляПоиска", Ссылка);
	СтруктураДанных.Вставить("ЗначениеАналитики1", ЗначениеАналитики1);
	СтруктураДанных.Вставить("ЗначениеАналитики2", ЗначениеАналитики2);
	СтруктураДанных.Вставить("ЗначениеАналитики3", ЗначениеАналитики3);
	СтруктураДанных.Вставить("ЗначениеАналитики4", ЗначениеАналитики4);
	СтруктураДанных.Вставить("ЗначениеАналитики5", ЗначениеАналитики5);
	
	РегистрыСведений.ДанныеЛицевыхСчетовЕПС.СоздатьЗапись(СтруктураДанных);

КонецПроцедуры

Процедура ЗаполнитьНаименование()
	
	МаскаЛицевогоСчета = РегистрыСведений.НастройкаАналитикиЛицевыхСчетовЕПС.МаскаЛицевогоСчетаЕПС(Владелец, Портфель);
	Если ЗначениеЗаполнено(МаскаЛицевогоСчета) Тогда 
		КонтекстДляФормированияНомераПоМаске = Справочники.уа_ЛицевыеСчетаЕПС.КонтекстДляФормированияНомераПоМаске(ЭтотОбъект, МаскаЛицевогоСчета);
		СтруктураНомера = Справочники.МаскаЛицевогоСчета.НомерЛицевогоСчета(КонтекстДляФормированияНомераПоМаске);
		
		Наименование = СтруктураНомера.Номер;
		ОшибкаКодирования = СтруктураНомера.ОшибкаКодирования;
		ОписаниеОшибкиКодирования = СтруктураНомера.ОписаниеОшибкиКодирования;		
	КонецЕсли;
		
КонецПроцедуры

Процедура СинхронизироватьРеквизитыПарныхСчетов()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПарныеЛицевыеСчетаЕПС.СчетПассивный КАК Счет
	//	|ИЗ
	//	|	РегистрСведений.ПарныеЛицевыеСчетаЕПС КАК ПарныеЛицевыеСчетаЕПС
	//	|ГДЕ
	//	|	ПарныеЛицевыеСчетаЕПС.СчетАктивный = &Счет
	//	|	И (ПарныеЛицевыеСчетаЕПС.СчетПассивный.ДатаЗакрытия <> &ДатаЗакрытия
	//	|			ИЛИ ПарныеЛицевыеСчетаЕПС.СчетПассивный.ДатаСоздания <> &ДатаСоздания ИЛИ ПарныеЛицевыеСчетаЕПС.СчетПассивный.ПометкаУдаления <> &ПометкаУдаления)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ПарныеЛицевыеСчетаЕПС.СчетАктивный
	//	|ИЗ
	//	|	РегистрСведений.ПарныеЛицевыеСчетаЕПС КАК ПарныеЛицевыеСчетаЕПС
	//	|ГДЕ
	//	|	ПарныеЛицевыеСчетаЕПС.СчетПассивный = &Счет
	//	|	И (ПарныеЛицевыеСчетаЕПС.СчетАктивный.ДатаЗакрытия <> &ДатаЗакрытия
	//	|			ИЛИ ПарныеЛицевыеСчетаЕПС.СчетАктивный.ДатаСоздания <> &ДатаСоздания ИЛИ ПарныеЛицевыеСчетаЕПС.СчетАктивный.ПометкаУдаления <> &ПометкаУдаления)";
	//
	//Запрос.УстановитьПараметр("Счет", Ссылка);
	//Запрос.УстановитьПараметр("ДатаЗакрытия", ДатаЗакрытия);
	//Запрос.УстановитьПараметр("ДатаСоздания", ДатаСоздания);
	//Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	//
	//ОбщегоНазначенияДУ.ДобавитьВЛогОтладки(Запрос, "ЛицевыеСчета: СинхронизироватьДатуЗакрытияВПарныхСчетах()");
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	ЛицевойСчетОбъект = Выборка.Счет.ПолучитьОбъект();
	//	ЛицевойСчетОбъект.ДатаЗакрытия = ДатаЗакрытия;
	//	ЛицевойСчетОбъект.ДатаСоздания = ДатаСоздания;
	//	ЛицевойСчетОбъект.ПометкаУдаления = ПометкаУдаления;
	//	Попытка
	//		ЛицевойСчетОбъект.Записать();
	//	Исключение
	//		ТекстОшибки = СтрШаблон("Не удалось обновить дату закрытия в парном лицевом счете %1", Выборка.Счет);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//	КонецПопытки;
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли