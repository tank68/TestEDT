#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ПРОГРАМНЫЙ_ИНТЕРФЕЙС 

Процедура КонвертироватьЗначенияАналитики(Контекст, НастройкиАналитики, КоллекцияАналитики, Аналитика, ЗначениеАналитики) Экспорт
	
	КонвертироватьЧастьОблигацииУплаченныйКупонныйДоход(Контекст, НастройкиАналитики, КоллекцияАналитики, Аналитика, ЗначениеАналитики);
	
	ПравилаКонвертацииАналитики = УчетЕПСПовтИсп.ПравилаКонвертацииАналитики(Аналитика, Контекст.Портфель, Контекст.Дата);
	
	Для Каждого Правило Из ПравилаКонвертацииАналитики Цикл 
		КонвертироватьАналитику(Правило, Контекст, НастройкиАналитики, КоллекцияАналитики, ЗначениеАналитики);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_ФУНКЦИИ

Процедура КонвертироватьЧастьОблигацииУплаченныйКупонныйДоход(Знач Контекст, Знач НастройкиАналитики, КоллекцияАналитики, Знач Аналитика, Знач ЗначениеАналитики)
		
	//Если ЗначениеАналитики = Перечисления.ЧастиЦенныхБумаг.УплаченныйКупонныйДоход Тогда 
	//	НомерАналитики = 0;
	//	Для Каждого Настройка Из НастройкиАналитики Цикл
	//		НомерАналитики = НомерАналитики + 1;
	//		Если Настройка = ПланыВидовХарактеристик.ВидыСубконтоЕПС.ЧастиЦенныхБумаг Тогда 
	//			УчетКупленногоКупонногоДохода = УправлениеПараметрамиПортфеля.ПолучитьПараметрПортфеля(Контекст.Портфель, ПланыВидовХарактеристик.ПараметрыПортфеля.УчетКупленногоКупонногоДохода, Контекст.Дата);
	//			ЧастьОблигацииУчетаУКД = УчетЕПСПовтИсп.ЧастьОблигацииПоВидуУчетаКупленногоКупонногоДохода(УчетКупленногоКупонногоДохода);
	//			КоллекцияАналитики.Вставить("Аналитика" + НомерАналитики, ЧастьОблигацииУчетаУКД);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

Процедура КонвертироватьАналитику(Правило, Контекст, НастройкиАналитики, КоллекцияАналитики, ЗначениеАналитики)
		
	НомерСоответствующейНастройки = НастройкиАналитики.Найти(Правило.Приемник);
	
	Если ПриемникЕстьВНастройке(НомерСоответствующейНастройки) Тогда 
		
		Попытка
			Если Правило.ПроизвольныйАлгоритм Тогда 
				Контекст.Вставить("Источник", ЗначениеАналитики);
				Результат = РезультатПроизвольногоАлгоритма(Контекст, Правило.ТекстАлгоритма);	
			Иначе
				Результат = ЗначениеРеквизитаИсточника(ЗначениеАналитики, Правило.РеквизитИсточника);	
			КонецЕсли;
			
			НомерАналитики = НомерСоответствующейНастройки + 1;
			Если РезультатНужногоТипа(Результат, Правило.Приемник) Тогда 
				КоллекцияАналитики["Аналитика"+НомерАналитики] = Результат;
			КонецЕсли;                                            
		Исключение      
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при конвертации аналитики по правилу: <%3>,
				|Контекст.Документ - <%1>, 
				|Контекст.Источник - <%2>, 
				|по причине: %4'"), Контекст.Документ, ЗначениеАналитики, Правило.Ссылка, ОписаниеОшибки());
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеРеквизитаИсточника(ОбъектИсточник, ИмяРеквизита)
	
	Если Не ЗначениеЗаполнено(ОбъектИсточник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеОбъекта = ОбъектИсточник.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) 
		Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИсточник, ИмяРеквизита);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РезультатПроизвольногоАлгоритма(Знач Контекст, ТекстАлгоритма)

	Результат = Неопределено;
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить(ТекстАлгоритма);
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // РезультатПроизвольногоАлгоритма()

Функция РезультатНужногоТипа(Результат, Приемник)

	Если Результат = Неопределено Тогда 		
		Возврат Ложь;
	Иначе
		Возврат Приемник.ТипЗначения.СодержитТип(ТипЗнч(Результат));
	КонецЕсли;
	
КонецФункции // РезультатНужногоТипа()

Функция ПриемникЕстьВНастройке(НомерСоответствующейНастройки)

	Возврат НомерСоответствующейНастройки <> Неопределено;

КонецФункции // ПриемникЕстьВНастройке()

#КонецОбласти

#КонецЕсли
