

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		//Отказ = Истина;
		Возврат;
	Иначе	
		ДокументСсылка = Параметры.ДокументСсылка;	
	КонецЕсли; 
		
	ТекстЗаголовка = НСтр("ru = 'Движения документа: '") + Строка(ДокументСсылка);
	
	Заголовок = ТекстЗаголовка;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);
	
	СтруктураШапки.Проведен = БухгалтерскийУчет.ДокументПроведен(ДокументСсылка);
	
	Если НЕ СтруктураШапки.Проведен 
		И (НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("БизнесПроцесс") И ЗначениеЗаполнено(СтруктураШапки.БизнесПроцесс) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапки.БизнесПроцесс,"Завершен") = Истина Тогда
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	     	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	
	СоздатьРеквизитыФормы();
	
	ПрочитатьЗаписиРегистров();
	
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
			
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		//ТекстПредупреждения = НСтр("ru=''");
		Отказ = Истина;
	ИначеЕсли НЕ СтруктураШапки.Проведен Тогда
		
		//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
		//	ТекстПредупреждения = НСтр("ru='Регламентная операция не выполнена.
		//		|Для получения информации о результатах проведения регламентную операцию необходимо выполнить.'");
		//Иначе
		ТекстПредупреждения = НСтр("ru='Документ не проведен. 
		|Для получения информации о результатах проведения документ необходимо провести.'");
		//КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьДвижения(Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СформированыОтложенныеДвиженияДокументов" Тогда
		ПрочитатьЗаписиРегистров();
		ЗаполнитьДобавленныеКолонкиТаблиц();
		Объект.РучнаяКорректировка = ОбщегоНазначенияДУВызовСервера.ЗначениеРеквизитаОбъекта(ДокументСсылка, "РучнаяКорректировка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ШАПКИ_ФОРМЫ

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииРучнойКорректировки();
	
КонецПроцедуры


#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ТАБЛИЦ_ФОРМЫ

// Общая процедура для всех регистров. Устанавливает организацию в добавляемых строках.
//
&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование 
		И Элемент.ТекущиеДанные.Свойство("Портфель")
		И СтруктураШапки.Свойство("Портфель") Тогда
		
		Элемент.ТекущиеДанные.Портфель = СтруктураШапки.Портфель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяРеквизита = ИмяРеквизитаПоляНаСервере(Поле.Имя);
	Значение = Хозрасчетный[ВыбраннаяСтрока][ИмяРеквизита];
	ПоказатьЗначение(,Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)

	Проводка = Элементы.Хозрасчетный.ТекущиеДанные;
	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ВалютныйДт", "КоличественныйДт");
		
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт, Ложь);
	ЗаполнитьНадписиВПроводке(Проводка);
		
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	Проводка = Элементы.Хозрасчетный.ТекущиеДанные;
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ВалютныйКт", "КоличественныйКт");
		
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт, Ложь);
	ЗаполнитьНадписиВПроводке(Проводка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕПСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяРеквизита = ИмяРеквизитаПоляНаСервере(Поле.Имя);
	Значение = ЕПС[ВыбраннаяСтрока][ИмяРеквизита];
	ПоказатьЗначение(,Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕПССчетДтПриИзменении(Элемент)
	
	Проводка = Элементы.ЕПС.ТекущиеДанные;
	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ВалютныйДт", "КоличественныйДт");
	
	УчетЕПСКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт);
	ЗаполнитьНадписиВПроводкеЕПС(Проводка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕПССчетКтПриИзменении(Элемент)

	Проводка = Элементы.ЕПС.ТекущиеДанные;
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ВалютныйКт", "КоличественныйКт");
	
	УчетЕПСКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт);
	ЗаполнитьНадписиВПроводкеЕПС(Проводка);
		
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕПССубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_КОМАНД_ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	
	ИзмененаРучнаяКорректировка = СтруктураШапки.Свойство("РучнаяКорректировка")
	И (СтруктураШапки.РучнаяКорректировка <> Объект.РучнаяКорректировка);
	
	Если СтруктураШапки.Свойство("РучнаяКорректировка")
		И СтруктураШапки.РучнаяКорректировка 
		И НЕ Объект.РучнаяКорректировка Тогда
		
		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена. 
		|Восстановить движения, сформированные автоматически?'");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Отказ", Отказ);
		ДопПараметры.Вставить("ИзмененаРучнаяКорректировка", ИзмененаРучнаяКорректировка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Иначе
		ЗаписатьДвижения(Отказ);
		
		Если НЕ Отказ Тогда
			
			Если ИзмененаРучнаяКорректировка Тогда
				ОповеститьОбИзменении(ДокументСсылка);
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Ложь;
			
			Если (ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма"))
				И (Найти(ЭтаФорма.ВладелецФормы.ИмяФормы, "ФормаДокумента") > 0) Тогда
				ЭтаФорма.ВладелецФормы.Прочитать();
			КонецЕсли;
			
			Закрыть();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Ответ, ДопПараметры) Экспорт
	Отказ = ДопПараметры.Отказ;
	ИзмененаРучнаяКорректировка = ДопПараметры.ИзмененаРучнаяКорректировка;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.РучнаяКорректировка = Истина;
		УстановитьВозможностьРедактированияЗаписей();
		Возврат;
	КонецЕсли;
	
	ЗаписатьДвижения(Отказ);
	
	Если НЕ Отказ Тогда
		
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Ложь;
		
		Если (ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма"))
			И (Найти(ЭтаФорма.ВладелецФормы.ИмяФормы, "ФормаДокумента") > 0) Тогда
			ЭтаФорма.ВладелецФормы.Прочитать();
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений", СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.УА_КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(СписокРезультат, ДопПараметры) Экспорт

	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда
		
		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Объект.Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			
			ВыполнитьДействияПриИзмененииСоставаРегистров();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлемент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = ДопПараметры.Отказ;
	ИзмененаРучнаяКорректировка = ДопПараметры.ИзмененаРучнаяКорректировка;

	ЗаписатьДвижения(Отказ);
	
	Если НЕ Отказ Тогда
		
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Ложь;
		
		Если (ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма"))
			И (Найти(ЭтаФорма.ВладелецФормы.ИмяФормы, "ФормаДокумента") > 0) Тогда
			ЭтаФорма.ВладелецФормы.Прочитать();
		КонецЕсли;
		
		СтруктураШапки.РучнаяКорректировка = Объект.РучнаяКорректировка;
		
		Оповестить("СформированыОтложенныеДвиженияДокументов");

	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
Процедура ЗаписатьДвижения(Отказ)
	
	Если Объект.РучнаяКорректировка Тогда
		
		Попытка
			
			НачатьТранзакцию();
			
			Если НЕ СтруктураШапки.РучнаяКорректировка Тогда
				
				ДокОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокОбъект.РучнаяКорректировка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			СтрокиСДвижениями = Объект.Регистры.НайтиСтроки(Новый Структура("ЕстьДвижения", Истина));
			
			Для каждого СтрокаРегистра Из Объект.Регистры Цикл
				
				ЗаписыватьНабор = СтрокаРегистра.ЕстьДвижения ИЛИ (ЭтаФорма[СтрокаРегистра.Имя].Количество() > 0);
				
				Если ЗаписыватьНабор Тогда
					
					Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда  						
						
						НовыйНаборЗаписей =  РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
						ВременнаяТаблицаЗначений = Неопределено;
						
						НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя);
						
						СтрокаРеквизитов = "Период, Активность";
						
						ТаблицаЗаписей = НаборЗаписей.Выгрузить(, СтрокаРеквизитов);
						
						ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапки.Дата, "Период");
						ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "Активность");
						
						Для каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
							Массив = ТаблицаЗаписей.ВыгрузитьКолонку(Колонка.Имя);
							НаборЗаписей.ЗагрузитьКолонку(Массив, Колонка.Имя);
						КонецЦикла;
						
						Если ВременнаяТаблицаЗначений = Неопределено Тогда
							ВременнаяТаблицаЗначений = НаборЗаписей.Выгрузить();
						Иначе	
							Для каждого ТекСтрока Из НаборЗаписей.Выгрузить() Цикл
								НоваяСтрока = ВременнаяТаблицаЗначений.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
							КонецЦикла;
						КонецЕсли;
						
						
						НовыйНаборЗаписей.Загрузить(ВременнаяТаблицаЗначений);
						НовыйНаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
						НовыйНаборЗаписей.Записать(Истина);                              
						
						
					Иначе
						НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя);
						
						СтрокаРеквизитов = "Период, Активность";
						
						ТаблицаЗаписей = НаборЗаписей.Выгрузить(, СтрокаРеквизитов);
						// У непериодического регистра сведений нет колонки Период {
						//ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапки.Дата, "Период");
						Если ТаблицаЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
							ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапки.Дата, "Период");
						КонецЕсли;
						// }
						ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "Активность");
						
						Для каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
							Массив = ТаблицаЗаписей.ВыгрузитьКолонку(Колонка.Имя);
							НаборЗаписей.ЗагрузитьКолонку(Массив, Колонка.Имя);
						КонецЦикла;
						
						НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
						
						НаборЗаписей.Записать(Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru='Не удалось записать движения документа '") 
			+ Строка(ДокументСсылка) + ": "
			+ ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Если СтруктураШапки.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось перепровести документ '") 
			+ Строка(ДокументСсылка) + ": "
			+ ОписаниеОшибки()
			+ Символы.ПС + НСтр("ru='Проведение документа отменено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДвижения()

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()
	
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеДвижений(МетаданныеДокумента = Неопределено)
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "";	
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор.
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;			
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;
	
	ТаблицаДвижений = ОпределитьНаличиеДвижений(МетаданныеДокумента);
	Если ТаблицаДвижений.Количество()> 0 Тогда
		ТаблицаДвижений.Индексы.Добавить("Имя");
	КонецЕсли;
	
	Объект.Регистры.Очистить();
	
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Строка = Объект.Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя = МетаданныеРегистра.ПолноеИмя();
		
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = МетаданныеРегистра.Синоним;
		
		Строка.ЕстьДвижения = ТаблицаДвижений.Найти(ПолноеИмя, "Имя") <> Неопределено;
		Строка.Отображение = Строка.ЕстьДвижения;
						
	КонецЦикла;
	
	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений.
	Объект.Регистры.Сортировать("ТипРегистра, Синоним");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элементы.ГруппаЕПС.Видимость = Истина;
	
	Элементы.ДвиженияЕПС.Видимость        = Ложь;
		
	// Регистры где нужно показвать портфель
	ПоказыватьПортфель = Новый Массив;
	ПоказыватьПортфель.Добавить("ЗаключенныеМНО");
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		
		ЭтоДокументыСОтложеннымДвижением = СтрокаРегистра.Имя = "ДокументыСОтложеннымДвижением";
		
		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками.
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				
				ТекГруппа = Элементы.Вставить(
				ИмяГруппы, 
				Тип("ГруппаФормы"), 
				Элементы.ГруппаДвиженияРегистров);
				
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				
				ТекГруппа = Элементы.Вставить(
				ИмяГруппы, 
				Тип("ГруппаФормы"), 
				Элементы.ГруппаДвиженияРегистров);
				
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				
				ТекГруппа = Элементы.Вставить(
				ИмяГруппы, 
				Тип("ГруппаФормы"), 
				Элементы.ГруппаДвиженияРегистров);
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
			
		КонецЕсли;
		
		// Делаем страницу регистра невидимой, если она не нужна
		ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		
		Элементы.ДвиженияЕПС.Видимость = Истина;   						
				
		Если НЕ СтрокаРегистра.Отображение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоДокументыСОтложеннымДвижением Тогда
			Продолжить;
		КонецЕсли; 
		
		// На странице регистра создаем таблицу
		ИмяТаблицы = СтрокаРегистра.Имя;
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица = Неопределено Тогда
			//Элементы.Удалить(ТекТаблица);
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ТекТаблица.ПутьКДанным = СтрокаРегистра.Имя;
		КонецЕсли;
		// Назначаем общий обработчик
		ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "ТаблицаРегистраПриНачалеРедактирования");
		
		// Определяем набор колонок для таблицы, соответствующих метаданным регистра
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
		РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();
		
		Если СтрокаРегистра.Имя = "ЕПС" Или СтрокаРегистра.Имя = "Хозрасчетный" Тогда 
			Продолжить;
		КонецЕсли; 
		
		// Некоторые колонки не надо показывать
		РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
		РеквизитыНабораЗаписей.Колонки.Удалить("Активность");
		Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Период");
		КонецЕсли;
		Если ПоказыватьПортфель.Найти(СтрокаРегистра.Имя) = Неопределено И РеквизитыНабораЗаписей.Колонки.Найти("Портфель") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Портфель");
		КонецЕсли;

		// Создаем колонки таблицы
		Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
			
			ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				ТекКолонка.ПутьКДанным = СтрокаРегистра.Имя + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()
	
	Для каждого ЭлементФормы Из Элементы.ГруппаДвиженияРегистров.ПодчиненныеЭлементы Цикл
		ЭлементФормы.ТолькоПросмотр = НЕ Объект.РучнаяКорректировка;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВозможностьРедактированияЗаписей()

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	НовыеРеквизиты        = Новый Массив;
	УдаляемыеРеквизиты    = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		
		Если СтрокаРегистра.Имя = "ЕПС" Или СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого Реквизит Из СуществующиеРеквизиты Цикл
			Если Реквизит.Имя = СтрокаРегистра.Имя Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаРегистра.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТипРеквизита = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
		
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаРегистра.Имя, ТипРеквизита, , , Истина));
		
	КонецЦикла;
	
	Попытка
		ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	Исключение
		//Если ПолныеПрава.РежимОтладки() = Истина Тогда
		//	ТекстСообщения = "Не удалось удалить реквизиты:"+Символы.ПС;
		//	Для каждого ТекУдаляемыйРеквизит из УдаляемыеРеквизиты Цикл
		//		
		//		ТекстСообщения = ТекстСообщения +" "+ ТекУдаляемыйРеквизит;
		//	Конеццикла;
		//	Сообщить(ТекстСообщения);
		//КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистров()
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			Если СтрокаРегистра.ЕстьДвижения Тогда
				НаборЗаписей.Прочитать();
			КонецЕсли;
			
			ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);
			
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			Если СтрокаРегистра.ЕстьДвижения Тогда
				НаборЗаписей.Прочитать();
			КонецЕсли;
			
			ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);
			
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			Если СтрокаРегистра.ЕстьДвижения Тогда
				НаборЗаписей.Прочитать();
			КонецЕсли; 
			
			ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);
			
		КонецЕсли; 	
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьЗаписиРегистров()

&НаСервере
Процедура ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента = Неопределено)
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Проведен,
	|	ПометкаУдаления";
	Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|" + РеквизитДокумента.Имя;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + " КАК Док
	|ГДЕ
	|	Ссылка = &ДокументСсылка";
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	СтруктураШапки = Новый Структура;
	Для каждого Колонка Из ТаблицаШапки.Колонки Цикл
		СтруктураШапки.Вставить(Колонка.Имя, ТаблицаШапки[0][Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтруктуруШапкиДокумента()

&НаСервере
Процедура ПовторноеОткрытиеСервер()
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);
	
	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	
	СоздатьРеквизитыФормы();
	
	ПрочитатьЗаписиРегистров();
	
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()
	
	УстановитьВозможностьРедактированияЗаписей();
	
	Если СтруктураШапки.РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		
		ПрочитатьЗаписиРегистров();
		
		ЗаполнитьДобавленныеКолонкиТаблиц();
		
		ЭтаФорма.Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииРучнойКорректировки()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводкеЕПС(Проводка)
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ВалютныйДт", "КоличественныйДт");
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ВалютныйКт", "КоличественныйКт");
		
	Для каждого Проводка Из ЕПС Цикл
		УчетЕПСКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт);
		УчетЕПСКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт);
		ЗаполнитьНадписиВПроводкеЕПС(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Для Сч = 1 По 3 Цикл

		///////////////////////
		// Субконто Дт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться всегда.
				
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПССубконтоДт" + Сч);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// Пустое субконто в виде "<...>"
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПССубконтоДт" + Сч);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УА_НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));

		///////////////////////
		// Субконто Кт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться тоже всегда.
			
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПССубконтоКт" + Сч);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		
		// Пустое субконто в виде "<...>"
						
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПССубконтоКт" + Сч);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕПС.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УА_НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;


	//////////////////////
	// Количество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСНадписьКоличествоДт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСКоличествоДт");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСНадписьКоличествоКт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСКоличествоКт");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

	//////////////////////
	// Валюта
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСВалютаДт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСВалютнаяСуммаДт");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСВалютаКт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕПСВалютнаяСуммаКт");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕПС.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИмяРеквизитаПоляНаСервере(Поле)
	ПутьКДанным = Элементы[Поле].ПутьКДанным;
	НачальныйНомер = СтрНайти(ПутьКДанным, ".");
	ИмяРеквизит = Сред(ПутьКДанным, НачальныйНомер + 1);
	Возврат	ИмяРеквизит;			
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ИЗМЕНЕНИЕ РЕКВИЗИТОВ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Портфель, СчетУчета, ОстаткиОбороты",
		Форма.СтруктураШапки.Портфель, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Активы") Тогда
			СписокПараметров.Вставить("Активы", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Облигации") Тогда
			СписокПараметров.Вставить("Облигация", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияДУКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.Хозрасчетный.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

//ЕПС
&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконтоЕПС(СтандартнаяОбработка, Элемент)
	
	ТекущаяСтрока = Элементы.ЕПС.ТекущиеДанные;
	ДтКт = Лев(СтрЗаменить(Элемент.Имя, ?(СтрНайти(Элемент.Имя, "ЕПСНаборЗаписейСубконто") <> 0, "ЕПСНаборЗаписейСубконто", "ЕПССубконто"), ""), 2);
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ТекущаяСтрока.Период);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Портфель",     ТекущаяСтрока.Портфель);
	Для Ном = 1 По 3 Цикл		
		Если ТипЗнч(ТекущаяСтрока["Субконто" + ДтКт + Ном]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущаяСтрока["Субконто" + ДтКт + Ном]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока["Субконто" + ДтКт + Ном]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока["Субконто" + ДтКт + Ном]);
		КонецЕсли;
	КонецЦикла;	
	СписокПараметров.Вставить("СторонаПроводки", ДтКт);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", ДокументСсылка = Неопределено);
	
	ИмяСубконто = СтрЗаменить(Элемент.Имя, ?(СтрНайти(Элемент.Имя, "ЕПСНаборЗаписейСубконто") <> 0, "ЕПСНаборЗаписей", "ЕПС"), "");
	СписокПараметров.Вставить("ЗначениеСубконто", ТекущаяСтрока[ИмяСубконто]);
	
	УстановитьОтборыСубконтоЕПС(Элемент, СтандартнаяОбработка, ТекущаяСтрока.Портфель, СписокПараметров);

КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отборы в формах выбора субконто, такие как
// Портфель, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура УстановитьОтборыСубконтоЕПС(Элемент, СтандартнаяОбработка, Портфель, СписокПараметров, ОграничениеТипаЭлемента = Неопределено)
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(СписокПараметров.ЗначениеСубконто);
		Если ТипЭлемента = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(СписокПараметров.ЗначениеСубконто);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда


	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", , Элемент);
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					СписокОтбор = ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор;
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтбор, "Владелец",
						СписокПараметров.Контрагент, ВидСравненияКомпоновкиДанных.Равно, "Владелец", Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

&НаКлиенте
Процедура ОбработатьВыборСубконтоЕПС(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущаяСтрока = Элементы.ЕПС.ТекущиеДанные;
		Договор       = Неопределено;
		
		Для Ном = 1 По 3 Цикл		
			Если ТипЗнч(ТекущаяСтрока["СубконтоДт" + Ном]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
				Договор = ТекущаяСтрока["СубконтоДт" + Ном];
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		
		Если ЗначениеЗаполнено(Договор) Тогда
			Владелец = ОбщегоНазначенияДУВызовСервера.ЗначениеРеквизитаОбъекта(Договор, "Владелец");
			Если НЕ (Владелец = ВыбранноеЗначение) Тогда
				ТекущаяСтрока["СубконтоДт" + Ном] = ПолучитьПустойДоговор();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

&НаСервереБезКонтекста
Функция ПолучитьПустойДоговор() 
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

