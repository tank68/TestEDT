#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС

Функция МаскаПредставленияЛицевогоСчета(Счет) Экспорт
	
	СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(Счет);
	
	ВидСубконтоСимволОФР = ПланыВидовХарактеристик.ВидыСубконтоЕПС.СимволыОФР;
	
	Для НомерСубконто = 1 По 3 Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто] = ВидСубконтоСимволОФР Тогда
			Возврат "ХХХХХ.ХХХ.Х.Х.ХХХХХ.ХХХХХХХХХХ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат "ХХХХХ.ХХХ.Х.Х.ХХХХХХХХХХХХХХХ";
	
КонецФункции

// Функция возвращает счет второго порядка 
Функция СчетВторогоПорядка(Знач СчетЕПС) Экспорт
	
	ВозвращаемоеЗначение = СчетЕПС;
	//Если ЗначениеЗаполнено(СчетЕПС) Тогда
	//	Если ТипЗнч(СчетЕПС) = Тип("ПланСчетовСсылка.ЕПС") Тогда
	//		СчетЕПС = УчетЕПСПовтИсп.СвойстваСчета(СчетЕПС);
	//	КонецЕсли;
	//	Если СтрДлина(СокрЛП(СчетЕПС.Код)) > 5 Тогда
	//		ВозвращаемоеЗначение = СчетЕПС.Родитель;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ВозвращаемоеЗначение.Ссылка;
	
КонецФункции

// Функция проверяет является ли счет счетом третьего порядка 
Функция ЭтоСчетТретьегоПорядка(Знач СчетЕПС) Экспорт
	
	ЭтоСчетТретьегоПорядка = Ложь;
	//Если ЗначениеЗаполнено(СчетЕПС) Тогда
	//	Если ТипЗнч(СчетЕПС) = Тип("ПланСчетовСсылка.ЕПС") Тогда
	//		СчетЕПС = УчетЕПСПовтИсп.СвойстваСчета(СчетЕПС);
	//	КонецЕсли;
	//	Если СтрДлина(СокрЛП(СчетЕПС.Код)) = 8 Тогда
	//		ЭтоСчетТретьегоПорядка = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ЭтоСчетТретьегоПорядка;
	
КонецФункции

// Функция проверяет является ли счет счетом второго порядка
Функция ЭтоСчетВторогоПорядка(СчетЕПС) Экспорт
	
	ЭтоСчетВторогоПорядка = Ложь;
	//Если ЗначениеЗаполнено(СчетЕПС) Тогда
	//	Если СтрДлина(СокрЛП(СчетЕПС.Код)) = 5 Тогда
	//		ЭтоСчетВторогоПорядка = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ЭтоСчетВторогоПорядка; 
	
КонецФункции

// Функция проверяет принадлежит ли счет 9 группе. 
// Если принадлежит то Истина, если нет- то Ложь
//
// Параметры:
//  СчетЕПС - ПланСчетовСсылка.ЕПС .
//
// Возвращаемое значение:
//	Истина или Ложь.
//
Функция НаСчетеЕстьСимволОФР(СчетЕПС) Экспорт 
	
	Результат = Ложь;
	СубконтоСимволОФР = ПланыВидовХарактеристик.ВидыСубконтоЕПС.СимволыОФР;
	Если ЗначениеЗаполнено(СчетЕПС) Тогда 
		СвойстваСчета = УчетЕПСПовтИсп.СвойстваСчета(СчетЕПС);
		Для НомерСубконто = 1 По 3 Цикл
			Если СвойстваСчета["ВидСубконто" + НомерСубконто] = СубконтоСимволОФР Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ОБРАБОТЧИКИ_ОБНОВЛЕНИЙ

Процедура ЗаполнитьНастройкиПоставщика(ТабДокИзменения=Неопределено,ТолькоОбновить=Ложь) Экспорт
	
	Макет = ПланыСчетов.ЕПС.ПолучитьМакет("ПланСчетов");
	ОбластьПоставка = Макет.ПолучитьОбласть("Поставка");
	
	мЕстьИзм = Ложь;
	
	Если Не ТолькоОбновить Тогда
	
		МакетИзм =  ПланыСчетов.ЕПС.ПолучитьМакет("ПланСчетовДляИзменения");
		ОбластьШапка = МакетИзм.ПолучитьОбласть("ШапкаТЧ");
		ОбластьСтрока = МакетИзм.ПолучитьОбласть("СтрокаТЧ");
		
		ТабДокИзм = Новый ТабличныйДокумент;
		ТабДокИзм.Вывести(ОбластьШапка);
			
	КонецЕсли;
	
	Для инд = 1 по ОбластьПоставка.ВысотаТаблицы Цикл
		Родитель = СокрЛП(ОбластьПоставка.Область(инд,1).Текст);
		КодСчета = СокрЛП(ОбластьПоставка.Область(инд,2).Текст);
		НаименованиеСчета = СокрЛП(ОбластьПоставка.Область(инд,3).Текст);
		Субконто1 = СокрЛП(ОбластьПоставка.Область(инд,4).Текст);
		Субконто2 = СокрЛП(ОбластьПоставка.Область(инд,5).Текст);
		Субконто3 = СокрЛП(ОбластьПоставка.Область(инд,6).Текст);
		Валютный = ?(ОбластьПоставка.Область(инд,7).Текст="Истина",Истина,Ложь);
		Количественный = ?(ОбластьПоставка.Область(инд,8).Текст="Истина",Истина,Ложь);
		НалоговыйУчет = ?(ОбластьПоставка.Область(инд,9).Текст="Истина",Истина,Ложь);
		ЗапретитьИспользоватьВПроводках = ?(КодСчета="000.00",Ложь,?(ЗначениеЗаполнено(Родитель),Ложь,Истина));
		ПорядокСчета = ?(КодСчета="000.00",Перечисления.ПорядокСчетаЕПС.СчетВторогоПорядка,
			?(ЗначениеЗаполнено(Родитель),Перечисления.ПорядокСчетаЕПС.СчетВторогоПорядка,
			Перечисления.ПорядокСчетаЕПС.СчетПервогоПорядка));
		НайдСчет = ПланыСчетов.ЕПС.НайтиПоКоду(КодСчета);
		НайдРодитель = ?(ЗначениеЗаполнено(Родитель),
			ПланыСчетов.ЕПС.НайтиПоКоду(Родитель),
			ПланыСчетов.ЕПС.ПустаяСсылка());
					
		Если НайдСчет.Пустая() Тогда
			НовСчет = ПланыСчетов.ЕПС.СоздатьСчет();
			НовСчет.Код = КодСчета;
			НовСчет.Наименование = НаименованиеСчета;
			НовСчет.Описание =  НаименованиеСчета;
			НовСчет.Валютный = Валютный;
			НовСчет.Количественный = Количественный;
			НовСчет.НалоговыйУчет = НалоговыйУчет;
			НовСчет.ЗапретРедактирования = Истина;
			НовСчет.ЗапретитьИспользоватьВПроводках = ЗапретитьИспользоватьВПроводках;
			НовСчет.Родитель = НайдРодитель;
			НовСчет.ПорядокСчета = ПорядокСчета;
			Если ЗначениеЗаполнено(Субконто1) Тогда
				НовСубконто = НовСчет.ВидыСубконто.Добавить();
				НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто1];
				НовСубконто.Суммовой = Истина;
				НовСубконто.Количественный = Истина;
				НовСубконто.Валютный = Истина;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Субконто2) Тогда
				НовСубконто = НовСчет.ВидыСубконто.Добавить();
				НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто2];
				НовСубконто.Суммовой = Истина;
				НовСубконто.Количественный = Истина;
				НовСубконто.Валютный = Истина; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Субконто3) Тогда
				НовСубконто = НовСчет.ВидыСубконто.Добавить();
				НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто3];
				НовСубконто.Суммовой = Истина;
				НовСубконто.Количественный = Истина;
				НовСубконто.Валютный = Истина; 
			КонецЕсли;
			НовСчет.Записать();
			мТестСообщения = СтрШаблон("Записан новый счет %1",
					СокрЛП(НовСчет));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
		Иначе
			
			Если ТолькоОбновить Тогда
				Продолжить;				
			КонецЕсли; 
			
			мИзмененияВРучную = Ложь;
			мЗаписатьИзменения = Ложь;
			ИзмСчет = НайдСчет.ПолучитьОбъект();
			Если ИзмСчет.ПорядокСчета <> ПорядокСчета Тогда
				мТестСообщения = СтрШаблон("Изменен ПорядокСчета с %1 на %2",
					СокрЛП(ИзмСчет.ПорядокСчета),
					СокрЛП(ПорядокСчета));
				ИзмСчет.ПорядокСчета =  ПорядокСчета;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				мЗаписатьИзменения = Истина;
			КонецЕсли; 
			Если ИзмСчет.Родитель <> НайдРодитель Тогда
				мТестСообщения = СтрШаблон("Изменен Родитель с %1 на %2",
					СокрЛП(ИзмСчет.Родитель),
					СокрЛП(НайдРодитель));
				ИзмСчет.Родитель =  НайдРодитель;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				мЗаписатьИзменения = Истина;
			КонецЕсли; 
			Если ИзмСчет.Наименование <> Лев(НаименованиеСчета,160) Тогда
				мТестСообщения = СтрШаблон("Изменено наименование с %1 на %2",
					СокрЛП(ИзмСчет.Наименование),
					СокрЛП( Лев(НаименованиеСчета,160)));
				ИзмСчет.Наименование =  Лев(НаименованиеСчета,160);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				мЗаписатьИзменения = Истина;
			КонецЕсли; 
			Если ИзмСчет.Описание <> НаименованиеСчета Тогда
				мТестСообщения = СтрШаблон("Изменено Описание с %1 на %2",
					СокрЛП(ИзмСчет.Описание),
					СокрЛП(НаименованиеСчета));
				ИзмСчет.Описание = НаименованиеСчета;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				мЗаписатьИзменения = Истина;
			КонецЕсли; 
			Если ИзмСчет.Валютный <> Валютный Тогда
				мТестСообщения = СтрШаблон("Изменено признак Валютный с %1 на %2",
					СокрЛП(ИзмСчет.Валютный),
					СокрЛП(Валютный));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				ИзмСчет.Валютный = Валютный;
				мЗаписатьИзменения = Истина; 
			КонецЕсли; 
			Если ИзмСчет.Количественный <> Количественный Тогда
				мТестСообщения = СтрШаблон("Изменено признак Количественный с %1 на %2",
					СокрЛП(ИзмСчет.Количественный),
					СокрЛП(Количественный));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				ИзмСчет.Количественный = Количественный;
				мЗаписатьИзменения = Истина;
			КонецЕсли;
			Если ИзмСчет.НалоговыйУчет <> НалоговыйУчет Тогда
				мТестСообщения = СтрШаблон("Изменено признак НалоговыйУчет с %1 на %2",
					СокрЛП(ИзмСчет.НалоговыйУчет),
					СокрЛП(НалоговыйУчет));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения); 
				ИзмСчет.НалоговыйУчет = НалоговыйУчет;
				мЗаписатьИзменения = Истина; 
			КонецЕсли;
			Если ИзмСчет.ЗапретитьИспользоватьВПроводках <> ЗапретитьИспользоватьВПроводках Тогда
				мТестСообщения = СтрШаблон("Изменено признак ЗапретитьИспользоватьВПроводках с %1 на %2",
					СокрЛП(ИзмСчет.ЗапретитьИспользоватьВПроводках),
					СокрЛП(ЗапретитьИспользоватьВПроводках));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
				ИзмСчет.ЗапретитьИспользоватьВПроводках = ЗапретитьИспользоватьВПроводках;
				мЗаписатьИзменения = Истина;
			КонецЕсли;  
			ИзмСчет.ЗапретРедактирования = Истина;
			Если ЗначениеЗаполнено(Субконто1) Тогда
				ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто1];
				Если ИзмСчет.ВидыСубконто.Количество()=0 Тогда
					НовСубконто = ИзмСчет.ВидыСубконто.Добавить();
					НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто1];
					НовСубконто.Суммовой = Истина;
					НовСубконто.Количественный = Истина;
					НовСубконто.Валютный = Истина;  
					мТестСообщения = СтрШаблон("В счет %1 добавлено 1 субконто %2",
						СокрЛП(ИзмСчет),
						СокрЛП(Субконто1));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
					мЗаписатьИзменения = Истина;   
				ИначеЕсли ИзмСчет.ВидыСубконто.Количество()>=1
					И ИзмСчет.ВидыСубконто[0].ВидСубконто <> ВидСубконто1 Тогда 
					мИзмененияВРучную = Истина;  
				КонецЕсли; 				
				Если ЗначениеЗаполнено(Субконто2) Тогда
					ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто2];
					Если ИзмСчет.ВидыСубконто.Количество()= 1 Тогда
						НовСубконто = ИзмСчет.ВидыСубконто.Добавить();
						НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто2];
						НовСубконто.Суммовой = Истина;
						НовСубконто.Количественный = Истина;
						НовСубконто.Валютный = Истина;
						мЗаписатьИзменения = Истина;
						мТестСообщения = СтрШаблон("В счет %1 добавлено 2 субконто %2",
							СокрЛП(ИзмСчет),
							СокрЛП(Субконто2));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения);
					ИначеЕсли ИзмСчет.ВидыСубконто.Количество()<2 Тогда						
						мИзмененияВРучную = Истина;
					ИначеЕсли ИзмСчет.ВидыСубконто.Количество()>=2
						И ИзмСчет.ВидыСубконто[1].ВидСубконто <> ВидСубконто2 Тогда 
						мИзмененияВРучную = Истина;
					КонецЕсли;
					Если ЗначениеЗаполнено(Субконто3) Тогда
						ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто3];
						Если ИзмСчет.ВидыСубконто.Количество()=2 Тогда
							НовСубконто = ИзмСчет.ВидыСубконто.Добавить();
							НовСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоЕПС[Субконто3];
							НовСубконто.Суммовой = Истина;
							НовСубконто.Количественный = Истина;
							НовСубконто.Валютный = Истина; 
							мЗаписатьИзменения = Истина;
							мТестСообщения = СтрШаблон("В счет %1 добавлено 3 субконто %2",
								СокрЛП(ИзмСчет),
								СокрЛП(Субконто3));
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(мТестСообщения); 
						ИначеЕсли ИзмСчет.ВидыСубконто.Количество()<3 Тогда
							мИзмененияВРучную = Истина;
						ИначеЕсли ИзмСчет.ВидыСубконто.Количество()=3
							И ИзмСчет.ВидыСубконто[2].ВидСубконто <> ВидСубконто3 Тогда 
							мИзмененияВРучную = Истина;
						КонецЕсли; 
					ИначеЕсли ИзмСчет.ВидыСубконто.Количество()=3 Тогда						
						мИзмененияВРучную = Истина; 
					КонецЕсли; 
				ИначеЕсли ИзмСчет.ВидыСубконто.Количество()=3 Тогда
					мИзмененияВРучную = Истина;   
				ИначеЕсли ИзмСчет.ВидыСубконто.Количество()=2 Тогда
					мИзмененияВРучную = Истина; 
				КонецЕсли; 				
			ИначеЕсли ИзмСчет.ВидыСубконто.Количество()>0 Тогда
				мИзмененияВРучную = Истина;								
			КонецЕсли; 
			Если мЗаписатьИзменения Тогда
				ИзмСчет.Записать(); 
			КонецЕсли;
			Если мИзмененияВРучную Тогда
				ОбластьСтрока.Параметры.Родитель = Родитель;
				ОбластьСтрока.Параметры.КодСчета = КодСчета;
				ОбластьСтрока.Параметры.НаименованиеСчета = НаименованиеСчета;
				ОбластьСтрока.Параметры.Субконто1 = Субконто1;
				ОбластьСтрока.Параметры.Субконто2 = Субконто2;
				ОбластьСтрока.Параметры.Субконто3 = Субконто3;
				ОбластьСтрока.Параметры.Валютный = Валютный;
				ОбластьСтрока.Параметры.Количественный = Количественный;
				ОбластьСтрока.Параметры.НалоговыйУчет = НалоговыйУчет;
				ТабДокИзм.Вывести(ОбластьСтрока);	
				мЕстьИзм = Истина;
			КонецЕсли; 
						
		КонецЕсли;		
	КонецЦикла;
	
	Если ТолькоОбновить Тогда
		Возврат;				
	КонецЕсли; 
	
	Если мЕстьИзм Тогда		
		ТабДокИзменения = ТабДокИзм;  		
	КонецЕсли; 	
		
КонецПроцедуры

// Процедура заполняет реквизит "ЗапретитьИспользоватьВПроводках"
Процедура УстановитьЗапретИспользованияВПроводках() Экспорт
	
	Выборка = ПланыСчетов.ЕПС.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПодчиненных = ПланыСчетов.ЕПС.Выбрать(Выборка.Ссылка);
		Если Выборка.Удален Тогда
			ЗапретитьИспользоватьВПроводках = Истина;
		Иначе
			ЗапретитьИспользоватьВПроводках = ВыборкаПодчиненных.Следующий(); //счет группа
		КонецЕсли;
		
		Если Выборка.ЗапретитьИспользоватьВПроводках <> ЗапретитьИспользоватьВПроводках Тогда
			СчетОбъект = Выборка.ПолучитьОбъект();
			СчетОбъект.ЗапретитьИспользоватьВПроводках = ЗапретитьИспользоватьВПроводках;
			СчетОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает пользовательские виды Субконто на счетах ЕПС. 
//
Процедура УдалитьПользовательскиеСубконтоНаСчетахЕПС(МассивСубконто = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕПСВидыСубконто.Ссылка КАК Счет,
		|	ЕПСВидыСубконто.ВидСубконто КАК ВидСубконто
		|ИЗ
		|	ПланСчетов.ЕПС.ВидыСубконто КАК ЕПСВидыСубконто
		|ГДЕ
		|	ЕПСВидыСубконто.Предопределенное = ЛОЖЬ
		|	И ЕПСВидыСубконто.ВидСубконто В(&ВидСубконто)";
	Запрос.УстановитьПараметр("ВидСубконто", МассивСубконто);
	
	Если МассивСубконто = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЕПСВидыСубконто.ВидСубконто В(&ВидСубконто)", "");
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетОбъект = Выборка.Счет.ПолучитьОбъект();
		СчетОбъект.ВидыСубконто.Удалить(СчетОбъект.ВидыСубконто.Индекс(СчетОбъект.ВидыСубконто.Найти(Выборка.ВидСубконто)));
		СчетОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаписывает все счета из списка. 
//
// Параметры:
//  Счета - Массив - ПланСчетовСсылка.ЕПС
// 
Процедура ПерезаписатьСчета(Счета) Экспорт
	
	Для каждого Счет Из Счета Цикл	
		Попытка
			СчетОбъект = Счет.ПолучитьОбъект();	
			СчетОбъект.Записать();		
		Исключение
			ТекстСообщения = СтрШаблон("Не удалось записать счет %1. Потребуется ручная перезапись счета.", Счет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Счет);
		КонецПопытки;			
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли